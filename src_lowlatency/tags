!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADD_TYPE_NAME	common/utils.h	/^#define ADD_TYPE_NAME(/;"	d
ARRAY_SIZE	components/scheduler/vll_scheduler.h	/^#define ARRAY_SIZE /;"	d
Abort	fs/metadata_store.cc	/^  void Abort() {$/;"	f	class:ExecutionContext
AcquireMutex	machine/thread_pool/thread_pool_test.cc	/^  void AcquireMutex() {$/;"	f	class:DeadlockFreedomMessageHandler
ActionQueue	components/scheduler/vll_scheduler.h	/^  map<uint64, Action*> ActionQueue;$/;"	m	class:VLLScheduler
ActionSource	fs/block_log.h	/^    ActionSource(BlockLogApp* log)$/;"	f	class:BlockLogApp::ActionSource
ActionSource	fs/block_log.h	/^  class ActionSource : public Source<Action*> {$/;"	c	class:BlockLogApp
Add	common/source.h	/^  void Add(const T& t) {$/;"	f	class:QueueSource
AddApp	machine/machine.cc	/^void Machine::AddApp(const StartAppProto& sap) {$/;"	f	class:Machine
AddApp	machine/machine.h	/^  void AddApp(const string& app, const string& name) {$/;"	f	class:Machine
AddAppInternal	machine/machine.cc	/^void Machine::AddAppInternal(const StartAppProto& sap) {$/;"	f	class:Machine
AddStartableApp	machine/app/app.cc	/^bool AddStartableApp(const string& app, StartApp* startapp) {$/;"	f
App	machine/app/app.h	/^class App : public MessageHandler {$/;"	c
AppData	machine/machine.h	/^  AtomicMap<string, string>* AppData() {$/;"	f	class:Machine
Append	components/log/local_mem_log.cc	/^void LocalMemLog::Append(uint64 version, const Slice& entry) {$/;"	f	class:LocalMemLog
Append	components/log/log_app.cc	/^void LogApp::Append(const Slice& entry, uint64 count) {$/;"	f	class:LogApp
Append	components/log/log_app_test.cc	/^  void Append(const Slice& entry) {$/;"	f	class:LogAppTest
Append	components/log/paxos.cc	/^void FakePaxosApp::Append(const Slice& entry, uint64 count) {$/;"	f	class:FakePaxosApp
Append	components/log/paxos2.cc	/^void Paxos2App::Append(uint64 blockid, uint64 count) {$/;"	f	class:Paxos2App
Append	components/log/paxos2_test.cc	/^  void Append(uint64 i, uint64 entry, int count) {$/;"	f	class:Paxos2Test
Append	components/log/paxos_test.cc	/^  void Append(uint64 i, const Slice& entry) {$/;"	f	class:FakePaxosTest
Append	fs/block_log.h	/^  virtual void Append(Action* entry) {$/;"	f	class:BlockLogApp
Append	fs/block_log.h	/^  virtual void Append(const Slice& entry, uint64 count = 1) {$/;"	f	class:BlockLogApp
Append	machine/message_buffer.h	/^  inline void Append(char* ptr, int len) {$/;"	f	class:MessageBuffer
Append	machine/message_buffer.h	/^  inline void Append(const Slice& s) {$/;"	f	class:MessageBuffer
Append	machine/message_buffer.h	/^  inline void Append(const google::protobuf::Message& m) {$/;"	f	class:MessageBuffer
Append	machine/message_buffer.h	/^  inline void Append(string* s) {$/;"	f	class:MessageBuffer
Append	machine/message_buffer.h	/^  inline void Append(zmq::message_t* m) {$/;"	f	class:MessageBuffer
Append64	common/varint.h	/^inline static void Append64(string* s, uint64 x) {$/;"	f	namespace:varint
AppendFileToFile	fs/fs.h	/^  virtual Status AppendFileToFile(const string& data, const string& path) {$/;"	f	class:FS
AppendFileToFile	fs/local_calvinfs.h	/^  virtual Status AppendFileToFile(const string& data, const string& path) {$/;"	f	class:LocalFileSystem
AppendPart	machine/message_buffer.h	/^  inline void AppendPart(MessagePart* part) {$/;"	f	class:MessageBuffer
AppendStringToFile	fs/calvinfs.cc	/^Status LocalCalvinFS::AppendStringToFile(const string& data, const string& path) {$/;"	f	class:LocalCalvinFS
AppendStringToFile	fs/calvinfs_client_app.cc	/^MessageBuffer* CalvinFSClientApp::AppendStringToFile($/;"	f	class:CalvinFSClientApp
AppendStringToFile	fs/hdfs.cc	/^Status HadoopFS::AppendStringToFile($/;"	f	class:HadoopFS
AppendStringToFile	fs/local_calvinfs.h	/^  virtual Status AppendStringToFile(const string& data, const string& path) {$/;"	f	class:LocalFileSystem
AppendStringToFile	fs/localfs.cc	/^Status LocalFS::AppendStringToFile($/;"	f	class:LocalFS
AppendVersion	components/store/versioned_kvstore.cc	/^void AppendVersion(string* key, uint64 version, uint64 flags = 0) {$/;"	f
Append_Internal	fs/metadata_store.cc	/^void MetadataStore::Append_Internal($/;"	f	class:MetadataStore
Appender	experimental/dag/appender.h	/^ Appender(int latency) : $/;"	f	class:Appender
Appender	experimental/dag/appender.h	/^class Appender : public App {$/;"	c
AtomicMap	common/atomic.h	/^  AtomicMap() {}$/;"	f	class:AtomicMap
AtomicMap	common/atomic.h	/^class AtomicMap {$/;"	c
AtomicQueue	common/atomic.h	/^  AtomicQueue() {$/;"	f	class:AtomicQueue
AtomicQueue	common/atomic.h	/^class AtomicQueue {$/;"	c
AtomicQueuePopThread	common/atomic_test.cc	/^void* AtomicQueuePopThread(void* arg) {$/;"	f
AtomicQueuePushThread	common/atomic_test.cc	/^void* AtomicQueuePushThread(void* arg) {$/;"	f
BINDIR	Makefile	/^BINDIR := ..\/bin$/;"	m
BM_Delete	btree/btree_bench.cc	/^void BM_Delete(int n) {$/;"	f	namespace:btree::__anon11
BM_Fifo	btree/btree_bench.cc	/^void BM_Fifo(int n) {$/;"	f	namespace:btree::__anon11
BM_FullLookup	btree/btree_bench.cc	/^void BM_FullLookup(int n) {$/;"	f	namespace:btree::__anon11
BM_FwdIter	btree/btree_bench.cc	/^void BM_FwdIter(int n) {$/;"	f	namespace:btree::__anon11
BM_Insert	btree/btree_bench.cc	/^void BM_Insert(int n) {$/;"	f	namespace:btree::__anon11
BM_Lookup	btree/btree_bench.cc	/^void BM_Lookup(int n) {$/;"	f	namespace:btree::__anon11
BM_MixedAddRem	btree/btree_bench.cc	/^void BM_MixedAddRem(int n) {$/;"	f	namespace:btree::__anon11
BM_QueueAddRem	btree/btree_bench.cc	/^void BM_QueueAddRem(int n) {$/;"	f	namespace:btree::__anon11
BTREE_BENCHMARK	btree/btree_bench.cc	/^#define BTREE_BENCHMARK(/;"	d	file:
BTREE_BENCHMARK2	btree/btree_bench.cc	/^#define BTREE_BENCHMARK2(/;"	d	file:
BTREE_BENCHMARK3	btree/btree_bench.cc	/^#define BTREE_BENCHMARK3(/;"	d	file:
BTreeIterator	components/store/btreestore.cc	/^  explicit BTreeIterator(BTreeStore* store)$/;"	f	class:BTreeIterator
BTreeIterator	components/store/btreestore.cc	/^class BTreeIterator : public KVStore::Iterator {$/;"	c	file:
BTreeStore	components/store/btreestore.h	/^  BTreeStore() {}$/;"	f	class:BTreeStore
BTreeStore	components/store/btreestore.h	/^class BTreeStore : public KVStore {$/;"	c
BackgroundAppendStringToFile	fs/calvinfs_client_app.h	/^  void BackgroundAppendStringToFile(const Slice& data, const Slice& path) {$/;"	f	class:CalvinFSClientApp
BackgroundCopyFile	fs/calvinfs_client_app.h	/^  void BackgroundCopyFile(const Slice& from_path, const Slice& to_path) {$/;"	f	class:CalvinFSClientApp
BackgroundCreateFile	fs/calvinfs_client_app.h	/^  void BackgroundCreateFile(const Slice& path, FileType type = DATA) {$/;"	f	class:CalvinFSClientApp
BackgroundLS	fs/calvinfs_client_app.h	/^  void BackgroundLS(const Slice& path) {$/;"	f	class:CalvinFSClientApp
BackgroundReadFile	fs/calvinfs_client_app.h	/^  void BackgroundReadFile(const Slice& path) {$/;"	f	class:CalvinFSClientApp
BackgroundRenameFile	fs/calvinfs_client_app.h	/^  void BackgroundRenameFile (const Slice& from_path, const Slice& to_path) {$/;"	f	class:CalvinFSClientApp
BadCommands	fs/fs_test.cc	/^  void BadCommands() {$/;"	f	class:FSTest
BaseName	lint	/^  def BaseName(self):$/;"	m	class:FileInfo
Begin	lint	/^  def Begin(self, function_name):$/;"	m	class:_FunctionState
Benchmark	fs/block_store_test.cc	/^void Benchmark() {$/;"	f
BenchmarkAtomicQueue	common/atomic_test.cc	/^void BenchmarkAtomicQueue() {$/;"	f
BenchmarkAtomicQueueContention	common/atomic_test.cc	/^void BenchmarkAtomicQueueContention(int producers, int consumers) {$/;"	f
BenchmarkCAS	common/mutex_test.cc	/^void BenchmarkCAS() {$/;"	f
BenchmarkIncrement	common/mutex_test.cc	/^void BenchmarkIncrement() {$/;"	f
BenchmarkLoopyWorkload	machine/thread_pool/thread_pool_test.cc	/^void BenchmarkLoopyWorkload(int high_tasks, int low_tasks) {$/;"	f
BenchmarkMessageHandler	machine/thread_pool/thread_pool_test.cc	/^  BenchmarkMessageHandler() : go_(false), started_(0), high_(0), low_(0) {}$/;"	f	class:BenchmarkMessageHandler
BenchmarkMessageHandler	machine/thread_pool/thread_pool_test.cc	/^class BenchmarkMessageHandler : public MessageHandler {$/;"	c	file:
BenchmarkMutex	common/mutex_test.cc	/^void BenchmarkMutex() {$/;"	f
BenchmarkMutexRW	common/mutex_test.cc	/^void BenchmarkMutexRW() {$/;"	f
BenchmarkParseFromString_A	experimental/protobuf_reader_test.cc	/^void BenchmarkParseFromString_A(int xcount, int scount, int ssize) {$/;"	f
BenchmarkParseFromString_B	experimental/protobuf_reader_test.cc	/^void BenchmarkParseFromString_B(int depth, int fanout) {$/;"	f
BenchmarkProfileParseFromString	experimental/protobuf_reader_test.cc	/^void BenchmarkProfileParseFromString(int total) {$/;"	f
BenchmarkReadRepeatedField_A	experimental/protobuf_reader_test.cc	/^void BenchmarkReadRepeatedField_A(int xcount, int scount, int ssize) {$/;"	f
BenchmarkReadRepeatedField_B	experimental/protobuf_reader_test.cc	/^void BenchmarkReadRepeatedField_B(int depth, int fanout) {$/;"	f
BenchmarkRun	btree/btree_bench.cc	/^BenchmarkRun::BenchmarkRun(const char *name, void (*func)(int))$/;"	f	class:btree::__anon11::BenchmarkRun
BenchmarkRun	btree/btree_bench.cc	/^struct BenchmarkRun {$/;"	s	namespace:btree::__anon11	file:
BenchmarkShortWorkload	machine/thread_pool/thread_pool_test.cc	/^void BenchmarkShortWorkload(int high_tasks, int low_tasks) {$/;"	f
BlockLogApp	fs/block_log.h	/^  BlockLogApp() : go_(true), going_(false), to_delete_(60) {}$/;"	f	class:BlockLogApp
BlockLogApp	fs/block_log.h	/^class BlockLogApp : public App {$/;"	c
BlockLogTest	fs/block_log_test.cc	/^  BlockLogTest(int n, int r) : config_(MakeCalvinFSConfig(n, r)) {$/;"	f	class:BlockLogTest
BlockLogTest	fs/block_log_test.cc	/^class BlockLogTest {$/;"	c	file:
BlockStore	fs/block_store.h	/^class BlockStore {$/;"	c
BlockStoreApp	fs/block_store.h	/^  BlockStoreApp() {}$/;"	f	class:BlockStoreApp
BlockStoreApp	fs/block_store.h	/^  explicit BlockStoreApp(BlockStore* blocks) : blocks_(blocks) {}$/;"	f	class:BlockStoreApp
BlockStoreApp	fs/block_store.h	/^class BlockStoreApp : public App {$/;"	c
BtreeAllocatorTest	btree/btree_test.h	/^void BtreeAllocatorTest() {$/;"	f	namespace:btree
BtreeMapTest	btree/btree_test.h	/^void BtreeMapTest() {$/;"	f	namespace:btree
BtreeMultiMapTest	btree/btree_test.h	/^void BtreeMultiMapTest() {$/;"	f	namespace:btree
BtreeMultiTest	btree/btree_test.h	/^void BtreeMultiTest() {$/;"	f	namespace:btree
BtreeTest	btree/btree_test.h	/^void BtreeTest() {$/;"	f	namespace:btree
CALVIN_CHAMELEON_LAZY_LAZY_STORE_H_	experimental/lazy_store.h	/^#define CALVIN_CHAMELEON_LAZY_LAZY_STORE_H_$/;"	d
CALVIN_COMMON_ATOMIC_H_	common/atomic.h	/^#define CALVIN_COMMON_ATOMIC_H_$/;"	d
CALVIN_COMMON_MUTEX_H_	common/mutex.h	/^#define CALVIN_COMMON_MUTEX_H_$/;"	d
CALVIN_COMMON_SOURCE_H_	common/source.h	/^#define CALVIN_COMMON_SOURCE_H_$/;"	d
CALVIN_COMMON_TYPES_H_	common/types.h	/^#define CALVIN_COMMON_TYPES_H_$/;"	d
CALVIN_COMMON_UTILS_H_	common/utils.h	/^#define CALVIN_COMMON_UTILS_H_$/;"	d
CALVIN_COMMON_VARINT_H_	common/varint.h	/^#define CALVIN_COMMON_VARINT_H_$/;"	d
CALVIN_COMMON_VEC_H_	common/vec.h	/^#define CALVIN_COMMON_VEC_H_$/;"	d
CALVIN_COMPONENTS_DAG_APPENDER_H_	experimental/dag/appender.h	/^#define CALVIN_COMPONENTS_DAG_APPENDER_H_$/;"	d
CALVIN_COMPONENTS_LOG_LOCAL_MEM_LOG_H_	components/log/local_mem_log.h	/^#define CALVIN_COMPONENTS_LOG_LOCAL_MEM_LOG_H_$/;"	d
CALVIN_COMPONENTS_LOG_LOG_APP_H_	components/log/log_app.h	/^#define CALVIN_COMPONENTS_LOG_LOG_APP_H_$/;"	d
CALVIN_COMPONENTS_LOG_LOG_H_	components/log/log.h	/^#define CALVIN_COMPONENTS_LOG_LOG_H_$/;"	d
CALVIN_COMPONENTS_LOG_LOG_SOURCE_H_	components/log/log_source.h	/^#define CALVIN_COMPONENTS_LOG_LOG_SOURCE_H_$/;"	d
CALVIN_COMPONENTS_LOG_PAXOS2_H_	components/log/paxos2.h	/^#define CALVIN_COMPONENTS_LOG_PAXOS2_H_$/;"	d
CALVIN_COMPONENTS_LOG_PAXOS_H_	components/log/paxos.h	/^#define CALVIN_COMPONENTS_LOG_PAXOS_H_$/;"	d
CALVIN_COMPONENTS_SCHEDULER_LAZY_SCHEDULER_H_	components/scheduler/lazy_scheduler.h	/^#define CALVIN_COMPONENTS_SCHEDULER_LAZY_SCHEDULER_H_$/;"	d
CALVIN_COMPONENTS_SCHEDULER_LOCKING_SCHEDULER_H_	components/scheduler/locking_scheduler.h	/^#define CALVIN_COMPONENTS_SCHEDULER_LOCKING_SCHEDULER_H_$/;"	d
CALVIN_COMPONENTS_SCHEDULER_LOCK_MANAGER_H_	components/scheduler/lock_manager.h	/^#define CALVIN_COMPONENTS_SCHEDULER_LOCK_MANAGER_H_$/;"	d
CALVIN_COMPONENTS_SCHEDULER_SCHEDULER_H_	components/scheduler/scheduler.h	/^#define CALVIN_COMPONENTS_SCHEDULER_SCHEDULER_H_$/;"	d
CALVIN_COMPONENTS_SCHEDULER_SERIAL_SCHEDULER_H_	components/scheduler/serial_scheduler.h	/^#define CALVIN_COMPONENTS_SCHEDULER_SERIAL_SCHEDULER_H_$/;"	d
CALVIN_COMPONENTS_SCHEDULER_VLL_SCHEDULER_H_	components/scheduler/vll_scheduler.h	/^#define CALVIN_COMPONENTS_SCHEDULER_VLL_SCHEDULER_H_$/;"	d
CALVIN_COMPONENTS_STORE_BTREESTORE_H_	components/store/btreestore.h	/^#define CALVIN_COMPONENTS_STORE_BTREESTORE_H_$/;"	d
CALVIN_COMPONENTS_STORE_HYBRID_VERSIONED_KVSTORE_H_	components/store/hybrid_versioned_kvstore.h	/^#define CALVIN_COMPONENTS_STORE_HYBRID_VERSIONED_KVSTORE_H_$/;"	d
CALVIN_COMPONENTS_STORE_KVSTORE_H_	components/store/kvstore.h	/^#define CALVIN_COMPONENTS_STORE_KVSTORE_H_$/;"	d
CALVIN_COMPONENTS_STORE_LEVELDBSTORE_H_	components/store/leveldbstore.h	/^#define CALVIN_COMPONENTS_STORE_LEVELDBSTORE_H_$/;"	d
CALVIN_COMPONENTS_STORE_MICROBENCHMARK_H_	components/store/microbenchmark_store.h	/^#define CALVIN_COMPONENTS_STORE_MICROBENCHMARK_H_$/;"	d
CALVIN_COMPONENTS_STORE_STORE_APP_H_	components/store/store_app.h	/^#define CALVIN_COMPONENTS_STORE_STORE_APP_H_$/;"	d
CALVIN_COMPONENTS_STORE_STORE_H_	components/store/store.h	/^#define CALVIN_COMPONENTS_STORE_STORE_H_$/;"	d
CALVIN_COMPONENTS_STORE_TPCC_H_	components/store/tpcc_store.h	/^#define CALVIN_COMPONENTS_STORE_TPCC_H_$/;"	d
CALVIN_COMPONENTS_STORE_VERSIONED_KVSTORE_H_	components/store/versioned_kvstore.h	/^#define CALVIN_COMPONENTS_STORE_VERSIONED_KVSTORE_H_$/;"	d
CALVIN_DB_CLIENT_H_	db/client.h	/^#define CALVIN_DB_CLIENT_H_$/;"	d
CALVIN_EXPERIMENTAL_PROTOBUF_READER_H_	experimental/protobuf_reader.h	/^#define CALVIN_EXPERIMENTAL_PROTOBUF_READER_H_$/;"	d
CALVIN_FS_BLOCK_LOG_H_	fs/block_log.h	/^#define CALVIN_FS_BLOCK_LOG_H_$/;"	d
CALVIN_FS_BLOCK_STORE_H_	fs/block_store.h	/^#define CALVIN_FS_BLOCK_STORE_H_$/;"	d
CALVIN_FS_CALVINFS_CLIENT_APP_H_	fs/calvinfs_client_app.h	/^#define CALVIN_FS_CALVINFS_CLIENT_APP_H_$/;"	d
CALVIN_FS_CALVINFS_H_	fs/calvinfs.h	/^#define CALVIN_FS_CALVINFS_H_$/;"	d
CALVIN_FS_FS_H_	fs/fs.h	/^#define CALVIN_FS_FS_H_$/;"	d
CALVIN_FS_HDFS_H_	fs/hdfs.h	/^#define CALVIN_FS_HDFS_H_$/;"	d
CALVIN_FS_LOCALFS_H_	fs/localfs.h	/^#define CALVIN_FS_LOCALFS_H_$/;"	d
CALVIN_FS_LOCAL_CALVINFS_H_	fs/local_calvinfs.h	/^#define CALVIN_FS_LOCAL_CALVINFS_H_$/;"	d
CALVIN_FS_METADATA_STORE_H_	fs/metadata_store.h	/^#define CALVIN_FS_METADATA_STORE_H_$/;"	d
CALVIN_FS_STATUS_H_	fs/status.h	/^#define CALVIN_FS_STATUS_H_$/;"	d
CALVIN_MACHINE_APP_APP_H_	machine/app/app.h	/^#define CALVIN_MACHINE_APP_APP_H_$/;"	d
CALVIN_MACHINE_APP_REPORTER_H_	machine/app/reporter.h	/^#define CALVIN_MACHINE_APP_REPORTER_H_$/;"	d
CALVIN_MACHINE_CLUSTER_CONFIG_H_	machine/cluster_config.h	/^#define CALVIN_MACHINE_CLUSTER_CONFIG_H_$/;"	d
CALVIN_MACHINE_CLUSTER_MANAGER_H_	machine/cluster_manager.h	/^#define CALVIN_MACHINE_CLUSTER_MANAGER_H_$/;"	d
CALVIN_MACHINE_CONNECTION_CONNECTION_H_	machine/connection/connection.h	/^#define CALVIN_MACHINE_CONNECTION_CONNECTION_H_$/;"	d
CALVIN_MACHINE_CONNECTION_CONNECTION_ZMQ_H_	machine/connection/connection_zmq.h	/^#define CALVIN_MACHINE_CONNECTION_CONNECTION_ZMQ_H_$/;"	d
CALVIN_MACHINE_EXTERNAL_CONNECTION_H_	machine/external_connection.h	/^#define CALVIN_MACHINE_EXTERNAL_CONNECTION_H_$/;"	d
CALVIN_MACHINE_MACHINE_H_	machine/machine.h	/^#define CALVIN_MACHINE_MACHINE_H_$/;"	d
CALVIN_MACHINE_MESSAGE_BUFFER_H_	machine/message_buffer.h	/^#define CALVIN_MACHINE_MESSAGE_BUFFER_H_$/;"	d
CALVIN_MACHINE_MESSAGE_HANDLER_H_	machine/message_handler.h	/^#define CALVIN_MACHINE_MESSAGE_HANDLER_H_$/;"	d
CALVIN_MACHINE_THREAD_POOL_THREAD_POOL_H_	machine/thread_pool/thread_pool.h	/^#define CALVIN_MACHINE_THREAD_POOL_THREAD_POOL_H_$/;"	d
CALVIN_SCRIPTS_SCRIPT_UTILS_H_	scripts/script_utils.h	/^#define CALVIN_SCRIPTS_SCRIPT_UTILS_H_$/;"	d
COMPILE_ASSERT	btree/btree.h	/^#define COMPILE_ASSERT(/;"	d
CXX	Makefile	/^CXX           := g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS := $(OPT_MODE) -MD -I$(SRCDIR) -I$(OBJDIR) \\$/;"	m
CalvinFSClientApp	fs/calvinfs_client_app.h	/^  CalvinFSClientApp()$/;"	f	class:CalvinFSClientApp
CalvinFSClientApp	fs/calvinfs_client_app.h	/^class CalvinFSClientApp : public App {$/;"	c
CalvinFSConfigMap	fs/calvinfs.cc	/^CalvinFSConfigMap::CalvinFSConfigMap(Machine* machine) {$/;"	f	class:CalvinFSConfigMap
CalvinFSConfigMap	fs/calvinfs.cc	/^CalvinFSConfigMap::CalvinFSConfigMap(const CalvinFSConfig& config) {$/;"	f	class:CalvinFSConfigMap
CalvinFSConfigMap	fs/calvinfs.h	/^class CalvinFSConfigMap {$/;"	c
CannotResetStore	components/scheduler/scheduler_test.cc	/^  void CannotResetStore() {$/;"	f	class:SchedulerTest
CanonicalizeAlphabeticalOrder	lint	/^  def CanonicalizeAlphabeticalOrder(self, header_path):$/;"	m	class:_IncludeState
ChangePermissions_Internal	fs/metadata_store.cc	/^void MetadataStore::ChangePermissions_Internal($/;"	f	class:MetadataStore
Check	lint	/^  def Check(self, error, filename, linenum):$/;"	m	class:_FunctionState
CheckBraces	lint	/^def CheckBraces(filename, clean_lines, linenum, error):$/;"	f
CheckCStyleCast	lint	/^def CheckCStyleCast(filename, linenum, line, raw_line, cast_type, pattern,$/;"	f
CheckCheck	lint	/^def CheckCheck(filename, clean_lines, linenum, error):$/;"	f
CheckComment	lint	/^def CheckComment(comment, filename, linenum, error):$/;"	f
CheckCost	experimental/dag/appender.cc	/^int Appender::CheckCost(const Sticky *s, $/;"	f	class:Appender
CheckFinished	lint	/^  def CheckFinished(self, filename, error):$/;"	m	class:_ClassState
CheckForFunctionLengths	lint	/^def CheckForFunctionLengths(filename, clean_lines, linenum,$/;"	f
CheckForHeaderGuard	lint	/^def CheckForHeaderGuard(filename, lines, error):$/;"	f
CheckForIncludeWhatYouUse	lint	/^def CheckForIncludeWhatYouUse(filename, clean_lines, include_state, error,$/;"	f
CheckForMultilineCommentsAndStrings	lint	/^def CheckForMultilineCommentsAndStrings(filename, clean_lines, linenum, error):$/;"	f
CheckForNewlineAtEOF	lint	/^def CheckForNewlineAtEOF(filename, lines, error):$/;"	f
CheckForNonStandardConstructs	lint	/^def CheckForNonStandardConstructs(filename, clean_lines, linenum,$/;"	f
CheckForUnicodeReplacementCharacters	lint	/^def CheckForUnicodeReplacementCharacters(filename, lines, error):$/;"	f
CheckIncludeLine	lint	/^def CheckIncludeLine(filename, clean_lines, linenum, include_state, error):$/;"	f
CheckInvalidIncrement	lint	/^def CheckInvalidIncrement(filename, clean_lines, linenum, error):$/;"	f
CheckLanguage	lint	/^def CheckLanguage(filename, clean_lines, linenum, file_extension, include_state,$/;"	f
CheckMakePairUsesDeduction	lint	/^def CheckMakePairUsesDeduction(filename, clean_lines, linenum, error):$/;"	f
CheckNextIncludeOrder	lint	/^  def CheckNextIncludeOrder(self, header_type):$/;"	m	class:_IncludeState
CheckPosixThreading	lint	/^def CheckPosixThreading(filename, clean_lines, linenum, error):$/;"	f
CheckProto	machine/cluster_config.cc	/^void CheckProto(const ClusterConfigProto& config) {$/;"	f
CheckSectionSpacing	lint	/^def CheckSectionSpacing(filename, clean_lines, class_info, linenum, error):$/;"	f
CheckSpacing	lint	/^def CheckSpacing(filename, clean_lines, linenum, error):$/;"	f
CheckSpacingForFunctionCall	lint	/^def CheckSpacingForFunctionCall(filename, line, linenum, error):$/;"	f
CheckString	machine/cluster_config.cc	/^void CheckString(const string& config) {$/;"	f
CheckStyle	lint	/^def CheckStyle(filename, clean_lines, linenum, file_extension, class_state,$/;"	f
CheckTag	experimental/protobuf_reader.h	/^void CheckTag(uint32 tag) {$/;"	f
CheckTag	experimental/protobuf_reader.h	/^void CheckTag<ProtobufReader>(uint32 tag) {$/;"	f
CheckTag	experimental/protobuf_reader.h	/^void CheckTag<Slice>(uint32 tag) {$/;"	f
CheckTag	experimental/protobuf_reader.h	/^void CheckTag<string>(uint32 tag) {$/;"	f
CheckTag	experimental/protobuf_reader.h	/^void CheckTag<uint32>(uint32 tag) {$/;"	f
CleanseComments	lint	/^def CleanseComments(line):$/;"	f
CleansedLines	lint	/^class CleansedLines(object):$/;"	c
ClearActionSource	components/scheduler/scheduler.h	/^  void ClearActionSource() {$/;"	f	class:Scheduler
CloseDataChannel	machine/machine.cc	/^void Machine::CloseDataChannel(const string& channel) {$/;"	f	class:Machine
CloseExpression	lint	/^def CloseExpression(clean_lines, linenum, pos):$/;"	f
ClusterConfig	machine/cluster_config.h	/^  ClusterConfig() {}$/;"	f	class:ClusterConfig
ClusterConfig	machine/cluster_config.h	/^class ClusterConfig {$/;"	c
ClusterManager	machine/cluster_manager.h	/^  ClusterManager(const string& config_file, const string& calvin_path,$/;"	f	class:ClusterManager
ClusterManager	machine/cluster_manager.h	/^class ClusterManager {$/;"	c
ClusterStatus	machine/cluster_manager.cc	/^void ClusterManager::ClusterStatus() {$/;"	f	class:ClusterManager
CompileAssert	btree/btree.h	/^struct CompileAssert {$/;"	s	namespace:btree
ConflictingAppendExperiment	fs/calvinfs_client_app.h	/^  void ConflictingAppendExperiment() {$/;"	f	class:CalvinFSClientApp
Connection	machine/connection/connection.h	/^class Connection {$/;"	c
ConnectionLoopMessageHandler	machine/machine.cc	/^  explicit ConnectionLoopMessageHandler(Machine* machine, ThreadPool* tp)$/;"	f	class:ConnectionLoopMessageHandler
ConnectionLoopMessageHandler	machine/machine.cc	/^class ConnectionLoopMessageHandler : public MessageHandler {$/;"	c	file:
ConnectionZMQ	machine/connection/connection_zmq.cc	/^ConnectionZMQ::ConnectionZMQ($/;"	f	class:ConnectionZMQ
ConnectionZMQ	machine/connection/connection_zmq.h	/^class ConnectionZMQ : public Connection {$/;"	c
ConstTest	btree/btree_test.h	/^void ConstTest() {$/;"	f	namespace:btree
Copy	fs/calvinfs.cc	/^Status LocalCalvinFS::Copy(const string& from_path, const string& to_path) {$/;"	f	class:LocalCalvinFS
Copy	fs/hdfs.cc	/^Status HadoopFS::Copy(const string& from_path, const string& to_path) {$/;"	f	class:HadoopFS
Copy	fs/local_calvinfs.h	/^  virtual Status Copy(const string& from_path, const string& to_path) {$/;"	f	class:LocalFileSystem
Copy	fs/localfs.cc	/^Status LocalFS::Copy(const string& from_path, const string& to_path) {$/;"	f	class:LocalFS
CopyExperiment	fs/calvinfs_client_app.h	/^  void CopyExperiment(int local_percentage) {$/;"	f	class:CalvinFSClientApp
CopyFile	fs/calvinfs_client_app.cc	/^MessageBuffer* CalvinFSClientApp::CopyFile(const Slice& from_path, const Slice& to_path) {$/;"	f	class:CalvinFSClientApp
Copy_Internal	fs/metadata_store.cc	/^void MetadataStore::Copy_Internal($/;"	f	class:MetadataStore
Count	lint	/^  def Count(self):$/;"	m	class:_FunctionState
CrashExperiment	fs/calvinfs_client_app.h	/^  void CrashExperiment() {$/;"	f	class:CalvinFSClientApp
CrashExperimentSetup	fs/calvinfs_client_app.h	/^  void CrashExperimentSetup() {$/;"	f	class:CalvinFSClientApp
CreateDirectory	fs/calvinfs.cc	/^Status LocalCalvinFS::CreateDirectory(const string& path) {$/;"	f	class:LocalCalvinFS
CreateDirectory	fs/hdfs.cc	/^Status HadoopFS::CreateDirectory(const string& path) {$/;"	f	class:HadoopFS
CreateDirectory	fs/local_calvinfs.h	/^  virtual Status CreateDirectory(const string& path) {$/;"	f	class:LocalFileSystem
CreateDirectory	fs/localfs.cc	/^Status LocalFS::CreateDirectory(const string& path) {$/;"	f	class:LocalFS
CreateDirsAndFiles	fs/fs_test.cc	/^  void CreateDirsAndFiles() {$/;"	f	class:FSTest
CreateElement	db/materialization_test.cc	/^  virtual Action* CreateElement(int i) {$/;"	f	class:MicroSource
CreateElement	db/materialization_test.cc	/^  virtual Action* CreateElement(int i) {$/;"	f	class:NewOrderSource
CreateFile	fs/calvinfs.cc	/^Status LocalCalvinFS::CreateFile(const string& path) {$/;"	f	class:LocalCalvinFS
CreateFile	fs/calvinfs_client_app.cc	/^MessageBuffer* CalvinFSClientApp::CreateFile(const Slice& path, FileType type) {$/;"	f	class:CalvinFSClientApp
CreateFile	fs/hdfs.cc	/^Status HadoopFS::CreateFile(const string& path) {$/;"	f	class:HadoopFS
CreateFile	fs/local_calvinfs.h	/^  virtual Status CreateFile(const string& path) {$/;"	f	class:LocalFileSystem
CreateFile	fs/localfs.cc	/^Status LocalFS::CreateFile(const string& path) {$/;"	f	class:LocalFS
CreateFile_Internal	fs/metadata_store.cc	/^void MetadataStore::CreateFile_Internal($/;"	f	class:MetadataStore
CreateNonEmptyFile	fs/fs_test.cc	/^  void CreateNonEmptyFile() {$/;"	f	class:FSTest
Cs	components/scheduler/vll_scheduler.h	/^  vector<int> Cs;$/;"	m	class:VLLScheduler
Cx	components/scheduler/vll_scheduler.h	/^  vector<int> Cx;$/;"	m	class:VLLScheduler
DEBUG	Makefile	/^DEBUG := -g2                    # (B) Debug mode, w\/ line-level debug symbols$/;"	m
DataChannel	machine/machine.cc	/^AtomicQueue<MessageBuffer*>* Machine::DataChannel(const string& channel) {$/;"	f	class:Machine
DeadlockFreedomMessageHandler	machine/thread_pool/thread_pool_test.cc	/^  DeadlockFreedomMessageHandler() : counter_(0) {$/;"	f	class:DeadlockFreedomMessageHandler
DeadlockFreedomMessageHandler	machine/thread_pool/thread_pool_test.cc	/^class DeadlockFreedomMessageHandler : public MessageHandler {$/;"	c	file:
DelayQueue	common/atomic.h	/^  DelayQueue() : delay_(0) {}$/;"	f	class:DelayQueue
DelayQueue	common/atomic.h	/^  explicit DelayQueue(double delay) : delay_(delay) {}$/;"	f	class:DelayQueue
DelayQueue	common/atomic.h	/^class DelayQueue {$/;"	c
Delete	components/store/btreestore.cc	/^void BTreeStore::Delete(const string& key) {$/;"	f	class:BTreeStore
Delete	components/store/hybrid_versioned_kvstore.cc	/^void HybridVersionedKVStore::Delete(const string& key, uint64 version) {$/;"	f	class:HybridVersionedKVStore
Delete	components/store/leveldbstore.cc	/^void LevelDBStore::Delete(const string& key) {$/;"	f	class:LevelDBStore
Delete	components/store/versioned_kvstore.cc	/^void VersionedKVStore::Delete(const string& key, uint64 version) {$/;"	f	class:VersionedKVStore
DeleteEntry	fs/metadata_store.cc	/^  void DeleteEntry(const string& path) {$/;"	f	class:ExecutionContext
DeleteMessagePart	machine/connection/connection_zmq.cc	/^void DeleteMessagePart(void *data, void *hint) {$/;"	f
DeployCluster	machine/cluster_manager.cc	/^void ClusterManager::DeployCluster(double time, int experiment, int clients, int max_active, int max_running, int local_percentage) {$/;"	f	class:ClusterManager
DirectoryOfThisScript	.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
DistributedBlockStoreApp	fs/block_store.cc	/^DistributedBlockStoreApp::DistributedBlockStoreApp(BlockStore* blocks) {$/;"	f	class:DistributedBlockStoreApp
DistributedBlockStoreApp	fs/block_store.h	/^class DistributedBlockStoreApp : public BlockStoreApp {$/;"	c
DistributedExecutionContext	fs/metadata_store.cc	/^  DistributedExecutionContext($/;"	f	class:DistributedExecutionContext
DistributedExecutionContext	fs/metadata_store.cc	/^class DistributedExecutionContext : public ExecutionContext {$/;"	c	file:
DoTest	btree/btree_test.h	/^void DoTest(const char *name, T *b, const std::vector<V> &values) {$/;"	f	namespace:btree
DoubleToString	common/utils.cc	/^string DoubleToString(double n) {$/;"	f
Dump	machine/app/reporter.h	/^  void Dump() {$/;"	f	class:Reporter
EXCLUSIVE	components/scheduler/lock_manager.h	/^    EXCLUSIVE = 1,$/;"	e	enum:LockManager::LockMode
EXPECT_NO_RECORD	components/store/hybrid_versioned_kvstore_test.cc	/^#define EXPECT_NO_RECORD(/;"	d	file:
EXPECT_NO_RECORD	components/store/versioned_kvstore_test.cc	/^#define EXPECT_NO_RECORD(/;"	d	file:
EXPECT_RECORD	components/store/hybrid_versioned_kvstore_test.cc	/^#define EXPECT_RECORD(/;"	d	file:
EXPECT_RECORD	components/store/versioned_kvstore_test.cc	/^#define EXPECT_RECORD(/;"	d	file:
EXTDIR	Makefile	/^EXTDIR := ..\/ext$/;"	m
Empty	common/atomic.h	/^  inline bool Empty() {$/;"	f	class:AtomicQueue
EmptySource	common/source.h	/^class EmptySource : public Source<T> {$/;"	c
EncodeBlockID	fs/block_store.cc	/^void EncodeBlockID(uint64 block_id, string* path) {$/;"	f
End	lint	/^  def End(self):$/;"	m	class:_FunctionState
Entry	components/log/local_mem_log.cc	/^Slice LocalMemLogReader::Entry() {$/;"	f	class:LocalMemLogReader
Entry	components/log/local_mem_log.h	/^    Entry() : version(0), entry(NULL) {}$/;"	f	struct:LocalMemLog::Entry
Entry	components/log/local_mem_log.h	/^    Entry(uint64 v, const Slice& e)$/;"	f	struct:LocalMemLog::Entry
Entry	components/log/local_mem_log.h	/^  struct Entry {$/;"	s	class:LocalMemLog
EntryExists	fs/metadata_store.cc	/^  bool EntryExists(const string& path) {$/;"	f	class:ExecutionContext
Erase	common/atomic.h	/^  inline void Erase(const K& k) {$/;"	f	class:AtomicMap
EraseAndPut	common/atomic.h	/^  inline void EraseAndPut(const K& k, const V& v) {$/;"	f	class:AtomicMap
Erase_Internal	fs/metadata_store.cc	/^void MetadataStore::Erase_Internal($/;"	f	class:MetadataStore
Error	fs/status.h	/^  static Status Error(const string& error, uint64 version = 0) {$/;"	f	class:Status
Error	lint	/^def Error(filename, linenum, category, confidence, message):$/;"	f
Execute	components/store/microbenchmark_store.cc	/^void MicrobenchmarkStore::Execute(const MicrobenchmarkAction::ExecuteInput& in) {$/;"	f	class:MicrobenchmarkStore
ExecutionContext	fs/metadata_store.cc	/^  ExecutionContext() {}$/;"	f	class:ExecutionContext
ExecutionContext	fs/metadata_store.cc	/^  ExecutionContext(VersionedKVStore* store, Action* action)$/;"	f	class:ExecutionContext
ExecutionContext	fs/metadata_store.cc	/^class ExecutionContext {$/;"	c	file:
Exists	components/store/btreestore.cc	/^bool BTreeStore::Exists(const string& key) {$/;"	f	class:BTreeStore
Exists	components/store/hybrid_versioned_kvstore.cc	/^bool HybridVersionedKVStore::Exists(const string& key, uint64 version) {$/;"	f	class:HybridVersionedKVStore
Exists	components/store/leveldbstore.cc	/^bool LevelDBStore::Exists(const string& key) {$/;"	f	class:LevelDBStore
Exists	components/store/versioned_kvstore.cc	/^bool VersionedKVStore::Exists(const string& key, uint64 version) {$/;"	f	class:VersionedKVStore
Exists	fs/block_store.cc	/^bool BlockStoreApp::Exists(uint64 block_id) {$/;"	f	class:BlockStoreApp
Exists	fs/block_store.cc	/^bool DistributedBlockStoreApp::Exists(uint64 block_id) {$/;"	f	class:DistributedBlockStoreApp
Exists	fs/block_store.cc	/^bool HybridBlockStore::Exists(uint64 block_id) {$/;"	f	class:HybridBlockStore
Exists	fs/block_store.cc	/^bool LevelDBBlockStore::Exists(uint64 block_id) {$/;"	f	class:LevelDBBlockStore
Exists	fs/block_store.cc	/^bool LocalFileBlockStore::Exists(uint64 block_id) {$/;"	f	class:LocalFileBlockStore
Extension	lint	/^  def Extension(self):$/;"	m	class:FileInfo
ExternalConnection	machine/external_connection.cc	/^ExternalConnection::ExternalConnection(int port, const ClusterConfig& config) {$/;"	f	class:ExternalConnection
ExternalConnection	machine/external_connection.h	/^class ExternalConnection {$/;"	c
ExternalDeleteMessagePart	machine/external_connection.cc	/^void ExternalDeleteMessagePart(void *data, void *hint) {$/;"	f
ExternalGetZMQContext	machine/external_connection.cc	/^zmq::context_t* ExternalGetZMQContext() {$/;"	f
FNVHash	common/utils.cc	/^uint32 FNVHash(const Slice& key) {$/;"	f
FNVModHash	common/utils.cc	/^uint32 FNVModHash(const Slice& key) {$/;"	f
FS	fs/fs.h	/^class FS {$/;"	c
FSTest	fs/fs_test.cc	/^  explicit FSTest(FS* fs) : fs_(fs) {}$/;"	f	class:FSTest
FSTest	fs/fs_test.cc	/^class FSTest {$/;"	c	file:
FS_TEST	fs/fs_test.cc	/^#define FS_TEST(/;"	d	file:
FakePaxosApp	components/log/paxos.cc	/^FakePaxosApp::FakePaxosApp(Log* log, const vector<uint64>& participants)$/;"	f	class:FakePaxosApp
FakePaxosApp	components/log/paxos.cc	/^FakePaxosApp::FakePaxosApp(Log* log, uint64 count)$/;"	f	class:FakePaxosApp
FakePaxosApp	components/log/paxos.h	/^class FakePaxosApp : public LogApp {$/;"	c
FakePaxosTest	components/log/paxos_test.cc	/^  FakePaxosTest() {$/;"	f	class:FakePaxosTest
FakePaxosTest	components/log/paxos_test.cc	/^class FakePaxosTest {$/;"	c	file:
FileHandle	fs/fs.h	/^class FileHandle {$/;"	c
FileInfo	lint	/^class FileInfo:$/;"	c
FileName	fs/metadata_store.cc	/^string FileName(const string& path) {$/;"	f
FilesBelongToSameModule	lint	/^def FilesBelongToSameModule(filename_cc, filename_h):$/;"	f
FillExperiment	fs/calvinfs_client_app.h	/^  void FillExperiment() {$/;"	f	class:CalvinFSClientApp
FindNextMultiLineCommentEnd	lint	/^def FindNextMultiLineCommentEnd(lines, lineix):$/;"	f
FindNextMultiLineCommentStart	lint	/^def FindNextMultiLineCommentStart(lines, lineix):$/;"	f
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f
FloatToString	common/utils.cc	/^string FloatToString(float n) {$/;"	f
FromFile	machine/cluster_config.cc	/^void ClusterConfig::FromFile(const string& filename) {$/;"	f	class:ClusterConfig
FromProto	machine/cluster_config.cc	/^void ClusterConfig::FromProto(const ClusterConfigProto& config) {$/;"	f	class:ClusterConfig
FromScalar	common/utils.cc	/^T FromScalar(const Scalar& s) {$/;"	f
FromScalar	common/utils.cc	/^bool FromScalar<bool>(const Scalar& s) {$/;"	f
FromScalar	common/utils.cc	/^double FromScalar<double>(const Scalar& s) {$/;"	f
FromScalar	common/utils.cc	/^float FromScalar<float>(const Scalar& s) {$/;"	f
FromScalar	common/utils.cc	/^int32 FromScalar<int32>(const Scalar& s) {$/;"	f
FromScalar	common/utils.cc	/^int64 FromScalar<int64>(const Scalar& s) {$/;"	f
FromScalar	common/utils.cc	/^string FromScalar<string>(const Scalar& s) {$/;"	f
FromScalar	common/utils.cc	/^uint32 FromScalar<uint32>(const Scalar& s) {$/;"	f
FromScalar	common/utils.cc	/^uint64 FromScalar<uint64>(const Scalar& s) {$/;"	f
FromString	machine/cluster_config.cc	/^void ClusterConfig::FromString(const string& config) {$/;"	f	class:ClusterConfig
Front	common/atomic.h	/^  inline bool Front(T* result) {$/;"	f	class:AtomicQueue
FullName	lint	/^  def FullName(self):$/;"	m	class:FileInfo
GFLAGS	Makefile	/^GFLAGS  := $(EXTDIR)\/gflags$/;"	m
GLOG	Makefile	/^GLOG    := $(EXTDIR)\/glog$/;"	m
GPERF	Makefile	/^GPERF   := $(EXTDIR)\/gperftools$/;"	m
GTEST	Makefile	/^GTEST   := $(EXTDIR)\/gtest$/;"	m
GenerateDigits	btree/btree_test.h	/^char* GenerateDigits(char buf[16], int val, int maxval) {$/;"	f	namespace:btree
GenerateNumbers	btree/btree_test.h	/^const std::vector<int>& GenerateNumbers(int n, int maxval) {$/;"	f	namespace:btree
GenerateValues	btree/btree_test.h	/^std::vector<V> GenerateValues(int n) {$/;"	f	namespace:btree
Generator	btree/btree_test.h	/^  Generator(int m)$/;"	f	struct:btree::Generator
Generator	btree/btree_test.h	/^struct Generator {$/;"	s	namespace:btree
Generator	btree/btree_test.h	/^struct Generator<std::pair<T, U> > {$/;"	s	namespace:btree
Generator	btree/btree_test.h	/^struct Generator<std::string> {$/;"	s	namespace:btree
Get	common/source.h	/^  virtual bool Get(T* t) { return false; }$/;"	f	class:EmptySource
Get	common/source.h	/^  virtual bool Get(T* t) {$/;"	f	class:LimitSource
Get	common/source.h	/^  virtual bool Get(T* t) {$/;"	f	class:QueueSource
Get	common/source.h	/^  virtual bool Get(T* t) {$/;"	f	class:ThrottleSource
Get	components/log/log_app.cc	/^bool RemoteLogSource<T>::Get(T** t) {$/;"	f	class:RemoteLogSource
Get	components/log/log_source.h	/^  virtual bool Get(T** t) {$/;"	f	class:LogSource
Get	components/store/btreestore.cc	/^bool BTreeStore::Get(const string& key, string* value) {$/;"	f	class:BTreeStore
Get	components/store/hybrid_versioned_kvstore.cc	/^bool HybridVersionedKVStore::Get($/;"	f	class:HybridVersionedKVStore
Get	components/store/leveldbstore.cc	/^bool LevelDBStore::Get(const string& key, string* value) {$/;"	f	class:LevelDBStore
Get	components/store/versioned_kvstore.cc	/^bool VersionedKVStore::Get($/;"	f	class:VersionedKVStore
Get	db/materialization_test.cc	/^  virtual bool Get(Action** a) {$/;"	f	class:PreparedSource
Get	experimental/lazy_store.h	/^  inline bool Get(const string& key, uint64 version, string* value) {$/;"	f	class:components::LazyStore
Get	fs/block_log.h	/^    virtual bool Get(Action** a) {$/;"	f	class:BlockLogApp::ActionSource
Get	fs/block_log.h	/^  virtual bool Get(UInt64Pair** p) {$/;"	f	class:SequenceSource
Get	fs/block_store.cc	/^bool BlockStoreApp::Get(uint64 block_id, string* data) {$/;"	f	class:BlockStoreApp
Get	fs/block_store.cc	/^bool DistributedBlockStoreApp::Get(uint64 block_id, string* data) {$/;"	f	class:DistributedBlockStoreApp
Get	fs/block_store.cc	/^bool HybridBlockStore::Get(uint64 block_id, string* data) {$/;"	f	class:HybridBlockStore
Get	fs/block_store.cc	/^bool LevelDBBlockStore::Get(uint64 block_id, string* data) {$/;"	f	class:LevelDBBlockStore
Get	fs/block_store.cc	/^bool LocalFileBlockStore::Get(uint64 block_id, string* data) {$/;"	f	class:LocalFileBlockStore
GetActionSource	fs/block_log.h	/^  Source<Action*>* GetActionSource() {$/;"	f	class:BlockLogApp
GetApp	machine/machine.cc	/^App* Machine::GetApp(const string& name) {$/;"	f	class:Machine
GetApps	machine/machine.cc	/^map<string, App*> Machine::GetApps() {$/;"	f	class:Machine
GetByte	components/store/versioned_kvstore.cc	/^unsigned char GetByte(uint64 x, uint32 k) {$/;"	f
GetCompilationInfoForFile	.ycm_extra_conf.py	/^def GetCompilationInfoForFile( filename ):$/;"	f
GetConfig	machine/cluster_manager.cc	/^const ClusterConfig& ClusterManager::GetConfig() {$/;"	f	class:ClusterManager
GetEntry	fs/metadata_store.cc	/^  bool GetEntry(const string& path, MetadataEntry* entry) {$/;"	f	class:ExecutionContext
GetFinshTime	machine/thread_pool/thread_pool_test.cc	/^  double GetFinshTime(int index) {$/;"	f	class:TestLatencyHandler
GetGUID	machine/machine.h	/^  uint64 GetGUID() {$/;"	f	class:Machine
GetHeadMachine	components/store/btreestore.cc	/^uint64 BTreeStore::GetHeadMachine(uint64 machine_id) {$/;"	f	class:BTreeStore
GetHeadMachine	components/store/hybrid_versioned_kvstore.cc	/^uint64 HybridVersionedKVStore::GetHeadMachine(uint64 machine_id) {$/;"	f	class:HybridVersionedKVStore
GetHeadMachine	components/store/kvstore.cc	/^uint64 KVStore::GetHeadMachine(uint64 machine_id) {$/;"	f	class:KVStore
GetHeadMachine	components/store/leveldbstore.cc	/^uint64 LevelDBStore::GetHeadMachine(uint64 machine_id) {$/;"	f	class:LevelDBStore
GetHeadMachine	components/store/microbenchmark_store.cc	/^uint64 MicrobenchmarkStore::GetHeadMachine(uint64 machine_id) {$/;"	f	class:MicrobenchmarkStore
GetHeadMachine	components/store/store_app.cc	/^uint64 StoreApp::GetHeadMachine(uint64 machine_id) {$/;"	f	class:StoreApp
GetHeadMachine	components/store/tpcc_store.cc	/^uint64 TpccStore::GetHeadMachine(uint64 machine_id) {$/;"	f	class:TpccStore
GetHeadMachine	components/store/versioned_kvstore.cc	/^uint64 VersionedKVStore::GetHeadMachine(uint64 machine_id) {$/;"	f	class:VersionedKVStore
GetHeadMachine	fs/metadata_store.cc	/^uint64 MetadataStore::GetHeadMachine(uint64 machine_id) {$/;"	f	class:MetadataStore
GetHeaderGuardCPPVariable	lint	/^def GetHeaderGuardCPPVariable(filename):$/;"	f
GetIterator	components/store/btreestore.cc	/^KVStore::Iterator* BTreeStore::GetIterator() {$/;"	f	class:BTreeStore
GetIterator	components/store/leveldbstore.cc	/^KVStore::Iterator* LevelDBStore::GetIterator() {$/;"	f	class:LevelDBStore
GetLineWidth	lint	/^def GetLineWidth(line):$/;"	f
GetMachineForReplica	fs/metadata_store.cc	/^uint32 MetadataStore::GetMachineForReplica(Action* action) {$/;"	f	class:MetadataStore
GetMany	components/store/hybrid_versioned_kvstore_test.cc	/^  void GetMany() {$/;"	f	class:HybridVersionedKVStoreTest
GetMany	components/store/versioned_kvstore_test.cc	/^  void GetMany() {$/;"	f	class:VersionedKVStoreTest
GetManyAgain	components/store/hybrid_versioned_kvstore_test.cc	/^  void GetManyAgain() {$/;"	f	class:HybridVersionedKVStoreTest
GetMessage	machine/external_connection.cc	/^void ExternalConnection::GetMessage(Header** h, MessageBuffer** m) {$/;"	f	class:ExternalConnection
GetMetadataEntry	fs/calvinfs_client_app.cc	/^MessageBuffer* CalvinFSClientApp::GetMetadataEntry(const Slice& path) {$/;"	f	class:CalvinFSClientApp
GetOwner	experimental/lazy_store.h	/^  inline uint64 GetOwner(const string& key) {$/;"	f	class:components::LazyStore
GetParentPath	fs/local_calvinfs.h	/^string GetParentPath(const string& path) {$/;"	f
GetPart	machine/message_buffer.h	/^  inline const MessagePart& GetPart(uint32 i) const {$/;"	f	class:MessageBuffer
GetPartitionsPerReplica	fs/calvinfs.cc	/^uint64 CalvinFSConfigMap::GetPartitionsPerReplica () {$/;"	f	class:CalvinFSConfigMap
GetPermissions	fs/fs.h	/^  virtual Status GetPermissions($/;"	f	class:FS
GetPermissions	fs/local_calvinfs.h	/^  virtual Status GetPermissions($/;"	f	class:LocalFileSystem
GetPermissions	fs/local_calvinfs.h	/^  virtual Status GetPermissions(uint64* owner, uint64* group, string* mode) {$/;"	f	class:LocalFileHandle
GetPreviousNonBlankLine	lint	/^def GetPreviousNonBlankLine(clean_lines, linenum):$/;"	f
GetRWSets	components/store/hybrid_versioned_kvstore.cc	/^void HybridVersionedKVStore::GetRWSets(Action* action) {$/;"	f	class:HybridVersionedKVStore
GetRWSets	components/store/kvstore.cc	/^void KVStore::GetRWSets(Action* action) {$/;"	f	class:KVStore
GetRWSets	components/store/microbenchmark_store.cc	/^void MicrobenchmarkStore::GetRWSets(Action* action) {$/;"	f	class:MicrobenchmarkStore
GetRWSets	components/store/store_app.cc	/^void StoreApp::GetRWSets(Action* action) {$/;"	f	class:StoreApp
GetRWSets	components/store/tpcc_store.cc	/^void TpccStore::GetRWSets(Action* action) {$/;"	f	class:TpccStore
GetRWSets	components/store/versioned_kvstore.cc	/^void VersionedKVStore::GetRWSets(Action* action) {$/;"	f	class:VersionedKVStore
GetRWSets	fs/metadata_store.cc	/^void MetadataStore::GetRWSets(Action* action) {$/;"	f	class:MetadataStore
GetRandomString	experimental/protobuf_reader_test.cc	/^string GetRandomString(int size) {$/;"	f
GetReader	components/log/local_mem_log.cc	/^typename Log::Reader* LocalMemLog::GetReader() {$/;"	f	class:LocalMemLog
GetReader	components/log/log_app.h	/^  virtual Log::Reader* GetReader() {$/;"	f	class:LogApp
GetRemoteSequence	components/log/paxos2.cc	/^void Paxos2App::GetRemoteSequence(MessageBuffer** result) {$/;"	f	class:Paxos2App
GetRemoteSource	components/log/log_app_test.cc	/^  RemoteLogSource<T>* GetRemoteSource() {$/;"	f	class:LogAppTest
GetRemoteSource	components/log/paxos2_test.cc	/^  RemoteLogSource<T>* GetRemoteSource(uint64 i, uint64 j) {$/;"	f	class:Paxos2Test
GetRemoteSource	components/log/paxos_test.cc	/^  RemoteLogSource<T>* GetRemoteSource(uint64 i, uint64 j) {$/;"	f	class:FakePaxosTest
GetReplicas	fs/calvinfs.cc	/^uint64 CalvinFSConfigMap::GetReplicas () {$/;"	f	class:CalvinFSConfigMap
GetReport	machine/app/app.h	/^  virtual Report* GetReport() {$/;"	f	class:App
GetState	machine/app/app.cc	/^SAState* GetState() {$/;"	f
GetStatus	fs/localfs.cc	/^Status LocalFS::GetStatus(const leveldb::Status& s) {$/;"	f	class:LocalFS
GetTempFiles	machine/cluster_manager.cc	/^void ClusterManager::GetTempFiles(const string& base) {$/;"	f	class:ClusterManager
GetTime	common/utils.cc	/^double GetTime() {$/;"	f
GetVersion	components/store/hybrid_versioned_kvstore.cc	/^bool HybridVersionedKVStore::GetVersion($/;"	f	class:HybridVersionedKVStore
GetVersion	components/store/versioned_kvstore.cc	/^bool VersionedKVStore::GetVersion($/;"	f	class:VersionedKVStore
GetZMQContext	machine/connection/connection_zmq.cc	/^zmq::context_t* GetZMQContext() {$/;"	f
GlobalBarrier	machine/machine.cc	/^void Machine::GlobalBarrier() {$/;"	f	class:Machine
HadoopFS	fs/hdfs.h	/^class HadoopFS : public FS {$/;"	c
HandleMessage	components/log/log_app.h	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:LogApp
HandleMessage	components/scheduler/lazy_scheduler.h	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {}$/;"	f	class:LazyScheduler
HandleMessage	components/scheduler/scheduler.h	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:Scheduler
HandleMessage	components/store/store_app.cc	/^void StoreApp::HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:StoreApp
HandleMessage	db/client.h	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {}$/;"	f	class:MicroClient
HandleMessage	fs/block_log.h	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:BlockLogApp
HandleMessage	fs/block_store.cc	/^void BlockStoreApp::HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:BlockStoreApp
HandleMessage	fs/block_store.cc	/^void DistributedBlockStoreApp::HandleMessage($/;"	f	class:DistributedBlockStoreApp
HandleMessage	fs/calvinfs_client_app.h	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:CalvinFSClientApp
HandleMessage	machine/app/app_test.cc	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:TestApp
HandleMessage	machine/app/reporter.h	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:Reporter
HandleMessage	machine/app/testapp.cc	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:TestAddApp
HandleMessage	machine/machine.cc	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:ConnectionLoopMessageHandler
HandleMessage	machine/machine.cc	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:WorkerThreadMessageHandler
HandleMessage	machine/machine_test.cc	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:SynchronousNoop
HandleMessage	machine/thread_pool/thread_pool.cc	/^void SubPool::HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:SubPool
HandleMessage	machine/thread_pool/thread_pool.cc	/^void ThreadPool::HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:ThreadPool
HandleMessage	machine/thread_pool/thread_pool_test.cc	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:BenchmarkMessageHandler
HandleMessage	machine/thread_pool/thread_pool_test.cc	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:DeadlockFreedomMessageHandler
HandleMessage	machine/thread_pool/thread_pool_test.cc	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:TestLatencyHandler
HandleMessage	machine/thread_pool/thread_pool_test.cc	/^  virtual void HandleMessage(Header* header, MessageBuffer* message) {$/;"	f	class:TestMessageHandler
HandleMessageBase	components/store/store_app.cc	/^void StoreApp::HandleMessageBase(Header* header, MessageBuffer* message) {$/;"	f	class:StoreApp
HandleOtherMessages	components/log/log_app.h	/^  virtual void HandleOtherMessages(Header* header, MessageBuffer* message) {$/;"	f	class:LogApp
HandleOtherMessages	components/log/paxos2.cc	/^void Paxos2App::HandleOtherMessages(Header* header, MessageBuffer* message) {$/;"	f	class:Paxos2App
HandleRemoteReaderMessage	components/log/log_app.cc	/^bool LogApp::HandleRemoteReaderMessage(Header* header, MessageBuffer* message) {$/;"	f	class:LogApp
HashBlockID	fs/calvinfs.cc	/^uint64 CalvinFSConfigMap::HashBlockID(uint64 block_id) {$/;"	f	class:CalvinFSConfigMap
HashFileName	fs/calvinfs.cc	/^uint64 CalvinFSConfigMap::HashFileName(const Slice& filename) {$/;"	f	class:CalvinFSConfigMap
HighWaterMark	components/scheduler/locking_scheduler.h	/^  virtual uint64 HighWaterMark() {$/;"	f	class:LockingScheduler
HighWaterMark	components/scheduler/serial_scheduler.h	/^  virtual uint64 HighWaterMark() {$/;"	f	class:SerialScheduler
HighWaterMark	components/scheduler/vll_scheduler.h	/^  virtual uint64 HighWaterMark() {$/;"	f	class:VLLScheduler
HostName	scripts/script_utils.cc	/^string HostName() {$/;"	f
HybridBlockStore	fs/block_store.h	/^  HybridBlockStore() {}$/;"	f	class:HybridBlockStore
HybridBlockStore	fs/block_store.h	/^class HybridBlockStore : public BlockStore {$/;"	c
HybridVersionedKVStore	components/store/hybrid_versioned_kvstore.cc	/^HybridVersionedKVStore::HybridVersionedKVStore() {$/;"	f	class:HybridVersionedKVStore
HybridVersionedKVStore	components/store/hybrid_versioned_kvstore.h	/^class HybridVersionedKVStore : public VersionedKVStore {$/;"	c
HybridVersionedKVStoreTest	components/store/hybrid_versioned_kvstore_test.cc	/^  HybridVersionedKVStoreTest() : store_(new HybridVersionedKVStore()) {}$/;"	f	class:HybridVersionedKVStoreTest
HybridVersionedKVStoreTest	components/store/hybrid_versioned_kvstore_test.cc	/^class HybridVersionedKVStoreTest {$/;"	c	file:
Idle_thread_count	machine/thread_pool/thread_pool.cc	/^int SubPool::Idle_thread_count() {$/;"	f	class:SubPool
IncrementErrorCount	lint	/^  def IncrementErrorCount(self, category):$/;"	m	class:_CppLintState
Init	components/log/log_app.cc	/^void RemoteLogSource<T>::Init() {$/;"	f	class:RemoteLogSource
Init	fs/calvinfs.cc	/^void CalvinFSConfigMap::Init(const CalvinFSConfig& config) {$/;"	f	class:CalvinFSConfigMap
Init	fs/metadata_store.cc	/^void MetadataStore::Init() {$/;"	f	class:MetadataStore
Init	machine/connection/connection_zmq.cc	/^void ConnectionZMQ::Init() {$/;"	f	class:ConnectionZMQ
Init	machine/external_connection.cc	/^void ExternalConnection::Init() {$/;"	f	class:ExternalConnection
InitSmall	fs/metadata_store.cc	/^void MetadataStore::InitSmall() {$/;"	f	class:MetadataStore
InitializeComponents	machine/machine.cc	/^void Machine::InitializeComponents() {$/;"	f	class:Machine
Int32ToString	common/utils.cc	/^string Int32ToString(int32 n) {$/;"	f
Int64ToString	common/utils.cc	/^string Int64ToString(int64 n) {$/;"	f
IntToString	common/utils.h	/^inline string IntToString(int n) { return Int32ToString(n); }$/;"	f
IsBlankLine	lint	/^def IsBlankLine(line):$/;"	f
IsCppString	lint	/^def IsCppString(line):$/;"	f
IsErrorSuppressedByNolint	lint	/^def IsErrorSuppressedByNolint(category, linenum):$/;"	f
IsHeaderFile	.ycm_extra_conf.py	/^def IsHeaderFile( filename ):$/;"	f
IsInAlphabeticalOrder	lint	/^  def IsInAlphabeticalOrder(self, header_path):$/;"	m	class:_IncludeState
IsLeader	components/log/paxos2.cc	/^bool Paxos2App::IsLeader() {$/;"	f	class:Paxos2App
IsLocal	components/store/btreestore.cc	/^bool BTreeStore::IsLocal(const string& path) {$/;"	f	class:BTreeStore
IsLocal	components/store/hybrid_versioned_kvstore.cc	/^bool HybridVersionedKVStore::IsLocal(const string& path) {$/;"	f	class:HybridVersionedKVStore
IsLocal	components/store/kvstore.cc	/^bool KVStore::IsLocal(const string& path) {$/;"	f	class:KVStore
IsLocal	components/store/leveldbstore.cc	/^bool LevelDBStore::IsLocal(const string& path) {$/;"	f	class:LevelDBStore
IsLocal	components/store/microbenchmark_store.cc	/^bool MicrobenchmarkStore::IsLocal(const string& path) {$/;"	f	class:MicrobenchmarkStore
IsLocal	components/store/store_app.cc	/^bool StoreApp::IsLocal(const string& path) {$/;"	f	class:StoreApp
IsLocal	components/store/tpcc_store.cc	/^bool TpccStore::IsLocal(const string& path) {$/;"	f	class:TpccStore
IsLocal	components/store/versioned_kvstore.cc	/^bool VersionedKVStore::IsLocal(const string& path) {$/;"	f	class:VersionedKVStore
IsLocal	fs/block_store.cc	/^bool DistributedBlockStoreApp::IsLocal(uint64 block_id) {$/;"	f	class:DistributedBlockStoreApp
IsLocal	fs/metadata_store.cc	/^bool MetadataStore::IsLocal(const string& path) {$/;"	f	class:MetadataStore
IsSource	lint	/^  def IsSource(self):$/;"	m	class:FileInfo
IsWriter	fs/metadata_store.cc	/^  bool IsWriter() {$/;"	f	class:ExecutionContext
Iterator	components/store/kvstore.h	/^  class Iterator {$/;"	c	class:KVStore
KVStore	components/store/kvstore.h	/^class KVStore : public Store {$/;"	c
Key	components/store/btreestore.cc	/^  virtual const string& Key() {$/;"	f	class:BTreeIterator
Key	components/store/leveldbstore.cc	/^  virtual const string& Key() {$/;"	f	class:LevelDBStoreIterator
KeyOfValue	btree/btree_test.h	/^struct KeyOfValue {$/;"	s	namespace:btree
KeyOfValue	btree/btree_test.h	/^struct KeyOfValue<K, K> {$/;"	s	namespace:btree
KillCluster	machine/cluster_manager.cc	/^void ClusterManager::KillCluster() {$/;"	f	class:ClusterManager
KillReplica	machine/cluster_manager.h	/^  void KillReplica(int replica_id) {}$/;"	f	class:ClusterManager
LDFLAGS	Makefile	/^LDFLAGS := -lgtest -L$(GTEST)\/mybuild \\$/;"	m
LDLIBRARYPATH	Makefile	/^LDLIBRARYPATH := LD_LIBRARY_PATH=$(ZEROMQ)\/src\/.libs:$(PROTOB)\/src\/.libs:$(GTEST)\/mybuild:$(GLOG)\/.libs:$(LEVELDB):$(GPERF)\/.libs:$(GFLAGS)\/.libs$/;"	m
LEVELDB	Makefile	/^LEVELDB := $(EXTDIR)\/leveldb$/;"	m
LOGDIR	Makefile	/^LOGDIR := ..\/logs$/;"	m
LS	fs/calvinfs.cc	/^Status LocalCalvinFS::LS(const string& path, vector<string>* contents) {$/;"	f	class:LocalCalvinFS
LS	fs/calvinfs_client_app.cc	/^MessageBuffer* CalvinFSClientApp::LS(const Slice& path) {$/;"	f	class:CalvinFSClientApp
LS	fs/hdfs.cc	/^Status HadoopFS::LS(const string& path, vector<string>* contents) {$/;"	f	class:HadoopFS
LS	fs/local_calvinfs.h	/^  virtual Status LS(const string& path, vector<string>* contents) {$/;"	f	class:LocalFileSystem
LS	fs/localfs.cc	/^Status LocalFS::LS(const string& path, vector<string>* contents) {$/;"	f	class:LocalFS
LastVersion	components/log/local_mem_log.cc	/^uint64 LocalMemLog::LastVersion() {$/;"	f	class:LocalMemLog
LatencyExperimentAppend	fs/calvinfs_client_app.h	/^void LatencyExperimentAppend() {$/;"	f	class:CalvinFSClientApp
LatencyExperimentCreateFile	fs/calvinfs_client_app.h	/^void LatencyExperimentCreateFile() {$/;"	f	class:CalvinFSClientApp
LatencyExperimentMix	fs/calvinfs_client_app.h	/^  void LatencyExperimentMix() {$/;"	f	class:CalvinFSClientApp
LatencyExperimentReadFile	fs/calvinfs_client_app.h	/^  void LatencyExperimentReadFile() {$/;"	f	class:CalvinFSClientApp
LatencyExperimentRenameFile	fs/calvinfs_client_app.h	/^void LatencyExperimentRenameFile(int local_percentage) {$/;"	f	class:CalvinFSClientApp
LatencyExperimentSetup	fs/calvinfs_client_app.h	/^  void LatencyExperimentSetup() {$/;"	f	class:CalvinFSClientApp
LazyScheduler	components/scheduler/lazy_scheduler.h	/^  LazyScheduler()$/;"	f	class:LazyScheduler
LazyScheduler	components/scheduler/lazy_scheduler.h	/^class LazyScheduler : public Scheduler {$/;"	c
LazyStore	experimental/lazy_store.h	/^  explicit LazyStore(Machine* m) : m_(m) {$/;"	f	class:components::LazyStore
LazyStore	experimental/lazy_store.h	/^class LazyStore {$/;"	c	namespace:components
LevelDBBlockStore	fs/block_store.cc	/^LevelDBBlockStore::LevelDBBlockStore() {$/;"	f	class:LevelDBBlockStore
LevelDBBlockStore	fs/block_store.h	/^class LevelDBBlockStore : public BlockStore {$/;"	c
LevelDBStore	components/store/leveldbstore.cc	/^LevelDBStore::LevelDBStore() {$/;"	f	class:LevelDBStore
LevelDBStore	components/store/leveldbstore.h	/^class LevelDBStore : public KVStore {$/;"	c
LevelDBStoreIterator	components/store/leveldbstore.cc	/^  explicit LevelDBStoreIterator(leveldb::DB* db) {$/;"	f	class:LevelDBStoreIterator
LevelDBStoreIterator	components/store/leveldbstore.cc	/^class LevelDBStoreIterator : public KVStore::Iterator {$/;"	c	file:
LimitSource	common/source.h	/^  LimitSource(int limit, Source<T>* base)$/;"	f	class:LimitSource
LimitSource	common/source.h	/^class LimitSource : public Source<T> {$/;"	c
ListenerLoop	machine/connection/connection_zmq.cc	/^void* ConnectionZMQ::ListenerLoop(void* arg) {$/;"	f	class:ConnectionZMQ
LocalCalvinFS	fs/calvinfs.cc	/^LocalCalvinFS::LocalCalvinFS()$/;"	f	class:LocalCalvinFS
LocalCalvinFS	fs/calvinfs.h	/^class LocalCalvinFS : public FS {$/;"	c
LocalCluster	machine/cluster_config.cc	/^ClusterConfig ClusterConfig::LocalCluster(int n) {$/;"	f	class:ClusterConfig
LocalFS	fs/localfs.cc	/^LocalFS::LocalFS() : env_(leveldb::Env::Default()) {$/;"	f	class:LocalFS
LocalFS	fs/localfs.cc	/^LocalFS::LocalFS(const string& root)$/;"	f	class:LocalFS
LocalFS	fs/localfs.h	/^class LocalFS : public FS {$/;"	c
LocalFileBlockStore	fs/block_store.cc	/^LocalFileBlockStore::LocalFileBlockStore() {$/;"	f	class:LocalFileBlockStore
LocalFileBlockStore	fs/block_store.h	/^class LocalFileBlockStore : public BlockStore {$/;"	c
LocalFileHandle	fs/local_calvinfs.h	/^class LocalFileHandle : public FileHandle {$/;"	c
LocalFileSystem	fs/local_calvinfs.h	/^  explicit LocalFileSystem(const string& path_prefix)$/;"	f	class:LocalFileSystem
LocalFileSystem	fs/local_calvinfs.h	/^class LocalFileSystem : public FileSystem{$/;"	c
LocalMemLog	components/log/local_mem_log.cc	/^LocalMemLog::LocalMemLog() : max_version_(0), size_(0), allocated_(1024*1024) {$/;"	f	class:LocalMemLog
LocalMemLog	components/log/local_mem_log.h	/^class LocalMemLog : public Log {$/;"	c
LocalMemLogReader	components/log/local_mem_log.cc	/^LocalMemLogReader::LocalMemLogReader(LocalMemLog* log)$/;"	f	class:LocalMemLogReader
LocalMemLogReader	components/log/local_mem_log.cc	/^class LocalMemLogReader : public Log::Reader {$/;"	c	file:
LocalRPCBenchmark1	machine/machine_test.cc	/^void LocalRPCBenchmark1() {$/;"	f
LocalRPCBenchmark2	machine/machine_test.cc	/^void LocalRPCBenchmark2() {$/;"	f
LocalReplica	components/store/btreestore.cc	/^uint32 BTreeStore::LocalReplica() {$/;"	f	class:BTreeStore
LocalReplica	components/store/hybrid_versioned_kvstore.cc	/^uint32 HybridVersionedKVStore::LocalReplica() {$/;"	f	class:HybridVersionedKVStore
LocalReplica	components/store/kvstore.cc	/^uint32 KVStore::LocalReplica() {$/;"	f	class:KVStore
LocalReplica	components/store/leveldbstore.cc	/^uint32 LevelDBStore::LocalReplica() {$/;"	f	class:LevelDBStore
LocalReplica	components/store/microbenchmark_store.cc	/^uint32 MicrobenchmarkStore::LocalReplica() {$/;"	f	class:MicrobenchmarkStore
LocalReplica	components/store/store_app.cc	/^uint32 StoreApp::LocalReplica() {$/;"	f	class:StoreApp
LocalReplica	components/store/tpcc_store.cc	/^uint32 TpccStore::LocalReplica() {$/;"	f	class:TpccStore
LocalReplica	components/store/versioned_kvstore.cc	/^uint32 VersionedKVStore::LocalReplica() {$/;"	f	class:VersionedKVStore
LocalReplica	fs/metadata_store.cc	/^uint32 MetadataStore::LocalReplica() {$/;"	f	class:MetadataStore
Lock	common/mutex.h	/^  explicit Lock(Mutex* mutex) : mutex_(mutex) {$/;"	f	class:Lock
Lock	common/mutex.h	/^class Lock {$/;"	c
Lock	machine/thread_pool/thread_pool_test.cc	/^  void Lock() {$/;"	f	class:DeadlockFreedomMessageHandler
LockManager	components/scheduler/lock_manager.h	/^class LockManager {$/;"	c
LockMode	components/scheduler/lock_manager.h	/^  enum LockMode {$/;"	g	class:LockManager
LockRequest	components/scheduler/lock_manager.h	/^    LockRequest(LockMode m, Action* a) : action_(a), mode_(m) {}$/;"	f	struct:LockManager::LockRequest
LockRequest	components/scheduler/lock_manager.h	/^  struct LockRequest {$/;"	s	class:LockManager
LockingScheduler	components/scheduler/locking_scheduler.h	/^  LockingScheduler()$/;"	f	class:LockingScheduler
LockingScheduler	components/scheduler/locking_scheduler.h	/^class LockingScheduler : public Scheduler {$/;"	c
Log	components/log/log.h	/^class Log {$/;"	c
LogApp	components/log/log_app.h	/^  LogApp() {}$/;"	f	class:LogApp
LogApp	components/log/log_app.h	/^  explicit LogApp(Log* log) : log_(log) {}$/;"	f	class:LogApp
LogApp	components/log/log_app.h	/^class LogApp : public App {$/;"	c
LogAppTest	components/log/log_app_test.cc	/^  LogAppTest()$/;"	f	class:LogAppTest
LogAppTest	components/log/log_app_test.cc	/^class LogAppTest {$/;"	c	file:
LogEntry	fs/block_log_test.cc	/^struct LogEntry {$/;"	s	file:
LogSource	components/log/log_source.h	/^  explicit LogSource(Log* log) : reader_(log->GetReader()) {}$/;"	f	class:LogSource
LogSource	components/log/log_source.h	/^  explicit LogSource(Log::Reader* reader) : reader_(reader) {$/;"	f	class:LogSource
LogSource	components/log/log_source.h	/^class LogSource : public Source<T*> {$/;"	c
Lookup	common/atomic.h	/^  inline bool Lookup(const K& k, V* v) {$/;"	f	class:AtomicMap
Lookup	components/log/log_app_test.cc	/^  string Lookup(uint64 version) {$/;"	f	class:LogAppTest
Lookup	components/log/paxos2_test.cc	/^  string Lookup(uint64 i, uint64 version) {$/;"	f	class:Paxos2Test
Lookup	components/log/paxos_test.cc	/^  string Lookup(uint64 i, uint64 version) {$/;"	f	class:FakePaxosTest
LookupBlucket	fs/calvinfs.cc	/^uint64 CalvinFSConfigMap::LookupBlucket(uint64 id, uint64 replica) {$/;"	f	class:CalvinFSConfigMap
LookupMetadataShard	fs/calvinfs.cc	/^uint64 CalvinFSConfigMap::LookupMetadataShard(uint64 id, uint64 replica) {$/;"	f	class:CalvinFSConfigMap
LookupReplica	fs/calvinfs.cc	/^uint64 CalvinFSConfigMap::LookupReplica(uint64 machine_id) {$/;"	f	class:CalvinFSConfigMap
LookupReplicaByDir	components/store/btreestore.cc	/^uint32 BTreeStore::LookupReplicaByDir(string dir) {$/;"	f	class:BTreeStore
LookupReplicaByDir	components/store/hybrid_versioned_kvstore.cc	/^uint32 HybridVersionedKVStore::LookupReplicaByDir(string dir) {$/;"	f	class:HybridVersionedKVStore
LookupReplicaByDir	components/store/kvstore.cc	/^uint32 KVStore::LookupReplicaByDir(string dir) {$/;"	f	class:KVStore
LookupReplicaByDir	components/store/leveldbstore.cc	/^uint32 LevelDBStore::LookupReplicaByDir(string dir) {$/;"	f	class:LevelDBStore
LookupReplicaByDir	components/store/microbenchmark_store.cc	/^uint32 MicrobenchmarkStore::LookupReplicaByDir(string dir) {$/;"	f	class:MicrobenchmarkStore
LookupReplicaByDir	components/store/store_app.cc	/^uint32 StoreApp::LookupReplicaByDir(string dir) {$/;"	f	class:StoreApp
LookupReplicaByDir	components/store/tpcc_store.cc	/^uint32 TpccStore::LookupReplicaByDir(string dir) {$/;"	f	class:TpccStore
LookupReplicaByDir	components/store/versioned_kvstore.cc	/^uint32 VersionedKVStore::LookupReplicaByDir(string dir) {$/;"	f	class:VersionedKVStore
LookupReplicaByDir	fs/calvinfs.cc	/^uint32 CalvinFSConfigMap::LookupReplicaByDir(string dir) {$/;"	f	class:CalvinFSConfigMap
LookupReplicaByDir	fs/metadata_store.cc	/^uint32 MetadataStore::LookupReplicaByDir(string dir) {$/;"	f	class:MetadataStore
Lookup_Internal	fs/metadata_store.cc	/^void MetadataStore::Lookup_Internal($/;"	f	class:MetadataStore
LoopyWorkload	machine/thread_pool/thread_pool_test.cc	/^  void LoopyWorkload(Header* header) {$/;"	f	class:BenchmarkMessageHandler
MAKEFILE_TEMPLATE	Makefile	/^MAKEFILE_TEMPLATE := Makefile.template$/;"	m
MAX_BUF_SIZE	scripts/script_utils.cc	/^  #define  MAX_BUF_SIZE /;"	d	file:
MY_BENCHMARK	btree/btree_bench.cc	/^#define MY_BENCHMARK(/;"	d	file:
MY_BENCHMARK2	btree/btree_bench.cc	/^#define MY_BENCHMARK2(/;"	d	file:
MY_BENCHMARK3	btree/btree_bench.cc	/^#define MY_BENCHMARK3(/;"	d	file:
MY_BENCHMARK4	btree/btree_bench.cc	/^#define MY_BENCHMARK4(/;"	d	file:
MY_BENCHMARK_TYPES	btree/btree_bench.cc	/^#define MY_BENCHMARK_TYPES(/;"	d	file:
MY_BENCHMARK_TYPES2	btree/btree_bench.cc	/^#define MY_BENCHMARK_TYPES2(/;"	d	file:
Machine	machine/machine.cc	/^Machine::Machine($/;"	f	class:Machine
Machine	machine/machine.cc	/^Machine::Machine()$/;"	f	class:Machine
Machine	machine/machine.cc	/^Machine::Machine(uint64 machine_id, const ClusterConfig& config)$/;"	f	class:Machine
Machine	machine/machine.h	/^class Machine {$/;"	c
MainLoopBody	components/scheduler/locking_scheduler.cc	/^void LockingScheduler::MainLoopBody() {$/;"	f	class:LockingScheduler
MainLoopBody	components/scheduler/locking_scheduler_remaster.cc	/^void LockingScheduler::MainLoopBody() {$/;"	f	class:LockingScheduler
MainLoopBody	components/scheduler/serial_scheduler.h	/^  virtual void MainLoopBody() {$/;"	f	class:SerialScheduler
MainLoopBody	components/scheduler/vll_scheduler.cc	/^void VLLScheduler::MainLoopBody() {$/;"	f	class:VLLScheduler
MakeCalvinFSConfig	fs/calvinfs.cc	/^CalvinFSConfig MakeCalvinFSConfig() {$/;"	f
MakeCalvinFSConfig	fs/calvinfs.cc	/^CalvinFSConfig MakeCalvinFSConfig(int n) {$/;"	f
MakeCalvinFSConfig	fs/calvinfs.cc	/^CalvinFSConfig MakeCalvinFSConfig(int n, int r) {$/;"	f
MakeRelativePathsInFlagsAbsolute	.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f
MapTest	btree/btree_test.cc	/^void MapTest() {$/;"	f	namespace:btree::__anon12
MapTest	btree/safe_btree_test.cc	/^void MapTest() {$/;"	f	namespace:btree::__anon13
Match	lint	/^def Match(pattern, s):$/;"	f
Materialization	db/materialization_test.cc	/^  Materialization(const string& scheduler_type, bool use_leveldb)$/;"	f	class:Materialization
Materialization	db/materialization_test.cc	/^class Materialization {$/;"	c	file:
Materialize	experimental/dag/appender.cc	/^void Appender::Materialize(const std::set<Sticky*> *transitive_closure, $/;"	f	class:Appender
MaxBlockedActions	components/scheduler/vll_scheduler.h	/^  static const int MaxBlockedActions = 50;$/;"	m	class:VLLScheduler
MessageBuffer	machine/message_buffer.h	/^  MessageBuffer() {}$/;"	f	class:MessageBuffer
MessageBuffer	machine/message_buffer.h	/^  explicit MessageBuffer(char* ptr, int len) {$/;"	f	class:MessageBuffer
MessageBuffer	machine/message_buffer.h	/^  explicit MessageBuffer(const Slice& s) {$/;"	f	class:MessageBuffer
MessageBuffer	machine/message_buffer.h	/^  explicit MessageBuffer(const google::protobuf::Message& m) {$/;"	f	class:MessageBuffer
MessageBuffer	machine/message_buffer.h	/^  explicit MessageBuffer(string* s) {$/;"	f	class:MessageBuffer
MessageBuffer	machine/message_buffer.h	/^  explicit MessageBuffer(zmq::message_t* m) {$/;"	f	class:MessageBuffer
MessageBuffer	machine/message_buffer.h	/^class MessageBuffer {$/;"	c
MessageHandler	machine/message_handler.h	/^class MessageHandler {$/;"	c
MessagePart	machine/message_buffer.h	/^  MessagePart(char* ptr, int len)$/;"	f	class:MessagePart
MessagePart	machine/message_buffer.h	/^  explicit MessagePart(const Slice& s)$/;"	f	class:MessagePart
MessagePart	machine/message_buffer.h	/^  explicit MessagePart(string* s)$/;"	f	class:MessagePart
MessagePart	machine/message_buffer.h	/^  explicit MessagePart(zmq::message_t* m)$/;"	f	class:MessagePart
MessagePart	machine/message_buffer.h	/^class MessagePart {$/;"	c
MessagePartType	machine/message_buffer.h	/^enum MessagePartType {$/;"	g
MetadataStore	fs/metadata_store.cc	/^MetadataStore::MetadataStore(VersionedKVStore* store)$/;"	f	class:MetadataStore
MetadataStore	fs/metadata_store.h	/^class MetadataStore : public Store {$/;"	c
MetadataStoreTest	fs/metadata_store_test.cc	/^  MetadataStoreTest(int n, int r) : config_(MakeCalvinFSConfig(n, r)) {$/;"	f	class:MetadataStoreTest
MetadataStoreTest	fs/metadata_store_test.cc	/^class MetadataStoreTest {$/;"	c	file:
MicroClient	db/client.h	/^  MicroClient() : go_(true), going_(false), source_(NULL), queue_(NULL) {}$/;"	f	class:MicroClient
MicroClient	db/client.h	/^  MicroClient(Source<Action*>* s, QueueSource<Action*>* q)$/;"	f	class:MicroClient
MicroClient	db/client.h	/^class MicroClient : public App {$/;"	c
MicroSource	db/materialization_test.cc	/^  MicroSource() {$/;"	f	class:MicroSource
MicroSource	db/materialization_test.cc	/^class MicroSource : public PreparedSource<Action*> {$/;"	c	file:
MicrobenchmarkStore	components/store/microbenchmark_store.cc	/^MicrobenchmarkStore::MicrobenchmarkStore() {$/;"	f	class:MicrobenchmarkStore
MicrobenchmarkStore	components/store/microbenchmark_store.cc	/^MicrobenchmarkStore::MicrobenchmarkStore(KVStore* store) {$/;"	f	class:MicrobenchmarkStore
MicrobenchmarkStore	components/store/microbenchmark_store.h	/^class MicrobenchmarkStore : public Store {$/;"	c
MonitorThread	machine/thread_pool/thread_pool.cc	/^void* ThreadPool::MonitorThread(void* arg) {$/;"	f	class:ThreadPool
MultiMapTest	btree/btree_test.cc	/^void MultiMapTest() {$/;"	f	namespace:btree::__anon12
MultiSetTest	btree/btree_test.cc	/^void MultiSetTest() {$/;"	f	namespace:btree::__anon12
Mutex	common/mutex.h	/^  Mutex() {$/;"	f	class:Mutex
Mutex	common/mutex.h	/^class Mutex {$/;"	c
MutexRW	common/mutex.h	/^  MutexRW() {$/;"	f	class:MutexRW
MutexRW	common/mutex.h	/^class MutexRW {$/;"	c
NDEBUG	btree/btree.h	/^#define NDEBUG /;"	d
NO_OWNERSHIP	machine/message_buffer.h	/^  NO_OWNERSHIP = 1,$/;"	e	enum:MessagePartType
NewFSsAreEmpty	fs/fs_test.cc	/^  void NewFSsAreEmpty() {$/;"	f	class:FSTest
NewOrder	components/store/tpcc_store.cc	/^void TpccStore::NewOrder(const TpccAction::ExecuteInput& in) {$/;"	f	class:TpccStore
NewOrderSource	db/materialization_test.cc	/^  NewOrderSource() {$/;"	f	class:NewOrderSource
NewOrderSource	db/materialization_test.cc	/^class NewOrderSource : public PreparedSource<Action*> {$/;"	c	file:
NewReport	machine/app/app.h	/^  Report* NewReport() {$/;"	f	class:App
Next	components/log/local_mem_log.cc	/^bool LocalMemLogReader::Next() {$/;"	f	class:LocalMemLogReader
Next	components/store/btreestore.cc	/^  virtual void Next() {$/;"	f	class:BTreeIterator
Next	components/store/leveldbstore.cc	/^  virtual void Next() {$/;"	f	class:LevelDBStoreIterator
NoExtension	lint	/^  def NoExtension(self):$/;"	m	class:FileInfo
Node	experimental/dag_test.cc	/^  Node() {$/;"	f	struct:Node
Node	experimental/dag_test.cc	/^struct Node {$/;"	s	file:
Noop	common/utils.cc	/^template<> void Noop<AtomicQueue<int>*>(AtomicQueue<int>*& t) {}$/;"	f
Noop	common/utils.cc	/^template<> void Noop<MessageBuffer*>(MessageBuffer*& t) {}$/;"	f
Noop	common/utils.cc	/^template<> void Noop<bool>(bool& t) {}$/;"	f
Noop	common/utils.cc	/^template<typename T> void Noop(T& t) {}$/;"	f
NumLines	lint	/^  def NumLines(self):$/;"	m	class:CleansedLines
OBJDIR	Makefile	/^OBJDIR := ..\/obj$/;"	m
OBJDIRS	Makefile	/^OBJDIRS :=$/;"	m
OK	fs/status.h	/^  static Status OK(uint64 version = 0) {$/;"	f	class:Status
OPT_MODE	Makefile	/^OPT_MODE := $(PROD)$/;"	m
OWNS_BUFFER	machine/message_buffer.h	/^  OWNS_BUFFER = 2,$/;"	e	enum:MessagePartType
OWNS_STRING	machine/message_buffer.h	/^  OWNS_STRING = 3,$/;"	e	enum:MessagePartType
OWNS_ZMQ_MSG	machine/message_buffer.h	/^  OWNS_ZMQ_MSG = 4,$/;"	e	enum:MessagePartType
Open	fs/fs.h	/^  virtual Status Open(const string& path, FileHandle** file) {$/;"	f	class:FS
Open	fs/local_calvinfs.h	/^  virtual Status Open(const string& path, FileHandle** file) {$/;"	f	class:LocalFileSystem
PROD	Makefile	/^PROD := -O2 -DNDEBUG            # (A) Production use (optimized mode)$/;"	m
PROFILING	Makefile	/^PROFILING := -O2 -g2 -DNDEBUG   # (C) opt, but w\/debug symbols$/;"	m
PROTOB	Makefile	/^PROTOB  := $(EXTDIR)\/protobuf$/;"	m
PROTOCEXE	Makefile	/^PROTOCEXE := $(PROTOB)\/src\/.libs\/protoc$/;"	m
PYTHON_OBJS	Makefile	/^PYTHON_OBJS := \/usr\/lib64\/libpython2.7.so$/;"	m
ParentDir	fs/metadata_store.cc	/^string ParentDir(const string& path) {$/;"	f
Parse64	common/varint.h	/^inline static const char* Parse64(const char* pos, uint64* x) {$/;"	f	namespace:varint
ParseArguments	lint	/^def ParseArguments(args):$/;"	f
ParseFromMessageBuffer	components/log/log_app.cc	/^Action* ParseFromMessageBuffer<Action>(MessageBuffer* m) {$/;"	f
ParseFromMessageBuffer	components/log/log_app.cc	/^PairSequence* ParseFromMessageBuffer<PairSequence>(MessageBuffer* m) {$/;"	f
ParseFromMessageBuffer	components/log/log_app.cc	/^T* ParseFromMessageBuffer(MessageBuffer* m) {$/;"	f
ParseFromMessageBuffer	components/log/log_app.cc	/^UInt64Pair* ParseFromMessageBuffer<UInt64Pair>(MessageBuffer* m) {$/;"	f
ParseFromMessageBuffer	components/log/log_app.cc	/^string* ParseFromMessageBuffer<string>(MessageBuffer* m) {$/;"	f
ParseNolintSuppressions	lint	/^def ParseNolintSuppressions(filename, raw_line, linenum, error):$/;"	f
ParseVersion	components/store/versioned_kvstore.cc	/^uint64 ParseVersion(const Slice& versioned_key, uint64* flags = NULL) {$/;"	f
Paxos2App	components/log/paxos2.cc	/^Paxos2App::Paxos2App(Log* log, const vector<uint64>& participants)$/;"	f	class:Paxos2App
Paxos2App	components/log/paxos2.cc	/^Paxos2App::Paxos2App(Log* log, uint64 count)$/;"	f	class:Paxos2App
Paxos2App	components/log/paxos2.h	/^class Paxos2App : public LogApp {$/;"	c
Paxos2Test	components/log/paxos2_test.cc	/^  Paxos2Test() {$/;"	f	class:Paxos2Test
Paxos2Test	components/log/paxos2_test.cc	/^class Paxos2Test {$/;"	c	file:
Payment	components/store/tpcc_store.cc	/^void TpccStore::Payment(const TpccAction::ExecuteInput& in) {$/;"	f	class:TpccStore
Pop	common/atomic.h	/^  inline bool Pop(T* result) {$/;"	f	class:AtomicQueue
Pop	common/atomic.h	/^  inline bool Pop(T* result) {$/;"	f	class:DelayQueue
PopBack	machine/message_buffer.h	/^  inline MessagePart* PopBack() {$/;"	f	class:MessageBuffer
PreparedSource	db/materialization_test.cc	/^  PreparedSource() : version_(0) {}$/;"	f	class:PreparedSource
PreparedSource	db/materialization_test.cc	/^class PreparedSource : public Source<T> {$/;"	c	file:
PrintCategories	lint	/^def PrintCategories():$/;"	f
PrintErrorCounts	lint	/^  def PrintErrorCounts(self):$/;"	m	class:_CppLintState
PrintUsage	lint	/^def PrintUsage(message):$/;"	f
ProcessFile	lint	/^def ProcessFile(filename, vlevel, extra_check_functions=[]):$/;"	f
ProcessFileData	lint	/^def ProcessFileData(filename, file_extension, lines, error,$/;"	f
ProcessLine	lint	/^def ProcessLine(filename, file_extension,$/;"	f
ProtobufReader	experimental/protobuf_reader.h	/^  ProtobufReader() {}$/;"	f	class:ProtobufReader
ProtobufReader	experimental/protobuf_reader.h	/^  explicit ProtobufReader(const Slice& encoded) : encoded_(encoded) {}$/;"	f	class:ProtobufReader
ProtobufReader	experimental/protobuf_reader.h	/^class ProtobufReader {$/;"	c
Push	common/atomic.h	/^  inline void Push(const T& item) {$/;"	f	class:AtomicQueue
Push	common/atomic.h	/^  inline void Push(const T& item) {$/;"	f	class:DelayQueue
Put	common/atomic.h	/^  inline void Put(const K& k, const V& v) {$/;"	f	class:AtomicMap
Put	components/store/btreestore.cc	/^void BTreeStore::Put(const string& key, const string& value) {$/;"	f	class:BTreeStore
Put	components/store/hybrid_versioned_kvstore.cc	/^void HybridVersionedKVStore::Put($/;"	f	class:HybridVersionedKVStore
Put	components/store/leveldbstore.cc	/^void LevelDBStore::Put(const string& key, const string& value) {$/;"	f	class:LevelDBStore
Put	components/store/versioned_kvstore.cc	/^void VersionedKVStore::Put($/;"	f	class:VersionedKVStore
Put	experimental/lazy_store.h	/^  inline void Put(const string& key, const string& value) {$/;"	f	class:components::LazyStore
Put	fs/block_store.cc	/^void BlockStoreApp::Put(uint64 block_id, const Slice& data) {$/;"	f	class:BlockStoreApp
Put	fs/block_store.cc	/^void DistributedBlockStoreApp::Put(uint64 block_id, const Slice& data) {$/;"	f	class:DistributedBlockStoreApp
Put	fs/block_store.cc	/^void HybridBlockStore::Put(uint64 block_id, const Slice& data) {$/;"	f	class:HybridBlockStore
Put	fs/block_store.cc	/^void LevelDBBlockStore::Put(uint64 block_id, const Slice& data) {$/;"	f	class:LevelDBBlockStore
Put	fs/block_store.cc	/^void LocalFileBlockStore::Put(uint64 block_id, const Slice& data) {$/;"	f	class:LocalFileBlockStore
PutConfig	machine/cluster_manager.cc	/^void ClusterManager::PutConfig() {$/;"	f	class:ClusterManager
PutEntry	fs/metadata_store.cc	/^  void PutEntry(const string& path, const MetadataEntry& entry) {$/;"	f	class:ExecutionContext
PutGetDelete	components/store/hybrid_versioned_kvstore_test.cc	/^  void PutGetDelete() {$/;"	f	class:HybridVersionedKVStoreTest
PutGetDelete	components/store/versioned_kvstore_test.cc	/^  void PutGetDelete() {$/;"	f	class:VersionedKVStoreTest
PutMany	components/store/hybrid_versioned_kvstore_test.cc	/^  void PutMany() {$/;"	f	class:HybridVersionedKVStoreTest
PutMany	components/store/versioned_kvstore_test.cc	/^  void PutMany() {$/;"	f	class:VersionedKVStoreTest
PutManyAgain	components/store/hybrid_versioned_kvstore_test.cc	/^  void PutManyAgain() {$/;"	f	class:HybridVersionedKVStoreTest
PutNoClobber	common/atomic.h	/^  inline V PutNoClobber(const K& k, const V& v) {$/;"	f	class:AtomicMap
Query	machine/app/reporter.h	/^  void Query(string app, string quantity) {$/;"	f	class:Reporter
QueryAtTime	machine/app/reporter.h	/^  Scalar QueryAtTime(string app, string quantity, double time) {$/;"	f	class:Reporter
QueueSource	common/source.h	/^  QueueSource() {}$/;"	f	class:QueueSource
QueueSource	common/source.h	/^class QueueSource : public Source<T> {$/;"	c
RANF	common/utils.cc	/^#define RANF(/;"	d	file:
READSETSIZE	experimental/dag_test.cc	/^#define READSETSIZE /;"	d	file:
READ_SET_SIZE	experimental/dag/appender.h	/^#define READ_SET_SIZE$/;"	d
REGISTER_APP	components/log/log_app.cc	/^REGISTER_APP(LogApp) {$/;"	f
REGISTER_APP	components/log/paxos.cc	/^REGISTER_APP(FakePaxosApp) {$/;"	f
REGISTER_APP	components/log/paxos.cc	/^REGISTER_APP(FakePaxosApp2) {$/;"	f
REGISTER_APP	components/log/paxos2.cc	/^REGISTER_APP(Paxos2App) {$/;"	f
REGISTER_APP	components/log/paxos2.cc	/^REGISTER_APP(Paxos2App2) {$/;"	f
REGISTER_APP	components/scheduler/lazy_scheduler.cc	/^REGISTER_APP(LazyScheduler) {$/;"	f
REGISTER_APP	components/scheduler/locking_scheduler.cc	/^REGISTER_APP(LockingScheduler) {$/;"	f
REGISTER_APP	components/scheduler/locking_scheduler_remaster.cc	/^REGISTER_APP(LockingScheduler) {$/;"	f
REGISTER_APP	components/scheduler/serial_scheduler.cc	/^REGISTER_APP(SerialScheduler) {$/;"	f
REGISTER_APP	components/scheduler/vll_scheduler.cc	/^REGISTER_APP(VLLScheduler) {$/;"	f
REGISTER_APP	components/store/btreestore.cc	/^REGISTER_APP(BTreeStoreApp) {$/;"	f
REGISTER_APP	components/store/leveldbstore.cc	/^REGISTER_APP(LevelDBStoreApp) {$/;"	f
REGISTER_APP	db/client.cc	/^REGISTER_APP(MicroClient) {$/;"	f
REGISTER_APP	fs/block_log.cc	/^REGISTER_APP(BlockLogApp) {$/;"	f
REGISTER_APP	fs/block_store.cc	/^REGISTER_APP(BlockStore) {$/;"	f
REGISTER_APP	fs/block_store.cc	/^REGISTER_APP(DistributedBlockStore) {$/;"	f
REGISTER_APP	fs/calvinfs_client_app.cc	/^REGISTER_APP(CalvinFSClientApp) {$/;"	f
REGISTER_APP	fs/metadata_store.cc	/^REGISTER_APP(MetadataStoreApp) {$/;"	f
REGISTER_APP	machine/app/app.h	/^#define REGISTER_APP(/;"	d
REGISTER_APP	machine/app/app_test.cc	/^REGISTER_APP(TestApp) {$/;"	f
REGISTER_APP	machine/app/reporter.cc	/^REGISTER_APP(Reporter) {$/;"	f
REGISTER_APP	machine/app/testapp.cc	/^REGISTER_APP(TestAddApp) {$/;"	f
REGISTER_APP	machine/machine_test.cc	/^REGISTER_APP(SynchronousNoop) {$/;"	f
RandGen	btree/btree_bench.cc	/^  RandGen(result_type seed) {$/;"	f	struct:btree::__anon11::RandGen
RandGen	btree/btree_bench.cc	/^struct RandGen {$/;"	s	namespace:btree::__anon11	file:
RandomA	experimental/protobuf_reader_test.cc	/^A RandomA(int xcount, int scount, int ssize) {$/;"	f
RandomA	experimental/protobuf_reader_test.cc	/^void RandomA(A* a, int xcount, int scount, int ssize) {$/;"	f
RandomAppendExperiment	fs/calvinfs_client_app.h	/^  void RandomAppendExperiment() {$/;"	f	class:CalvinFSClientApp
RandomB	experimental/protobuf_reader_test.cc	/^void RandomB(B* b, int depth, int fanout) {$/;"	f
RandomBlockSize	fs/calvinfs_client_app.h	/^  uint64 RandomBlockSize() {$/;"	f	class:CalvinFSClientApp
RandomBytes	common/utils.cc	/^string RandomBytes(int length) {$/;"	f
RandomBytesNoZeros	common/utils.cc	/^string RandomBytesNoZeros(int length) {$/;"	f
RandomData	fs/calvinfs_client_app.h	/^  inline Slice RandomData(uint64 size) {$/;"	f	class:CalvinFSClientApp
RandomFile	fs/calvinfs_client_app.h	/^  string RandomFile() {$/;"	f	class:CalvinFSClientApp
RandomFileC	fs/calvinfs_client_app.h	/^  string RandomFileC() {$/;"	f	class:CalvinFSClientApp
RandomGaussian	common/utils.cc	/^double RandomGaussian(double s) {$/;"	f
RandomSize	fs/metadata_store.cc	/^int RandomSize() {$/;"	f
RandomString	common/utils.cc	/^string RandomString(int length) {$/;"	f
ReadField	experimental/protobuf_reader.h	/^bool ProtobufReader::ReadField(uint32 field, T* value) {$/;"	f	class:ProtobufReader
ReadFile	fs/calvinfs_client_app.cc	/^MessageBuffer* CalvinFSClientApp::ReadFile(const Slice& path) {$/;"	f	class:CalvinFSClientApp
ReadFileToString	fs/calvinfs.cc	/^Status LocalCalvinFS::ReadFileToString(const string& path, string* data) {$/;"	f	class:LocalCalvinFS
ReadFileToString	fs/hdfs.cc	/^Status HadoopFS::ReadFileToString(const string& path, string* data) {$/;"	f	class:HadoopFS
ReadFileToString	fs/local_calvinfs.h	/^  virtual Status ReadFileToString(const string& path, string* data) {$/;"	f	class:LocalFileSystem
ReadFileToString	fs/localfs.cc	/^Status LocalFS::ReadFileToString(const string& path, string* data) {$/;"	f	class:LocalFS
ReadLock	common/mutex.h	/^  explicit ReadLock(MutexRW* mutex) : mutex_(mutex) {$/;"	f	class:ReadLock
ReadLock	common/mutex.h	/^class ReadLock {$/;"	c
ReadLock	components/scheduler/lock_manager.cc	/^bool LockManager::ReadLock(Action* a, const string& key) {$/;"	f	class:LockManager
ReadRepeatedField	experimental/protobuf_reader.h	/^bool ProtobufReader::ReadRepeatedField(uint32 field, int index, T* value) {$/;"	f	class:ProtobufReader
ReadToString	fs/local_calvinfs.h	/^  virtual Status ReadToString(uint64 offset, uint64 count, string* result) {$/;"	f	class:LocalFileHandle
ReadValue	experimental/protobuf_reader.h	/^bool ProtobufReader::ReadValue(CodedInputStream* input, T* value) {$/;"	f	class:ProtobufReader
ReadValue	experimental/protobuf_reader.h	/^bool ProtobufReader::ReadValue<ProtobufReader>($/;"	f	class:ProtobufReader
ReadValue	experimental/protobuf_reader.h	/^bool ProtobufReader::ReadValue<Slice>(CodedInputStream* input, Slice* value) {$/;"	f	class:ProtobufReader
ReadValue	experimental/protobuf_reader.h	/^bool ProtobufReader::ReadValue<string>(CodedInputStream* input, string* value) {$/;"	f	class:ProtobufReader
ReadValue	experimental/protobuf_reader.h	/^bool ProtobufReader::ReadValue<uint32>(CodedInputStream* input, uint32* value) {$/;"	f	class:ProtobufReader
Reader	components/log/log.h	/^  class Reader {$/;"	c	class:Log
Ready	components/scheduler/lock_manager.cc	/^bool LockManager::Ready(Action** a) {$/;"	f	class:LockManager
RecursiveCopy	fs/fs.h	/^  virtual Status RecursiveCopy($/;"	f	class:FS
RecursiveRemove	fs/fs.h	/^  virtual Status RecursiveRemove(const string& path) {$/;"	f	class:FS
RecursiveRename	fs/fs.h	/^  virtual Status RecursiveRename($/;"	f	class:FS
Release	components/scheduler/lock_manager.cc	/^void LockManager::Release(Action* a, const string& key) {$/;"	f	class:LockManager
Release	machine/thread_pool/thread_pool_test.cc	/^  void Release() {$/;"	f	class:DeadlockFreedomMessageHandler
ReleaseMutex	machine/thread_pool/thread_pool_test.cc	/^  void ReleaseMutex() {$/;"	f	class:DeadlockFreedomMessageHandler
RemoteLogSource	components/log/log_app.cc	/^RemoteLogSource<T>::RemoteLogSource(Machine* machine,$/;"	f	class:RemoteLogSource
RemoteLogSource	components/log/log_app.h	/^class RemoteLogSource : public Source<T*> {$/;"	c
Remove	fs/calvinfs.cc	/^Status LocalCalvinFS::Remove(const string& path) {$/;"	f	class:LocalCalvinFS
Remove	fs/hdfs.cc	/^Status HadoopFS::Remove(const string& path) {$/;"	f	class:HadoopFS
Remove	fs/local_calvinfs.h	/^  virtual Status Remove(const string& path) {$/;"	f	class:LocalFileSystem
Remove	fs/localfs.cc	/^Status LocalFS::Remove(const string& path) {$/;"	f	class:LocalFS
RemoveMultiLineComments	lint	/^def RemoveMultiLineComments(filename, lines, error):$/;"	f
RemoveMultiLineCommentsFromRange	lint	/^def RemoveMultiLineCommentsFromRange(lines, begin, end):$/;"	f
Rename	fs/fs.h	/^  virtual Status Rename(const string& from_path, const string& to_path) {$/;"	f	class:FS
Rename	fs/local_calvinfs.h	/^  virtual Status Rename(const string& from_path, const string& to_path) {$/;"	f	class:LocalFileSystem
RenameExperiment	fs/calvinfs_client_app.h	/^  void RenameExperiment(int local_percentage) {$/;"	f	class:CalvinFSClientApp
RenameFile	fs/calvinfs_client_app.cc	/^MessageBuffer* CalvinFSClientApp::RenameFile(const Slice& from_path, const Slice& to_path) {$/;"	f	class:CalvinFSClientApp
Rename_Internal	fs/metadata_store.cc	/^void MetadataStore::Rename_Internal($/;"	f	class:MetadataStore
ReplaceableCheck	lint	/^def ReplaceableCheck(operator, macro, line):$/;"	f
Report	db/materialization_test.cc	/^  void Report() {$/;"	f	class:Materialization
Report	fs/calvinfs_client_app.h	/^  void Report() {$/;"	f	class:CalvinFSClientApp
ReportThroughputBetween	db/materialization_test.cc	/^  void ReportThroughputBetween(double start, double end) {$/;"	f	class:Materialization
Reporter	machine/app/reporter.h	/^  explicit Reporter(int interval_in_usecs = 1000)$/;"	f	class:Reporter
Reporter	machine/app/reporter.h	/^class Reporter : public App {$/;"	c
RepositoryName	lint	/^  def RepositoryName(self):$/;"	m	class:FileInfo
Reset	btree/btree_bench.cc	/^void BenchmarkRun::Reset() {$/;"	f	class:btree::__anon11::BenchmarkRun
Reset	components/log/local_mem_log.cc	/^void LocalMemLogReader::Reset() {$/;"	f	class:LocalMemLogReader
Reset	components/store/btreestore.cc	/^  virtual void Reset() {$/;"	f	class:BTreeIterator
Reset	components/store/hybrid_versioned_kvstore_test.cc	/^  void Reset() {$/;"	f	class:HybridVersionedKVStoreTest
Reset	components/store/leveldbstore.cc	/^  virtual void Reset() {$/;"	f	class:LevelDBStoreIterator
Reset	components/store/versioned_kvstore_test.cc	/^  void Reset() {$/;"	f	class:VersionedKVStoreTest
ResetErrorCounts	lint	/^  def ResetErrorCounts(self):$/;"	m	class:_CppLintState
ResetNolintSuppressions	lint	/^def ResetNolintSuppressions():$/;"	f
Resize_Internal	fs/metadata_store.cc	/^void MetadataStore::Resize_Internal($/;"	f	class:MetadataStore
Resize_thread_count	machine/thread_pool/thread_pool.cc	/^void SubPool::Resize_thread_count(int n) {$/;"	f	class:SubPool
Run	btree/btree_bench.cc	/^void BenchmarkRun::Run() {$/;"	f	class:btree::__anon11::BenchmarkRun
Run	components/store/hybrid_versioned_kvstore.cc	/^void HybridVersionedKVStore::Run(Action* action) {$/;"	f	class:HybridVersionedKVStore
Run	components/store/kvstore.cc	/^void KVStore::Run(Action* action) {$/;"	f	class:KVStore
Run	components/store/microbenchmark_store.cc	/^void MicrobenchmarkStore::Run(Action* action) {$/;"	f	class:MicrobenchmarkStore
Run	components/store/store_app.cc	/^void StoreApp::Run(Action* action) {$/;"	f	class:StoreApp
Run	components/store/tpcc_store.cc	/^void TpccStore::Run(Action* action) {$/;"	f	class:TpccStore
Run	components/store/versioned_kvstore.cc	/^void VersionedKVStore::Run(Action* action) {$/;"	f	class:VersionedKVStore
Run	fs/metadata_store.cc	/^void MetadataStore::Run(Action* action) {$/;"	f	class:MetadataStore
RunAction	fs/metadata_store_test.cc	/^  int RunAction(Action* action) {$/;"	f	class:MetadataStoreTest
RunAsync	components/store/store_app.cc	/^void StoreApp::RunAsync(Action* action, AtomicQueue<Action*>* queue) {$/;"	f	class:StoreApp
RunBenchmarks	btree/btree_bench.cc	/^void RunBenchmarks() {$/;"	f	namespace:btree::__anon11
RunFollower	components/log/paxos.cc	/^void FakePaxosApp::RunFollower() {$/;"	f	class:FakePaxosApp
RunFollower	components/log/paxos2.cc	/^void Paxos2App::RunFollower() {$/;"	f	class:Paxos2App
RunLeader	components/log/paxos.cc	/^void FakePaxosApp::RunLeader() {$/;"	f	class:FakePaxosApp
RunLeader	components/log/paxos2.cc	/^void Paxos2App::RunLeader() {$/;"	f	class:Paxos2App
RunThread	machine/thread_pool/thread_pool.cc	/^void* SubPool::RunThread(void* arg) {$/;"	f	class:SubPool
SAState	machine/app/app.h	/^struct SAState {$/;"	s
SCHEDULER_TEST	components/scheduler/scheduler_test.cc	/^#define SCHEDULER_TEST(/;"	d	file:
SHARED	components/scheduler/lock_manager.h	/^    SHARED = 0,$/;"	e	enum:LockManager::LockMode
SOURCE_EXTENSIONS	.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [ '.C', '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v
SPECIALIZED_CONSTRUCTOR	components/log/log_app.cc	/^#define SPECIALIZED_CONSTRUCTOR(/;"	d	file:
SRCDIR	Makefile	/^SRCDIR := ..\/src_lowlatency$/;"	m
SafeVersion	components/scheduler/locking_scheduler.h	/^  virtual uint64 SafeVersion() {$/;"	f	class:LockingScheduler
SafeVersion	components/scheduler/serial_scheduler.h	/^  virtual uint64 SafeVersion() {$/;"	f	class:SerialScheduler
SafeVersion	components/scheduler/vll_scheduler.h	/^  virtual uint64 SafeVersion() {$/;"	f	class:VLLScheduler
Scheduler	components/scheduler/scheduler.h	/^  Scheduler()$/;"	f	class:Scheduler
Scheduler	components/scheduler/scheduler.h	/^class Scheduler : public App {$/;"	c
SchedulerTest	components/scheduler/scheduler_test.cc	/^  explicit SchedulerTest(const string& scheduler) {$/;"	f	class:SchedulerTest
SchedulerTest	components/scheduler/scheduler_test.cc	/^class SchedulerTest {$/;"	c	file:
Search	lint	/^def Search(pattern, s):$/;"	f
Seek	components/log/local_mem_log.cc	/^bool LocalMemLogReader::Seek(uint64 target) {$/;"	f	class:LocalMemLogReader
Seek	components/store/btreestore.cc	/^  virtual void Seek(const string& target) {$/;"	f	class:BTreeIterator
Seek	components/store/leveldbstore.cc	/^  virtual void Seek(const string& target) {$/;"	f	class:LevelDBStoreIterator
SendMessage	machine/app/app_test.cc	/^void SendMessage(Machine* from, uint64 to, const string& appname) {$/;"	f
SendMessage	machine/connection/connection_zmq.cc	/^void ConnectionZMQ::SendMessage(uint64 recipient, MessageBuffer* message) {$/;"	f	class:ConnectionZMQ
SendMessage	machine/external_connection.cc	/^void ExternalConnection::SendMessage(Header* header, MessageBuffer* message) {$/;"	f	class:ExternalConnection
SendMessage	machine/machine.cc	/^void Machine::SendMessage(Header* header, MessageBuffer* message) {$/;"	f	class:Machine
SendMessageExternal	machine/connection/connection_zmq.cc	/^void ConnectionZMQ::SendMessageExternal($/;"	f	class:ConnectionZMQ
SendReplyMessage	machine/machine.cc	/^void Machine::SendReplyMessage(Header* header, MessageBuffer* message) {$/;"	f	class:Machine
SequenceSource	fs/block_log.h	/^  explicit SequenceSource(Source<PairSequence*>* source)$/;"	f	class:SequenceSource
SequenceSource	fs/block_log.h	/^class SequenceSource : public Source<UInt64Pair*> {$/;"	c
SerialScheduler	components/scheduler/serial_scheduler.h	/^  SerialScheduler() : safe_version_(1) {}$/;"	f	class:SerialScheduler
SerialScheduler	components/scheduler/serial_scheduler.h	/^class SerialScheduler : public Scheduler {$/;"	c
SetActionSource	components/scheduler/scheduler.h	/^  void SetActionSource(Source<Action*>* requests) {$/;"	f	class:Scheduler
SetActionSource	db/materialization_test.cc	/^  void SetActionSource(Source<Action*>* requests) {$/;"	f	class:Materialization
SetByte	components/store/versioned_kvstore.cc	/^void SetByte(uint64* x, uint32 k, unsigned char c) {$/;"	f
SetCountingStyle	lint	/^  def SetCountingStyle(self, counting_style):$/;"	m	class:_CppLintState
SetFilters	lint	/^  def SetFilters(self, filters):$/;"	m	class:_CppLintState
SetMachine	fs/metadata_store.cc	/^void MetadataStore::SetMachine(Machine* m) {$/;"	f	class:MetadataStore
SetOutputFormat	lint	/^  def SetOutputFormat(self, output_format):$/;"	m	class:_CppLintState
SetParameters	components/scheduler/scheduler.h	/^  void SetParameters(int a, int b) {$/;"	f	class:Scheduler
SetPermissions	fs/fs.h	/^  virtual Status SetPermissions($/;"	f	class:FS
SetPermissions	fs/local_calvinfs.h	/^  virtual Status SetPermissions($/;"	f	class:LocalFileSystem
SetStore	components/scheduler/scheduler.h	/^  void SetStore(const string& store_app_name, const uint32& replica) {$/;"	f	class:Scheduler
SetTest	btree/btree_test.cc	/^void SetTest() {$/;"	f	namespace:btree::__anon12
SetTest	btree/safe_btree_test.cc	/^void SetTest() {$/;"	f	namespace:btree::__anon13
SetVerboseLevel	lint	/^  def SetVerboseLevel(self, level):$/;"	m	class:_CppLintState
Setup	db/client.h	/^  void Setup(Source<Action*>* s, QueueSource<Action*>* q) {$/;"	f	class:MicroClient
Setup	db/materialization_test.cc	/^  void Setup() {$/;"	f	class:PreparedSource
ShortWorkload	machine/thread_pool/thread_pool_test.cc	/^  void ShortWorkload(Header* header) {$/;"	f	class:BenchmarkMessageHandler
ShowScalar	common/utils.cc	/^string ShowScalar(const Scalar& s) {$/;"	f
ShowStatus	machine/thread_pool/thread_pool.cc	/^void ThreadPool::ShowStatus() {$/;"	f	class:ThreadPool
Size	common/atomic.h	/^  inline size_t Size() {$/;"	f	class:AtomicQueue
Size	common/atomic.h	/^  inline uint32 Size() {$/;"	f	class:AtomicMap
Size	common/source.h	/^  int Size() {$/;"	f	class:QueueSource
Size	components/store/btreestore.cc	/^int BTreeStore::Size() {$/;"	f	class:BTreeStore
Size	fs/local_calvinfs.h	/^  virtual uint64 Size() {$/;"	f	class:LocalFileHandle
Slice	common/utils.cc	/^ADD_TYPE_NAME(Slice);$/;"	v
Source	common/source.h	/^class Source {$/;"	c
Spin	common/utils.cc	/^void Spin(double duration) {$/;"	f
SpinUntil	common/utils.cc	/^void SpinUntil(double time) {$/;"	f
SpinUntilNE	common/utils.cc	/^void SpinUntilNE(T& t, const T& v) {$/;"	f
SpinUntilNE	common/utils.cc	/^void SpinUntilNE<MessageBuffer*>($/;"	f
Split	lint	/^  def Split(self):$/;"	m	class:FileInfo
SplitString	common/utils.cc	/^vector<string> SplitString(const string& input, char delimiter) {$/;"	f
Start	btree/btree_bench.cc	/^void BenchmarkRun::Start() {$/;"	f	class:btree::__anon11::BenchmarkRun
Start	components/log/paxos.cc	/^void FakePaxosApp::Start() {$/;"	f	class:FakePaxosApp
Start	components/log/paxos2.cc	/^void Paxos2App::Start() {$/;"	f	class:Paxos2App
Start	components/scheduler/lazy_scheduler.h	/^  virtual void Start() {$/;"	f	class:LazyScheduler
Start	components/scheduler/scheduler.h	/^  virtual void Start() {$/;"	f	class:Scheduler
Start	db/client.h	/^  virtual void Start() {$/;"	f	class:MicroClient
Start	experimental/dag/appender.cc	/^void Appender::Start() {$/;"	f	class:Appender
Start	experimental/dag/appender.h	/^	void Start() {$/;"	f	class:Appender
Start	fs/block_log.h	/^  virtual void Start() {$/;"	f	class:BlockLogApp
Start	fs/block_store.cc	/^void DistributedBlockStoreApp::Start() {$/;"	f	class:DistributedBlockStoreApp
Start	fs/calvinfs_client_app.h	/^  virtual void Start() {$/;"	f	class:CalvinFSClientApp
Start	machine/app/app.h	/^  virtual void Start() {}$/;"	f	class:App
Start	machine/app/reporter.h	/^  virtual void Start() {$/;"	f	class:Reporter
Start	machine/thread_pool/thread_pool.cc	/^void SubPool::Start() {$/;"	f	class:SubPool
StartApp	machine/app/app.h	/^class StartApp {$/;"	c
StartAppInternal	machine/machine.cc	/^void Machine::StartAppInternal(const StartAppProto& sap) {$/;"	f	class:Machine
StartBenchmarkTiming	btree/btree_bench.cc	/^void StartBenchmarkTiming() {$/;"	f	namespace:btree::__anon11
StartReporter	db/materialization_test.cc	/^  void StartReporter() {$/;"	f	class:Materialization
Status	fs/status.h	/^  Status() : error_(NULL), version_(0) {}$/;"	f	class:Status
Status	fs/status.h	/^  Status(const Status& other) : version_(other.version_) {$/;"	f	class:Status
Status	fs/status.h	/^  Status(string* error, uint64 version) : error_(error), version_(version) {}$/;"	f	class:Status
Status	fs/status.h	/^class Status {$/;"	c
StealPart	machine/message_buffer.h	/^  inline MessagePart* StealPart(uint32 i) {$/;"	f	class:MessageBuffer
Stickify	experimental/dag/appender.cc	/^void Appender::Stickify(Sticky *s) {$/;"	f	class:Appender
Stop	btree/btree_bench.cc	/^void BenchmarkRun::Stop() {$/;"	f	class:btree::__anon11::BenchmarkRun
Stop	components/log/paxos.cc	/^void FakePaxosApp::Stop() {$/;"	f	class:FakePaxosApp
Stop	components/log/paxos2.cc	/^void Paxos2App::Stop() {$/;"	f	class:Paxos2App
Stop	components/scheduler/lazy_scheduler.h	/^  virtual void Stop() {$/;"	f	class:LazyScheduler
Stop	components/scheduler/scheduler.h	/^  virtual void Stop() {$/;"	f	class:Scheduler
Stop	db/client.h	/^  virtual void Stop() {$/;"	f	class:MicroClient
Stop	experimental/dag/appender.cc	/^void Appender::Stop() {$/;"	f	class:Appender
Stop	experimental/dag/appender.h	/^	void Stop() {$/;"	f	class:Appender
Stop	fs/block_log.h	/^  virtual void Stop() {$/;"	f	class:BlockLogApp
Stop	machine/app/app.h	/^  virtual void Stop() {}$/;"	f	class:App
Stop	machine/app/reporter.h	/^  virtual void Stop() {$/;"	f	class:Reporter
Stop	machine/machine.h	/^  void Stop() {$/;"	f	class:Machine
StopBenchmarkTiming	btree/btree_bench.cc	/^void StopBenchmarkTiming() {$/;"	f	namespace:btree::__anon11
Stopped	machine/machine.h	/^  bool Stopped() {$/;"	f	class:Machine
Store	components/store/store.h	/^class Store {$/;"	c
StoreApp	components/store/store_app.h	/^  StoreApp() {}$/;"	f	class:StoreApp
StoreApp	components/store/store_app.h	/^  explicit StoreApp(Store* store) : store_(store) {}$/;"	f	class:StoreApp
StoreApp	components/store/store_app.h	/^class StoreApp : public App {$/;"	c
StringToInt	common/utils.cc	/^int StringToInt(const Slice& s) {$/;"	f
StripVersion	components/store/versioned_kvstore.cc	/^Slice StripVersion(const Slice& versioned_key) {$/;"	f
SubPool	machine/thread_pool/thread_pool.cc	/^SubPool::SubPool(MessageHandler* handler, int priority) {$/;"	f	class:SubPool
SubPool	machine/thread_pool/thread_pool.cc	/^class SubPool : public MessageHandler {$/;"	c	file:
SubstringLess	btree/btree_test.cc	/^  SubstringLess() : n(2) {}$/;"	f	struct:btree::__anon12::SubstringLess
SubstringLess	btree/btree_test.cc	/^  SubstringLess(size_t length)$/;"	f	struct:btree::__anon12::SubstringLess
SubstringLess	btree/btree_test.cc	/^struct SubstringLess {$/;"	s	namespace:btree::__anon12	file:
SynchronousNoop	machine/machine_test.cc	/^class SynchronousNoop : public App {$/;"	c	file:
SystemFunction	machine/cluster_manager.cc	/^void* SystemFunction(void* arg) {$/;"	f
TEST	btree/btree_test.cc	/^TEST(Btree, Comparison) {$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, IteratorIncrementBy) {$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, RangeCtorSanity) {$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, SwapKeyCompare) {$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, UpperBoundRegression) {$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, map_int32_1024)   { MapTest<int32_t, 1024>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, map_int32_1032)   { MapTest<int32_t, 1032>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, map_int32_1040)   { MapTest<int32_t, 1040>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, map_int32_1048)   { MapTest<int32_t, 1048>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, map_int32_1056)   { MapTest<int32_t, 1056>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, map_int32_2048)   { MapTest<int32_t, 2048>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, map_int32_256)  { MapTest<int32_t, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, map_int32_4096)   { MapTest<int32_t, 4096>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, map_int64_256)  { MapTest<int64_t, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, map_pair_256)   { MapTest<std::pair<int, int>, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, map_string_1024)   { MapTest<std::string, 1024>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, map_string_2048)   { MapTest<std::string, 2048>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, map_string_256) { MapTest<std::string, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, map_string_4096)   { MapTest<std::string, 4096>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multimap_int32_1024)   { MultiMapTest<int32_t, 1024>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multimap_int32_2048)   { MultiMapTest<int32_t, 2048>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multimap_int32_256)  { MultiMapTest<int32_t, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multimap_int32_4096)   { MultiMapTest<int32_t, 4096>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multimap_int64_256)  { MultiMapTest<int64_t, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multimap_pair_256)   { MultiMapTest<std::pair<int, int>, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multimap_string_1024)   { MultiMapTest<std::string, 1024>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multimap_string_2048)   { MultiMapTest<std::string, 2048>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multimap_string_256) { MultiMapTest<std::string, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multimap_string_4096)   { MultiMapTest<std::string, 4096>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multiset_int32_1024)   { MultiSetTest<int32_t, 1024>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multiset_int32_2048)   { MultiSetTest<int32_t, 2048>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multiset_int32_256)  { MultiSetTest<int32_t, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multiset_int32_4096)   { MultiSetTest<int32_t, 4096>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multiset_int64_256)  { MultiSetTest<int64_t, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multiset_pair_256)   { MultiSetTest<std::pair<int, int>, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multiset_string_1024)   { MultiSetTest<std::string, 1024>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multiset_string_2048)   { MultiSetTest<std::string, 2048>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multiset_string_256) { MultiSetTest<std::string, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, multiset_string_4096)   { MultiSetTest<std::string, 4096>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, set_int32_1024)   { SetTest<int32_t, 1024>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, set_int32_128)  { SetTest<int32_t, 128>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, set_int32_2048)   { SetTest<int32_t, 2048>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, set_int32_256)  { SetTest<int32_t, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, set_int32_32)   { SetTest<int32_t, 32>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, set_int32_4096)   { SetTest<int32_t, 4096>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, set_int32_64)   { SetTest<int32_t, 64>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, set_int64_256)  { SetTest<int64_t, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, set_pair_256)   { SetTest<std::pair<int, int>, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, set_string_1024)   { SetTest<std::string, 1024>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, set_string_2048)   { SetTest<std::string, 2048>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, set_string_256) { SetTest<std::string, 256>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/btree_test.cc	/^TEST(Btree, set_string_4096)   { SetTest<std::string, 4096>(); }$/;"	f	namespace:btree::__anon12
TEST	btree/safe_btree_test.cc	/^TEST(SafeBtree, Comparison) {$/;"	f	namespace:btree::__anon13
TEST	btree/safe_btree_test.cc	/^TEST(SafeBtree, map_int32_256)  { MapTest<int32_t, 256>(); }$/;"	f	namespace:btree::__anon13
TEST	btree/safe_btree_test.cc	/^TEST(SafeBtree, map_int64_256)  { MapTest<int64_t, 256>(); }$/;"	f	namespace:btree::__anon13
TEST	btree/safe_btree_test.cc	/^TEST(SafeBtree, map_pair_256)   { MapTest<std::pair<int, int>, 256>(); }$/;"	f	namespace:btree::__anon13
TEST	btree/safe_btree_test.cc	/^TEST(SafeBtree, map_string_256) { MapTest<std::string, 256>(); }$/;"	f	namespace:btree::__anon13
TEST	btree/safe_btree_test.cc	/^TEST(SafeBtree, set_int32_128)  { SetTest<int32_t, 128>(); }$/;"	f	namespace:btree::__anon13
TEST	btree/safe_btree_test.cc	/^TEST(SafeBtree, set_int32_256)  { SetTest<int32_t, 256>(); }$/;"	f	namespace:btree::__anon13
TEST	btree/safe_btree_test.cc	/^TEST(SafeBtree, set_int32_32)   { SetTest<int32_t, 32>(); }$/;"	f	namespace:btree::__anon13
TEST	btree/safe_btree_test.cc	/^TEST(SafeBtree, set_int32_64)   { SetTest<int32_t, 64>(); }$/;"	f	namespace:btree::__anon13
TEST	btree/safe_btree_test.cc	/^TEST(SafeBtree, set_int64_256)  { SetTest<int64_t, 256>(); }$/;"	f	namespace:btree::__anon13
TEST	btree/safe_btree_test.cc	/^TEST(SafeBtree, set_pair_256)   { SetTest<std::pair<int, int>, 256>(); }$/;"	f	namespace:btree::__anon13
TEST	btree/safe_btree_test.cc	/^TEST(SafeBtree, set_string_256) { SetTest<std::string, 256>(); }$/;"	f	namespace:btree::__anon13
TEST	common/atomic_test.cc	/^TEST(AtomicQueueTest, AtomicQueueCorrectnessTest) {$/;"	f
TEST	common/utils_test.cc	/^TEST(UtilsTest, GFlags) {$/;"	f
TEST	common/utils_test.cc	/^TEST(UtilsTest, SplitString) {$/;"	f
TEST	common/utils_test.cc	/^TEST(UtilsTest, StringToInt) {$/;"	f
TEST	common/utils_test.cc	/^TEST(UtilsTest, TypeNames) {$/;"	f
TEST	common/varint_test.cc	/^TEST(VarintTest, AppendParse) {$/;"	f
TEST	common/vec_test.cc	/^TEST(VecTest, Vec) {$/;"	f
TEST	components/log/local_mem_log_test.cc	/^TEST(LocalMemLogTest, AppendAndNext) {$/;"	f
TEST	components/log/local_mem_log_test.cc	/^TEST(LocalMemLogTest, AppendManyAndSeek) {$/;"	f
TEST	components/log/log_app_test.cc	/^TEST(LogAppTest, AppendOne) {$/;"	f
TEST	components/log/log_app_test.cc	/^TEST(LogAppTest, MoreRemoteReads) {$/;"	f
TEST	components/log/log_app_test.cc	/^TEST(LogAppTest, RemoteRead) {$/;"	f
TEST	components/log/log_app_test.cc	/^TEST(LogAppTest, RemoteReadAction) {$/;"	f
TEST	components/log/paxos2_test.cc	/^TEST(Paxos2Test, DoesItWork) {$/;"	f
TEST	components/log/paxos_test.cc	/^TEST(FakePaxosTest, AppendMany) {$/;"	f
TEST	components/log/paxos_test.cc	/^TEST(FakePaxosTest, AppendOne) {$/;"	f
TEST	components/log/paxos_test.cc	/^TEST(FakePaxosTest, MoreRemoteReads) {$/;"	f
TEST	components/log/paxos_test.cc	/^TEST(FakePaxosTest, RemoteRead) {$/;"	f
TEST	components/store/hybrid_versioned_kvstore_test.cc	/^TEST(HybridVersionedKVStoreTest, BasicTest) {$/;"	f
TEST	components/store/kvstore_test.cc	/^TEST(BTreeStoreTest, EmptyIterator) {$/;"	f
TEST	components/store/kvstore_test.cc	/^TEST(BTreeStoreTest, InsertDelete) {$/;"	f
TEST	components/store/kvstore_test.cc	/^TEST(BTreeStoreTest, Iterator) {$/;"	f
TEST	components/store/kvstore_test.cc	/^TEST(LevelDBStoreTest, InsertDelete) {$/;"	f
TEST	components/store/kvstore_test.cc	/^TEST(LevelDBStoreTest, Iterator) {$/;"	f
TEST	components/store/versioned_kvstore_test.cc	/^TEST(VersionTest, AppendParse) {$/;"	f
TEST	components/store/versioned_kvstore_test.cc	/^TEST(VersionTest, AppendParseWithFlags) {$/;"	f
TEST	components/store/versioned_kvstore_test.cc	/^TEST(VersionTest, SetByteGetByte) {$/;"	f
TEST	components/store/versioned_kvstore_test.cc	/^TEST(VersionedKVStoreTest, BTreeStore) {$/;"	f
TEST	components/store/versioned_kvstore_test.cc	/^TEST(VersionedKVStoreTest, LevelDBStore) {$/;"	f
TEST	experimental/protobuf_reader_test.cc	/^TEST(ProtobufReaderTest, Empty) {$/;"	f
TEST	experimental/protobuf_reader_test.cc	/^TEST(ProtobufReaderTest, ReadFields) {$/;"	f
TEST	fs/block_log_test.cc	/^TEST(BlockLogTest, FivePartitionsThreeReplicas) {$/;"	f
TEST	fs/block_log_test.cc	/^TEST(BlockLogTest, ManyAppends) {$/;"	f
TEST	fs/block_log_test.cc	/^TEST(BlockLogTest, ThreePartitionsOneReplica) {$/;"	f
TEST	fs/block_store_test.cc	/^TEST(BlockStoreTest, Overwrite) {$/;"	f
TEST	fs/block_store_test.cc	/^TEST(BlockStoreTest, PutGet) {$/;"	f
TEST	fs/block_store_test.cc	/^TEST(BlockStoreTest, StartsEmpty) {$/;"	f
TEST	fs/block_store_test.cc	/^TEST(DistributedBlockStore, OneMachine) {$/;"	f
TEST	fs/block_store_test.cc	/^TEST(DistributedBlockStore, ThreeMachines) {$/;"	f
TEST	fs/block_store_test.cc	/^TEST(DistributedBlockStore, ThreeMachinesMoreBlocks) {$/;"	f
TEST	fs/metadata_store_test.cc	/^TEST(MetadataStoreTest, CheckRootDir) {$/;"	f
TEST	fs/metadata_store_test.cc	/^TEST(MetadataStoreTest, CreateAppendResizeRead) {$/;"	f
TEST	fs/metadata_store_test.cc	/^TEST(MetadataStoreTest, MoreActions) {$/;"	f
TEST	fs/metadata_store_test.cc	/^TEST(MetadataStoreTest, OneMachine) {$/;"	f
TEST	fs/metadata_store_test.cc	/^TEST(MetadataStoreTest, TwoMachines) {$/;"	f
TEST	fs/metadata_store_test.cc	/^TEST(MetadataStoreTest, TwoPartitionsTwoReplicas) {$/;"	f
TEST	machine/app/app_test.cc	/^TEST(AppStarterTest, MultipleMachines) {$/;"	f
TEST	machine/app/app_test.cc	/^TEST(AppStarterTest, OneMachine) {$/;"	f
TEST	machine/cluster_config_test.cc	/^TEST(ClusterConfigTest, BadConfigLine) {$/;"	f
TEST	machine/cluster_config_test.cc	/^TEST(ClusterConfigTest, BadMachineID) {$/;"	f
TEST	machine/cluster_config_test.cc	/^TEST(ClusterConfigTest, BadPort) {$/;"	f
TEST	machine/cluster_config_test.cc	/^TEST(ClusterConfigTest, EmptyConfig) {$/;"	f
TEST	machine/cluster_config_test.cc	/^TEST(ClusterConfigTest, EmptyHostname) {$/;"	f
TEST	machine/cluster_config_test.cc	/^TEST(ClusterConfigTest, FromFile) {$/;"	f
TEST	machine/cluster_config_test.cc	/^TEST(ClusterConfigTest, FromFileInvalidFilename) {$/;"	f
TEST	machine/cluster_config_test.cc	/^TEST(ClusterConfigTest, MultiLineConfig) {$/;"	f
TEST	machine/cluster_config_test.cc	/^TEST(ClusterConfigTest, OneLineConfig) {$/;"	f
TEST	machine/cluster_config_test.cc	/^TEST(ClusterConfigTest, RepeatedHostPort) {$/;"	f
TEST	machine/cluster_config_test.cc	/^TEST(ClusterConfigTest, RepeatedMachineIDs) {$/;"	f
TEST	machine/cluster_manager_test.cc	/^TEST(ClusterManagerTest, AddAppTest) {$/;"	f
TEST	machine/cluster_manager_test.cc	/^TEST(ClusterManagerTest, ClusterstatusTest) {$/;"	f
TEST	machine/cluster_manager_test.cc	/^TEST(ClusterManagerTest, DeployAndKillTest) {$/;"	f
TEST	machine/cluster_manager_test.cc	/^TEST(ClusterManagerTest, DeployAndTearDownTest) {$/;"	f
TEST	machine/cluster_manager_test.cc	/^TEST(ClusterManagerTest, FailureCheck) {$/;"	f
TEST	machine/cluster_manager_test.cc	/^TEST(ClusterManagerTest, ListAppsTest) {$/;"	f
TEST	machine/machine_test.cc	/^TEST(MachineTest, SendDataChannelMessageLocal) {$/;"	f
TEST	machine/machine_test.cc	/^TEST(MachineTest, SendDataChannelMessageRemote) {$/;"	f
TEST	machine/machine_test.cc	/^TEST(MachineTest, SendDataPtrMessageLocal) {$/;"	f
TEST	machine/machine_test.cc	/^TEST(MachineTest, SendDataPtrMessageRemote) {$/;"	f
TEST	machine/thread_pool/thread_pool_test.cc	/^TEST(ThreadPoolTest, Correctness) {$/;"	f
TEST	machine/thread_pool/thread_pool_test.cc	/^TEST(ThreadPoolTest, DeadlockFreedom) {$/;"	f
TEST	machine/thread_pool/thread_pool_test.cc	/^TEST(ThreadPoolTest, ThreadPoolDeleteCreateTest) {$/;"	f
TESTS	Makefile	/^TESTS :=$/;"	m
TestAddApp	machine/app/testapp.cc	/^  explicit TestAddApp(int c) : counter_(c) {}$/;"	f	class:TestAddApp
TestAddApp	machine/app/testapp.cc	/^class TestAddApp : public App {$/;"	c	file:
TestAllocator	btree/btree_test.h	/^  TestAllocator() : bytes_used_(NULL) { }$/;"	f	class:btree::TestAllocator
TestAllocator	btree/btree_test.h	/^  TestAllocator(const TestAllocator<U>& x)$/;"	f	class:btree::TestAllocator
TestAllocator	btree/btree_test.h	/^  TestAllocator(int64_t *bytes_used) : bytes_used_(bytes_used) { }$/;"	f	class:btree::TestAllocator
TestAllocator	btree/btree_test.h	/^class TestAllocator : public Alloc {$/;"	c	namespace:btree
TestApp	machine/app/app_test.cc	/^  explicit TestApp(int c) : counter_(c) {}$/;"	f	class:TestApp
TestApp	machine/app/app_test.cc	/^class TestApp : public App {$/;"	c	file:
TestInsertDelete	components/store/kvstore_test.cc	/^void TestInsertDelete() {$/;"	f
TestIterator	components/store/kvstore_test.cc	/^void TestIterator() {$/;"	f
TestLatencyHandler	machine/thread_pool/thread_pool_test.cc	/^  explicit TestLatencyHandler(int size) : counter_(0) {finsh_.resize(size);}$/;"	f	class:TestLatencyHandler
TestLatencyHandler	machine/thread_pool/thread_pool_test.cc	/^class TestLatencyHandler : public MessageHandler {$/;"	c	file:
TestMessageHandler	machine/thread_pool/thread_pool_test.cc	/^  TestMessageHandler() : counter_(0) {}$/;"	f	class:TestMessageHandler
TestMessageHandler	machine/thread_pool/thread_pool_test.cc	/^class TestMessageHandler : public MessageHandler {$/;"	c	file:
ThreadPool	machine/thread_pool/thread_pool.cc	/^ThreadPool::ThreadPool(MessageHandler* handler) {$/;"	f	class:ThreadPool
ThreadPool	machine/thread_pool/thread_pool.h	/^class ThreadPool : public MessageHandler {$/;"	c
ThreadPoolBenchmarkThroughput	machine/thread_pool/thread_pool_test.cc	/^void ThreadPoolBenchmarkThroughput() {$/;"	f
ThreadPoolLatencyDistributionTest	machine/thread_pool/thread_pool_test.cc	/^void ThreadPoolLatencyDistributionTest() {$/;"	f
Thread_count	machine/thread_pool/thread_pool.cc	/^int SubPool::Thread_count() {$/;"	f	class:SubPool
ThrottleSource	common/source.h	/^  ThrottleSource(double delay, Source<T>* base)$/;"	f	class:ThrottleSource
ThrottleSource	common/source.h	/^class ThrottleSource : public Source<T> {$/;"	c
Time	experimental/protobuf_reader_test.cc	/^double Time() {$/;"	f
ToFile	machine/cluster_config.cc	/^void ClusterConfig::ToFile(const string& filename) {$/;"	f	class:ClusterConfig
ToProto	machine/cluster_config.cc	/^void ClusterConfig::ToProto(ClusterConfigProto* out) {$/;"	f	class:ClusterConfig
ToScalar	common/utils.cc	/^Scalar ToScalar(const T& t) {$/;"	f
ToScalar	common/utils.cc	/^Scalar ToScalar<bool>(const bool& b) {$/;"	f
ToScalar	common/utils.cc	/^Scalar ToScalar<double>(const double& b) {$/;"	f
ToScalar	common/utils.cc	/^Scalar ToScalar<float>(const float& b) {$/;"	f
ToScalar	common/utils.cc	/^Scalar ToScalar<int32>(const int32& b) {$/;"	f
ToScalar	common/utils.cc	/^Scalar ToScalar<int64>(const int64& b) {$/;"	f
ToScalar	common/utils.cc	/^Scalar ToScalar<string>(const string& b) {$/;"	f
ToScalar	common/utils.cc	/^Scalar ToScalar<uint32>(const uint32& b) {$/;"	f
ToScalar	common/utils.cc	/^Scalar ToScalar<uint64>(const uint64& b) {$/;"	f
ToString	fs/status.h	/^  string ToString() const {$/;"	f	class:Status
ToString	machine/cluster_config.cc	/^void ClusterConfig::ToString(string* out) {$/;"	f	class:ClusterConfig
TopDir	fs/calvinfs.cc	/^string TopDir(const string& path) {$/;"	f
TpccStore	components/store/tpcc_store.cc	/^TpccStore::TpccStore() {$/;"	f	class:TpccStore
TpccStore	components/store/tpcc_store.cc	/^TpccStore::TpccStore(KVStore* store) {$/;"	f	class:TpccStore
TpccStore	components/store/tpcc_store.h	/^class TpccStore : public Store {$/;"	c
TypeName	common/utils.cc	/^template<typename T> string TypeName() {$/;"	f
TypeWithUnknownName	common/utils_test.cc	/^class TypeWithUnknownName {};$/;"	c	file:
UInt32ToString	common/utils.cc	/^string UInt32ToString(uint32 n) {$/;"	f
UInt64ToString	common/utils.cc	/^string UInt64ToString(uint64 n) {$/;"	f
UTIL_BTREE_BTREE_CONTAINER_H__	btree/btree_container.h	/^#define UTIL_BTREE_BTREE_CONTAINER_H__$/;"	d
UTIL_BTREE_BTREE_H__	btree/btree.h	/^#define UTIL_BTREE_BTREE_H__$/;"	d
UTIL_BTREE_BTREE_MAP_H__	btree/btree_map.h	/^#define UTIL_BTREE_BTREE_MAP_H__$/;"	d
UTIL_BTREE_BTREE_SET_H__	btree/btree_set.h	/^#define UTIL_BTREE_BTREE_SET_H__$/;"	d
UTIL_BTREE_BTREE_TEST_H__	btree/btree_test.h	/^#define UTIL_BTREE_BTREE_TEST_H__$/;"	d
UTIL_BTREE_SAFE_BTREE_H__	btree/safe_btree.h	/^#define UTIL_BTREE_SAFE_BTREE_H__$/;"	d
UTIL_BTREE_SAFE_BTREE_MAP_H__	btree/safe_btree_map.h	/^#define UTIL_BTREE_SAFE_BTREE_MAP_H__$/;"	d
UTIL_BTREE_SAFE_BTREE_SET_H__	btree/safe_btree_set.h	/^#define UTIL_BTREE_SAFE_BTREE_SET_H__$/;"	d
UniqueRandomString	machine/thread_pool/thread_pool_test.cc	/^string UniqueRandomString(const set<string>& used, int length) {$/;"	f
Update	machine/cluster_manager.cc	/^void ClusterManager::Update() {$/;"	f	class:ClusterManager
UpdateIncludeState	lint	/^def UpdateIncludeState(filename, include_state, io=codecs):$/;"	f
V	Makefile	/^V = @$/;"	m
VLLScheduler	components/scheduler/vll_scheduler.h	/^  VLLScheduler() : safe_version_(1) {Cx.resize(ARRAY_SIZE, 0); Cs.resize(ARRAY_SIZE, 0);}$/;"	f	class:VLLScheduler
VLLScheduler	components/scheduler/vll_scheduler.h	/^class VLLScheduler : public Scheduler {$/;"	c
Valid	components/log/local_mem_log.cc	/^bool LocalMemLogReader::Valid() {$/;"	f	class:LocalMemLogReader
Valid	components/store/btreestore.cc	/^  virtual bool Valid() {$/;"	f	class:BTreeIterator
Valid	components/store/leveldbstore.cc	/^  virtual bool Valid() {$/;"	f	class:LevelDBStoreIterator
Value	components/store/btreestore.cc	/^  virtual const string& Value() {$/;"	f	class:BTreeIterator
Value	components/store/leveldbstore.cc	/^  virtual const string& Value() {$/;"	f	class:LevelDBStoreIterator
Vec	common/vec.h	/^  explicit inline Vec(const Vec<T>& vec) : v_(vec.v_) {}$/;"	f	class:Vec
Vec	common/vec.h	/^  explicit inline Vec(const vector<T>& v) : v_(v) {}$/;"	f	class:Vec
Vec	common/vec.h	/^  inline Vec() {}$/;"	f	class:Vec
Vec	common/vec.h	/^class Vec {$/;"	c
Version	components/log/local_mem_log.cc	/^uint64 LocalMemLogReader::Version() {$/;"	f	class:LocalMemLogReader
Version	fs/local_calvinfs.h	/^  virtual uint64 Version() {$/;"	f	class:LocalFileHandle
VersionedKVStore	components/store/versioned_kvstore.cc	/^VersionedKVStore::VersionedKVStore() {$/;"	f	class:VersionedKVStore
VersionedKVStore	components/store/versioned_kvstore.cc	/^VersionedKVStore::VersionedKVStore(KVStore* store) {$/;"	f	class:VersionedKVStore
VersionedKVStore	components/store/versioned_kvstore.h	/^class VersionedKVStore : public Store {$/;"	c
VersionedKVStoreTest	components/store/versioned_kvstore_test.cc	/^  VersionedKVStoreTest() : store_(new VersionedKVStore(new KVStoreType())) {}$/;"	f	class:VersionedKVStoreTest
VersionedKVStoreTest	components/store/versioned_kvstore_test.cc	/^class VersionedKVStoreTest {$/;"	c	file:
WRITESETSIZE	experimental/dag_test.cc	/^#define WRITESETSIZE /;"	d	file:
WRITE_SET_SIZE	experimental/dag/appender.h	/^#define WRITE_SET_SIZE$/;"	d
WorkerThreadMessageHandler	machine/machine.cc	/^  explicit WorkerThreadMessageHandler(Machine* machine) : machine_(machine) {}$/;"	f	class:WorkerThreadMessageHandler
WorkerThreadMessageHandler	machine/machine.cc	/^class WorkerThreadMessageHandler : public MessageHandler {$/;"	c	file:
WriteLock	common/mutex.h	/^  explicit WriteLock(MutexRW* mutex) : mutex_(mutex) {$/;"	f	class:WriteLock
WriteLock	common/mutex.h	/^class WriteLock {$/;"	c
WriteLock	components/scheduler/lock_manager.cc	/^bool LockManager::WriteLock(Action* a, const string& key) {$/;"	f	class:LockManager
WriteStringToFile	fs/calvinfs.cc	/^Status LocalCalvinFS::WriteStringToFile(const string& data, const string& path) {$/;"	f	class:LocalCalvinFS
WriteStringToFile	fs/hdfs.cc	/^Status HadoopFS::WriteStringToFile($/;"	f	class:HadoopFS
WriteStringToFile	fs/local_calvinfs.h	/^  virtual Status WriteStringToFile(const string& data, const string& path) {$/;"	f	class:LocalFileSystem
WriteStringToFile	fs/localfs.cc	/^Status LocalFS::WriteStringToFile($/;"	f	class:LocalFS
Write_Internal	fs/metadata_store.cc	/^void MetadataStore::Write_Internal($/;"	f	class:MetadataStore
ZEROMQ	Makefile	/^ZEROMQ  := $(EXTDIR)\/zeromq$/;"	m
ZMQLDFLAGS	Makefile	/^ZMQLDFLAGS := -lzmq -L$(ZEROMQ)\/src\/.libs$/;"	m
ZMQ_ASSERT	machine/connection/zmq_cpp.h	/^#   define ZMQ_ASSERT(/;"	d
ZMQ_DELETED_FUNCTION	machine/connection/zmq_cpp.h	/^        #define ZMQ_DELETED_FUNCTION /;"	d
ZMQ_DELETED_FUNCTION	machine/connection/zmq_cpp.h	/^        socket_t (const socket_t&) ZMQ_DELETED_FUNCTION;$/;"	m	class:zmq::socket_t
ZMQ_DELETED_FUNCTION	machine/connection/zmq_cpp.h	/^        void operator = (const socket_t&) ZMQ_DELETED_FUNCTION;$/;"	m	class:zmq::socket_t
ZMQ_DELETED_FUNCTION	machine/connection/zmq_cpp.h	/^    #define ZMQ_DELETED_FUNCTION /;"	d
ZMQ_DELETED_FUNCTION	machine/connection/zmq_cpp.h	/^    #define ZMQ_DELETED_FUNCTION$/;"	d
ZMQ_HAS_RVALUE_REFS	machine/connection/zmq_cpp.h	/^        #define ZMQ_HAS_RVALUE_REFS$/;"	d
ZMQ_HAS_RVALUE_REFS	machine/connection/zmq_cpp.h	/^    #define ZMQ_HAS_RVALUE_REFS$/;"	d
_CHECK_MACROS	lint	/^_CHECK_MACROS = [$/;"	v
_CHECK_REPLACEMENT	lint	/^_CHECK_REPLACEMENT = dict([(m, {}) for m in _CHECK_MACROS])$/;"	v
_CPP_HEADERS	lint	/^_CPP_HEADERS = frozenset([$/;"	v
_CPP_SECTION	lint	/^  _CPP_SECTION = 3$/;"	v	class:_IncludeState
_CPP_SYS_HEADER	lint	/^_CPP_SYS_HEADER = 2$/;"	v
_C_SECTION	lint	/^  _C_SECTION = 2$/;"	v	class:_IncludeState
_C_SYS_HEADER	lint	/^_C_SYS_HEADER = 1$/;"	v
_ClassInfo	lint	/^class _ClassInfo(object):$/;"	c
_ClassState	lint	/^class _ClassState(object):$/;"	c
_ClassifyInclude	lint	/^def _ClassifyInclude(fileinfo, include, is_system):$/;"	f
_CollapseStrings	lint	/^  def _CollapseStrings(elided):$/;"	m	class:CleansedLines
_CppLintState	lint	/^class _CppLintState(object):$/;"	c
_DEFAULT_FILTERS	lint	/^_DEFAULT_FILTERS = ['-build\/include_alpha']$/;"	v
_DropCommonSuffixes	lint	/^def _DropCommonSuffixes(filename):$/;"	f
_ERROR_CATEGORIES	lint	/^_ERROR_CATEGORIES = [$/;"	v
_Filters	lint	/^def _Filters():$/;"	f
_FunctionState	lint	/^class _FunctionState(object):$/;"	c
_GetTextInside	lint	/^def _GetTextInside(text, start_pattern):$/;"	f
_HEADERS_CONTAINING_TEMPLATES	lint	/^_HEADERS_CONTAINING_TEMPLATES = ($/;"	v
_INITIAL_SECTION	lint	/^  _INITIAL_SECTION = 0$/;"	v	class:_IncludeState
_IncludeError	lint	/^class _IncludeError(Exception):$/;"	c
_IncludeState	lint	/^class _IncludeState(dict):$/;"	c
_IsTestFilename	lint	/^def _IsTestFilename(filename):$/;"	f
_LIKELY_MY_HEADER	lint	/^_LIKELY_MY_HEADER = 3$/;"	v
_MY_H_SECTION	lint	/^  _MY_H_SECTION = 1$/;"	v	class:_IncludeState
_NORMAL_TRIGGER	lint	/^  _NORMAL_TRIGGER = 250  # for --v=0, 500 for --v=1, etc.$/;"	v	class:_FunctionState
_OTHER_HEADER	lint	/^_OTHER_HEADER = 5$/;"	v
_OTHER_H_SECTION	lint	/^  _OTHER_H_SECTION = 4$/;"	v	class:_IncludeState
_OutputFormat	lint	/^def _OutputFormat():$/;"	f
_POSSIBLE_MY_HEADER	lint	/^_POSSIBLE_MY_HEADER = 4$/;"	v
_RE_FIRST_COMPONENT	lint	/^_RE_FIRST_COMPONENT = re.compile(r'^[^-_.]+')$/;"	v
_RE_PATTERN_CLEANSE_LINE_C_COMMENTS	lint	/^_RE_PATTERN_CLEANSE_LINE_C_COMMENTS = re.compile($/;"	v
_RE_PATTERN_CLEANSE_LINE_DOUBLE_QUOTES	lint	/^_RE_PATTERN_CLEANSE_LINE_DOUBLE_QUOTES = re.compile(r'"[^"]*"')$/;"	v
_RE_PATTERN_CLEANSE_LINE_ESCAPES	lint	/^_RE_PATTERN_CLEANSE_LINE_ESCAPES = re.compile($/;"	v
_RE_PATTERN_CLEANSE_LINE_SINGLE_QUOTES	lint	/^_RE_PATTERN_CLEANSE_LINE_SINGLE_QUOTES = re.compile(r"'.'")$/;"	v
_RE_PATTERN_EXPLICIT_MAKEPAIR	lint	/^_RE_PATTERN_EXPLICIT_MAKEPAIR = re.compile(r'\\bmake_pair\\s*<')$/;"	v
_RE_PATTERN_INCLUDE	lint	/^_RE_PATTERN_INCLUDE = re.compile(r'^\\s*#\\s*include\\s*([<"])([^>"]*)[>"].*$')$/;"	v
_RE_PATTERN_INCLUDE_NEW_STYLE	lint	/^_RE_PATTERN_INCLUDE_NEW_STYLE = re.compile(r'#include +"[^\/]+\\.h"')$/;"	v
_RE_PATTERN_INVALID_INCREMENT	lint	/^_RE_PATTERN_INVALID_INCREMENT = re.compile($/;"	v
_RE_PATTERN_STRING	lint	/^_RE_PATTERN_STRING = re.compile(r'\\bstring\\b')$/;"	v
_RE_PATTERN_TODO	lint	/^_RE_PATTERN_TODO = re.compile(r'^\/\/(\\s*)TODO(\\(.+?\\))?:?(\\s|$)?')$/;"	v
_RE_SUPPRESSION	lint	/^_RE_SUPPRESSION = re.compile(r'\\bNOLINT\\b(\\([^)]*\\))?')$/;"	v
_SECTION_NAMES	lint	/^  _SECTION_NAMES = {$/;"	v	class:_IncludeState
_STL_HEADERS	lint	/^_STL_HEADERS = frozenset([$/;"	v
_SetCountingStyle	lint	/^def _SetCountingStyle(level):$/;"	f
_SetFilters	lint	/^def _SetFilters(filters):$/;"	f
_SetOutputFormat	lint	/^def _SetOutputFormat(output_format):$/;"	f
_SetVerboseLevel	lint	/^def _SetVerboseLevel(level):$/;"	f
_ShouldPrintError	lint	/^def _ShouldPrintError(category, confidence, linenum):$/;"	f
_TEST_TRIGGER	lint	/^  _TEST_TRIGGER = 400    # about 50% more than _NORMAL_TRIGGER.$/;"	v	class:_FunctionState
_TYPE_NAMES	lint	/^  _TYPE_NAMES = {$/;"	v	class:_IncludeState
_VerboseLevel	lint	/^def _VerboseLevel():$/;"	f
__ZMQ_HPP_INCLUDED__	machine/connection/zmq_cpp.h	/^#define __ZMQ_HPP_INCLUDED__$/;"	d
__init__	lint	/^  def __init__(self):$/;"	m	class:_ClassState
__init__	lint	/^  def __init__(self):$/;"	m	class:_CppLintState
__init__	lint	/^  def __init__(self):$/;"	m	class:_FunctionState
__init__	lint	/^  def __init__(self):$/;"	m	class:_IncludeState
__init__	lint	/^  def __init__(self, filename):$/;"	m	class:FileInfo
__init__	lint	/^  def __init__(self, lines):$/;"	m	class:CleansedLines
__init__	lint	/^  def __init__(self, name, clean_lines, linenum):$/;"	m	class:_ClassInfo
_cpplint_state	lint	/^_cpplint_state = _CppLintState()$/;"	v
_error_suppressions	lint	/^_error_suppressions = {}$/;"	v
_re_pattern_algorithm_header	lint	/^_re_pattern_algorithm_header = []$/;"	v
_re_pattern_templates	lint	/^_re_pattern_templates = []$/;"	v
_regexp_compile_cache	lint	/^_regexp_compile_cache = {}$/;"	v
a_	components/log/log_app_test.cc	/^  Machine a_;$/;"	m	class:LogAppTest	file:
aborted_	fs/metadata_store.cc	/^  bool aborted_;$/;"	m	class:ExecutionContext	file:
accum_micros	btree/btree_bench.cc	/^  int64_t accum_micros;$/;"	m	struct:btree::__anon11::BenchmarkRun	file:
action	fs/block_log_test.cc	/^  Action* action;$/;"	m	struct:LogEntry	file:
action_	components/scheduler/lock_manager.h	/^    Action* action_;  \/\/ Pointer to action requesting the lock.$/;"	m	struct:LockManager::LockRequest
action_count_	fs/calvinfs_client_app.h	/^  atomic<int> action_count_;$/;"	m	class:CalvinFSClientApp
action_requests_	components/scheduler/scheduler.h	/^  Source<Action*>* action_requests_;$/;"	m	class:Scheduler
actions_	db/materialization_test.cc	/^  vector<T> actions_;$/;"	m	class:PreparedSource	file:
actions_	fs/block_log_test.cc	/^  vector<Source<Action*>*> actions_;$/;"	m	class:BlockLogTest	file:
active_actions_	components/scheduler/locking_scheduler.h	/^  std::set<uint64> active_actions_;$/;"	m	class:LockingScheduler
allocate	btree/btree_test.h	/^  pointer allocate(size_type n, std::allocator<void>::const_pointer hint = 0) {$/;"	f	class:btree::TestAllocator
allocated_	components/log/local_mem_log.h	/^  uint64 allocated_;$/;"	m	class:LocalMemLog
allocator_type	btree/btree.h	/^  typedef Alloc allocator_type;$/;"	t	struct:btree::btree_common_params
allocator_type	btree/btree.h	/^  typedef typename Params::allocator_type allocator_type;$/;"	t	class:btree::btree
allocator_type	btree/btree_container.h	/^  typedef typename Tree::allocator_type allocator_type;$/;"	t	class:btree::btree_container
allocator_type	btree/btree_container.h	/^  typedef typename Tree::allocator_type allocator_type;$/;"	t	class:btree::btree_map_container
allocator_type	btree/btree_container.h	/^  typedef typename Tree::allocator_type allocator_type;$/;"	t	class:btree::btree_multi_container
allocator_type	btree/btree_container.h	/^  typedef typename Tree::allocator_type allocator_type;$/;"	t	class:btree::btree_unique_container
allocator_type	btree/btree_map.h	/^  typedef typename btree_type::allocator_type allocator_type;$/;"	t	class:btree::btree_map
allocator_type	btree/btree_map.h	/^  typedef typename btree_type::allocator_type allocator_type;$/;"	t	class:btree::btree_multimap
allocator_type	btree/btree_set.h	/^  typedef typename btree_type::allocator_type allocator_type;$/;"	t	class:btree::btree_multiset
allocator_type	btree/btree_set.h	/^  typedef typename btree_type::allocator_type allocator_type;$/;"	t	class:btree::btree_set
allocator_type	btree/safe_btree.h	/^  typedef typename btree_type::allocator_type allocator_type;$/;"	t	class:btree::safe_btree
allocator_type	btree/safe_btree_map.h	/^  typedef typename btree_type::allocator_type allocator_type;$/;"	t	class:btree::safe_btree_map
allocator_type	btree/safe_btree_set.h	/^  typedef typename btree_type::allocator_type allocator_type;$/;"	t	class:btree::safe_btree_set
app_data_	machine/machine.h	/^  AtomicMap<string, string> app_data_;$/;"	m	class:Machine
apps_	machine/machine.h	/^  map<string, App*> apps_;$/;"	m	class:Machine
assigned_thread_count_	machine/thread_pool/thread_pool.cc	/^  int assigned_thread_count_;$/;"	m	class:SubPool	file:
average_bytes_per_value	btree/btree.h	/^  static double average_bytes_per_value() {$/;"	f	class:btree::btree
average_bytes_per_value	btree/btree_container.h	/^  static double average_bytes_per_value() {$/;"	f	class:btree::btree_container
average_bytes_per_value	btree/safe_btree.h	/^  static double average_bytes_per_value() {$/;"	f	class:btree::safe_btree
b_	components/log/log_app_test.cc	/^  Machine b_;$/;"	m	class:LogAppTest	file:
back_	common/atomic.h	/^  uint32 back_;      \/\/ First offset following all elements.$/;"	m	class:AtomicQueue
back_mutex_	common/atomic.h	/^  Mutex back_mutex_;$/;"	m	class:AtomicQueue
base_	common/source.h	/^  Source<T>* base_;$/;"	m	class:LimitSource
base_	common/source.h	/^  Source<T>* base_;$/;"	m	class:ThrottleSource
base_checker	btree/btree_test.h	/^  base_checker()$/;"	f	class:btree::base_checker
base_checker	btree/btree_test.h	/^  base_checker(InputIterator b, InputIterator e)$/;"	f	class:btree::base_checker
base_checker	btree/btree_test.h	/^  base_checker(const self_type &x)$/;"	f	class:btree::base_checker
base_checker	btree/btree_test.h	/^class base_checker {$/;"	c	namespace:btree
base_fields	btree/btree.h	/^  struct base_fields {$/;"	s	class:btree::btree_node
base_fields	btree/btree.h	/^  typedef typename node_type::base_fields base_fields;$/;"	t	class:btree::btree
basename	scripts/script_utils.cc	/^char *basename(char *path) {$/;"	f
batch_cnt_	fs/block_log.h	/^  uint64 batch_cnt_;$/;"	m	class:BlockLogApp
batch_sequence_	fs/block_log.h	/^  Source<UInt64Pair*>* batch_sequence_;$/;"	m	class:BlockLogApp
batch_votes_	fs/block_log.h	/^  map<uint64, int> batch_votes_;$/;"	m	class:BlockLogApp
begin	btree/btree.h	/^  const_iterator begin() const {$/;"	f	class:btree::btree
begin	btree/btree.h	/^  iterator begin() {$/;"	f	class:btree::btree
begin	btree/btree_container.h	/^  const_iterator begin() const { return tree_.begin(); }$/;"	f	class:btree::btree_container
begin	btree/btree_container.h	/^  iterator begin() { return tree_.begin(); }$/;"	f	class:btree::btree_container
begin	btree/btree_test.h	/^  const_iterator begin() const { return tree_.begin(); }$/;"	f	class:btree::base_checker
begin	btree/btree_test.h	/^  iterator begin() { return tree_.begin(); }$/;"	f	class:btree::base_checker
begin	btree/safe_btree.h	/^  const_iterator begin() const {$/;"	f	class:btree::safe_btree
begin	btree/safe_btree.h	/^  iterator begin() {$/;"	f	class:btree::safe_btree
benchmark_func	btree/btree_bench.cc	/^  void (*benchmark_func)(int);$/;"	m	struct:btree::__anon11::BenchmarkRun	file:
benchmark_name	btree/btree_bench.cc	/^  const char *benchmark_name;$/;"	m	struct:btree::__anon11::BenchmarkRun	file:
benchmark_values	btree/btree_test.h	/^DECLARE_int32(benchmark_values);$/;"	v
big_	btree/btree.h	/^struct big_ {$/;"	s	namespace:btree
binary_	machine/cluster_manager.h	/^  string binary_;$/;"	m	class:ClusterManager
binary_search_compare_to	btree/btree.h	/^  int binary_search_compare_to($/;"	f	class:btree::btree_node
binary_search_compare_to_type	btree/btree.h	/^    key_type, self_type, key_compare> binary_search_compare_to_type;$/;"	t	class:btree::btree_node
binary_search_plain_compare	btree/btree.h	/^  int binary_search_plain_compare($/;"	f	class:btree::btree_node
binary_search_plain_compare_type	btree/btree.h	/^    key_type, self_type, key_compare> binary_search_plain_compare_type;$/;"	t	class:btree::btree_node
binary_search_type	btree/btree.h	/^    binary_search_plain_compare_type>::type binary_search_type;$/;"	t	class:btree::btree_node
bind	machine/connection/zmq_cpp.h	/^        inline void bind (const char *addr_)$/;"	f	class:zmq::socket_t
bl_	fs/block_log_test.cc	/^  vector<BlockLogApp*> bl_;$/;"	m	class:BlockLogTest	file:
blocked_actions	components/scheduler/vll_scheduler.h	/^  int blocked_actions;$/;"	m	class:VLLScheduler
blocks_	fs/block_log.h	/^  BlockStore* blocks_;$/;"	m	class:BlockLogApp
blocks_	fs/block_store.h	/^  BlockStore* blocks_;$/;"	m	class:BlockStoreApp
blocks_	fs/block_store.h	/^  leveldb::DB* blocks_;$/;"	m	class:LevelDBBlockStore
blocks_	fs/calvinfs.h	/^  BlockStore* blocks_;$/;"	m	class:LocalCalvinFS
blocks_	fs/calvinfs_client_app.h	/^  DistributedBlockStoreApp* blocks_;$/;"	m	class:CalvinFSClientApp
blocks_	fs/local_calvinfs.h	/^  BlockStore* blocks_;$/;"	m	class:LocalFileSystem
bluckets_	fs/calvinfs.h	/^  map<pair<uint64, uint64>, uint64> bluckets_;$/;"	m	class:CalvinFSConfigMap
bool_compare	btree/btree.h	/^  static bool bool_compare(const Compare &comp, const Key &x, const Key &y) {$/;"	f	struct:btree::btree_key_comparer
btree	btree/btree.h	/^class btree : public Params::key_compare {$/;"	c	namespace:btree
btree	btree/btree.h	/^namespace btree {$/;"	n
btree	btree/btree_bench.cc	/^namespace btree {$/;"	n	file:
btree	btree/btree_container.h	/^namespace btree {$/;"	n
btree	btree/btree_map.h	/^namespace btree {$/;"	n
btree	btree/btree_set.h	/^namespace btree {$/;"	n
btree	btree/btree_test.cc	/^namespace btree {$/;"	n	file:
btree	btree/btree_test.h	/^namespace btree {$/;"	n
btree	btree/safe_btree.h	/^namespace btree {$/;"	n
btree	btree/safe_btree_map.h	/^namespace btree {$/;"	n
btree	btree/safe_btree_set.h	/^namespace btree {$/;"	n
btree	btree/safe_btree_test.cc	/^namespace btree {$/;"	n	file:
btree_binary_search_compare_to	btree/btree.h	/^struct btree_binary_search_compare_to {$/;"	s	namespace:btree
btree_binary_search_plain_compare	btree/btree.h	/^struct btree_binary_search_plain_compare {$/;"	s	namespace:btree
btree_common_params	btree/btree.h	/^struct btree_common_params {$/;"	s	namespace:btree
btree_compare_keys	btree/btree.h	/^static bool btree_compare_keys($/;"	f	namespace:btree
btree_container	btree/btree_container.h	/^  btree_container(const key_compare &comp, const allocator_type &alloc)$/;"	f	class:btree::btree_container
btree_container	btree/btree_container.h	/^  btree_container(const self_type &x)$/;"	f	class:btree::btree_container
btree_container	btree/btree_container.h	/^class btree_container {$/;"	c	namespace:btree
btree_internal_locate_compare_to	btree/btree.h	/^struct btree_internal_locate_compare_to {$/;"	s	namespace:btree
btree_internal_locate_plain_compare	btree/btree.h	/^struct btree_internal_locate_plain_compare {$/;"	s	namespace:btree
btree_is_key_compare_to	btree/btree.h	/^struct btree_is_key_compare_to$/;"	s	namespace:btree
btree_iterator	btree/btree.h	/^  btree_iterator()$/;"	f	struct:btree::btree_iterator
btree_iterator	btree/btree.h	/^  btree_iterator(Node *n, int p)$/;"	f	struct:btree::btree_iterator
btree_iterator	btree/btree.h	/^  btree_iterator(const iterator &x)$/;"	f	struct:btree::btree_iterator
btree_iterator	btree/btree.h	/^struct btree_iterator {$/;"	s	namespace:btree
btree_key_compare_to_adapter	btree/btree.h	/^  btree_key_compare_to_adapter($/;"	f	struct:btree::btree_key_compare_to_adapter
btree_key_compare_to_adapter	btree/btree.h	/^  btree_key_compare_to_adapter() { }$/;"	f	struct:btree::btree_key_compare_to_adapter
btree_key_compare_to_adapter	btree/btree.h	/^  btree_key_compare_to_adapter() {}$/;"	f	struct:btree::btree_key_compare_to_adapter
btree_key_compare_to_adapter	btree/btree.h	/^  btree_key_compare_to_adapter(const Compare &c) : Compare(c) { }$/;"	f	struct:btree::btree_key_compare_to_adapter
btree_key_compare_to_adapter	btree/btree.h	/^  btree_key_compare_to_adapter(const btree_key_compare_to_adapter<Compare> &c)$/;"	f	struct:btree::btree_key_compare_to_adapter
btree_key_compare_to_adapter	btree/btree.h	/^  btree_key_compare_to_adapter(const std::greater<std::string>&) {}$/;"	f	struct:btree::btree_key_compare_to_adapter
btree_key_compare_to_adapter	btree/btree.h	/^  btree_key_compare_to_adapter(const std::less<std::string>&) {}$/;"	f	struct:btree::btree_key_compare_to_adapter
btree_key_compare_to_adapter	btree/btree.h	/^struct btree_key_compare_to_adapter : Compare {$/;"	s	namespace:btree
btree_key_compare_to_adapter	btree/btree.h	/^struct btree_key_compare_to_adapter<std::greater<std::string> >$/;"	s	namespace:btree
btree_key_compare_to_adapter	btree/btree.h	/^struct btree_key_compare_to_adapter<std::less<std::string> >$/;"	s	namespace:btree
btree_key_compare_to_tag	btree/btree.h	/^struct btree_key_compare_to_tag {$/;"	s	namespace:btree
btree_key_comparer	btree/btree.h	/^  btree_key_comparer() {}$/;"	f	struct:btree::btree_key_comparer
btree_key_comparer	btree/btree.h	/^  btree_key_comparer(Compare c) : comp(c) {}$/;"	f	struct:btree::btree_key_comparer
btree_key_comparer	btree/btree.h	/^struct btree_key_comparer {$/;"	s	namespace:btree
btree_key_comparer	btree/btree.h	/^struct btree_key_comparer<Key, Compare, true> {$/;"	s	namespace:btree
btree_linear_search_compare_to	btree/btree.h	/^struct btree_linear_search_compare_to {$/;"	s	namespace:btree
btree_linear_search_plain_compare	btree/btree.h	/^struct btree_linear_search_plain_compare {$/;"	s	namespace:btree
btree_map	btree/btree_map.h	/^  btree_map(InputIterator b, InputIterator e,$/;"	f	class:btree::btree_map
btree_map	btree/btree_map.h	/^  btree_map(const key_compare &comp = key_compare(),$/;"	f	class:btree::btree_map
btree_map	btree/btree_map.h	/^  btree_map(const self_type &x)$/;"	f	class:btree::btree_map
btree_map	btree/btree_map.h	/^class btree_map : public btree_map_container<$/;"	c	namespace:btree
btree_map_container	btree/btree_container.h	/^  btree_map_container(InputIterator b, InputIterator e,$/;"	f	class:btree::btree_map_container
btree_map_container	btree/btree_container.h	/^  btree_map_container(const key_compare &comp = key_compare(),$/;"	f	class:btree::btree_map_container
btree_map_container	btree/btree_container.h	/^  btree_map_container(const self_type &x)$/;"	f	class:btree::btree_map_container
btree_map_container	btree/btree_container.h	/^class btree_map_container : public btree_unique_container<Tree> {$/;"	c	namespace:btree
btree_map_params	btree/btree.h	/^struct btree_map_params$/;"	s	namespace:btree
btree_multi_container	btree/btree_container.h	/^  btree_multi_container(InputIterator b, InputIterator e,$/;"	f	class:btree::btree_multi_container
btree_multi_container	btree/btree_container.h	/^  btree_multi_container(const key_compare &comp = key_compare(),$/;"	f	class:btree::btree_multi_container
btree_multi_container	btree/btree_container.h	/^  btree_multi_container(const self_type &x)$/;"	f	class:btree::btree_multi_container
btree_multi_container	btree/btree_container.h	/^class btree_multi_container : public btree_container<Tree> {$/;"	c	namespace:btree
btree_multimap	btree/btree_map.h	/^  btree_multimap(InputIterator b, InputIterator e,$/;"	f	class:btree::btree_multimap
btree_multimap	btree/btree_map.h	/^  btree_multimap(const key_compare &comp = key_compare(),$/;"	f	class:btree::btree_multimap
btree_multimap	btree/btree_map.h	/^  btree_multimap(const self_type &x)$/;"	f	class:btree::btree_multimap
btree_multimap	btree/btree_map.h	/^class btree_multimap : public btree_multi_container<$/;"	c	namespace:btree
btree_multiset	btree/btree_set.h	/^  btree_multiset(InputIterator b, InputIterator e,$/;"	f	class:btree::btree_multiset
btree_multiset	btree/btree_set.h	/^  btree_multiset(const key_compare &comp = key_compare(),$/;"	f	class:btree::btree_multiset
btree_multiset	btree/btree_set.h	/^  btree_multiset(const self_type &x)$/;"	f	class:btree::btree_multiset
btree_multiset	btree/btree_set.h	/^class btree_multiset : public btree_multi_container<$/;"	c	namespace:btree
btree_node	btree/btree.h	/^class btree_node {$/;"	c	namespace:btree
btree_set	btree/btree_set.h	/^  btree_set(InputIterator b, InputIterator e,$/;"	f	class:btree::btree_set
btree_set	btree/btree_set.h	/^  btree_set(const key_compare &comp = key_compare(),$/;"	f	class:btree::btree_set
btree_set	btree/btree_set.h	/^  btree_set(const self_type &x)$/;"	f	class:btree::btree_set
btree_set	btree/btree_set.h	/^class btree_set : public btree_unique_container<$/;"	c	namespace:btree
btree_set_params	btree/btree.h	/^struct btree_set_params$/;"	s	namespace:btree
btree_swap_helper	btree/btree.h	/^inline void btree_swap_helper(T &a, T &b) {$/;"	f	namespace:btree
btree_type	btree/btree_map.h	/^  typedef btree<params_type> btree_type;$/;"	t	class:btree::btree_map
btree_type	btree/btree_map.h	/^  typedef btree<params_type> btree_type;$/;"	t	class:btree::btree_multimap
btree_type	btree/btree_set.h	/^  typedef btree<params_type> btree_type;$/;"	t	class:btree::btree_multiset
btree_type	btree/btree_set.h	/^  typedef btree<params_type> btree_type;$/;"	t	class:btree::btree_set
btree_type	btree/safe_btree.h	/^  typedef btree<Params> btree_type;$/;"	t	class:btree::safe_btree
btree_type	btree/safe_btree_map.h	/^  typedef safe_btree<params_type> btree_type;$/;"	t	class:btree::safe_btree_map
btree_type	btree/safe_btree_set.h	/^  typedef safe_btree<params_type> btree_type;$/;"	t	class:btree::safe_btree_set
btree_unique_container	btree/btree_container.h	/^  btree_unique_container(InputIterator b, InputIterator e,$/;"	f	class:btree::btree_unique_container
btree_unique_container	btree/btree_container.h	/^  btree_unique_container(const key_compare &comp = key_compare(),$/;"	f	class:btree::btree_unique_container
btree_unique_container	btree/btree_container.h	/^  btree_unique_container(const self_type &x)$/;"	f	class:btree::btree_unique_container
btree_unique_container	btree/btree_container.h	/^class btree_unique_container : public btree_container<Tree> {$/;"	c	namespace:btree
btree_upper_bound_adapter	btree/btree.h	/^  btree_upper_bound_adapter(Compare c) : Compare(c) {}$/;"	f	struct:btree::btree_upper_bound_adapter
btree_upper_bound_adapter	btree/btree.h	/^struct btree_upper_bound_adapter : public Compare {$/;"	s	namespace:btree
btree_upper_bound_compare_to_adapter	btree/btree.h	/^  btree_upper_bound_compare_to_adapter(CompareTo c) : CompareTo(c) {}$/;"	f	struct:btree::btree_upper_bound_compare_to_adapter
btree_upper_bound_compare_to_adapter	btree/btree.h	/^struct btree_upper_bound_compare_to_adapter : public CompareTo {$/;"	s	namespace:btree
buffer	machine/message_buffer.h	/^  inline const Slice& buffer() const {$/;"	f	class:MessagePart
buffer_	machine/message_buffer.h	/^  Slice buffer_;$/;"	m	class:MessagePart
bytes_used	btree/btree.h	/^  size_type bytes_used() const {$/;"	f	class:btree::btree
bytes_used	btree/btree_container.h	/^  size_type bytes_used() const { return tree_.bytes_used(); }$/;"	f	class:btree::btree_container
bytes_used	btree/btree_test.h	/^  int64_t* bytes_used() const { return bytes_used_; }$/;"	f	class:btree::TestAllocator
bytes_used	btree/btree_test.h	/^  size_type bytes_used() const { return tree_.bytes_used(); }$/;"	f	class:btree::base_checker
bytes_used	btree/safe_btree.h	/^  size_type bytes_used() const { return tree_.bytes_used(); }$/;"	f	class:btree::safe_btree
bytes_used_	btree/btree_test.h	/^  int64_t *bytes_used_;$/;"	m	class:btree::TestAllocator
calvin_path_	machine/cluster_manager.h	/^  string calvin_path_;$/;"	m	class:ClusterManager
capacity_	fs/calvinfs_client_app.h	/^  atomic<int> capacity_;$/;"	m	class:CalvinFSClientApp
checker_	btree/btree_test.h	/^  CheckerType checker_;$/;"	m	class:btree::base_checker
child	btree/btree.h	/^  btree_node* child(int i) const { return fields_.children[i]; }$/;"	f	class:btree::btree_node
children	btree/btree.h	/^    btree_node *children[kNodeValues + 1];$/;"	m	struct:btree::btree_node::internal_fields
clear	btree/btree_container.h	/^  void clear() {$/;"	f	class:btree::btree_container
clear	btree/btree_test.h	/^  void clear() {$/;"	f	class:btree::base_checker
clear	btree/safe_btree.h	/^  void clear() {$/;"	f	class:btree::safe_btree
clear	machine/message_buffer.h	/^  inline void clear() {$/;"	f	class:MessageBuffer
close	machine/connection/zmq_cpp.h	/^        inline void close()$/;"	f	class:zmq::context_t
close	machine/connection/zmq_cpp.h	/^        inline void close()$/;"	f	class:zmq::socket_t
codecs	lint	/^import codecs$/;"	i
comp	btree/btree.h	/^  Compare comp;$/;"	m	struct:btree::btree_key_comparer
compare_keys	btree/btree.h	/^  bool compare_keys(const key_type &x, const key_type &y) const {$/;"	f	class:btree::btree
compilation_database_folder	.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
completed	machine/thread_pool/thread_pool_test.cc	/^  const set<string>& completed() { return completed_; }$/;"	f	class:TestMessageHandler
completed_	components/scheduler/locking_scheduler.h	/^  AtomicQueue<Action*> completed_;$/;"	m	class:LockingScheduler
completed_	components/scheduler/vll_scheduler.h	/^  AtomicQueue<Action*> completed_;$/;"	m	class:VLLScheduler
completed_	machine/thread_pool/thread_pool_test.cc	/^  set<string> completed_;$/;"	m	class:TestMessageHandler	file:
components	experimental/lazy_store.h	/^namespace components {$/;"	n
config	fs/calvinfs.h	/^  const CalvinFSConfig& config() { return config_; }$/;"	f	class:CalvinFSConfigMap
config	machine/machine.h	/^  inline const ClusterConfig& config() { return config_; }$/;"	f	class:Machine
config_	fs/block_log.h	/^  CalvinFSConfigMap* config_;$/;"	m	class:BlockLogApp
config_	fs/block_log_test.cc	/^  CalvinFSConfigMap config_;$/;"	m	class:BlockLogTest	file:
config_	fs/block_store.h	/^  CalvinFSConfigMap* config_;$/;"	m	class:DistributedBlockStoreApp
config_	fs/calvinfs.h	/^  CalvinFSConfig config_;$/;"	m	class:CalvinFSConfigMap
config_	fs/calvinfs_client_app.h	/^  CalvinFSConfigMap* config_;$/;"	m	class:CalvinFSClientApp
config_	fs/metadata_store.cc	/^  CalvinFSConfigMap* config_;$/;"	m	class:DistributedExecutionContext	file:
config_	fs/metadata_store.h	/^  CalvinFSConfigMap* config_;$/;"	m	class:MetadataStore
config_	fs/metadata_store_test.cc	/^  CalvinFSConfigMap config_;$/;"	m	class:MetadataStoreTest	file:
config_	machine/cluster_manager.h	/^  ClusterConfig config_;$/;"	m	class:ClusterManager
config_	machine/connection/connection.h	/^  ClusterConfig config_;$/;"	m	class:Connection
config_	machine/external_connection.h	/^  ClusterConfig config_;$/;"	m	class:ExternalConnection
config_	machine/machine.h	/^  ClusterConfig config_;$/;"	m	class:Machine
config_file_	machine/cluster_manager.h	/^  string config_file_;$/;"	m	class:ClusterManager
connect	machine/connection/zmq_cpp.h	/^        inline void connect (const char *addr_)$/;"	f	class:zmq::socket_t
connected	machine/connection/zmq_cpp.h	/^        inline bool connected()$/;"	f	class:zmq::socket_t
connection_	machine/machine.h	/^  Connection* connection_;$/;"	m	class:Machine
connection_count_	machine/connection/connection_zmq.cc	/^int connection_count_ = 0;$/;"	v
const_iterator	btree/btree.h	/^    const_node, const_reference, const_pointer> const_iterator;$/;"	t	struct:btree::btree_iterator
const_iterator	btree/btree.h	/^  typedef typename iterator::const_iterator const_iterator;$/;"	t	class:btree::btree
const_iterator	btree/btree_container.h	/^  typedef typename Tree::const_iterator const_iterator;$/;"	t	class:btree::btree_container
const_iterator	btree/btree_container.h	/^  typedef typename Tree::const_iterator const_iterator;$/;"	t	class:btree::btree_multi_container
const_iterator	btree/btree_container.h	/^  typedef typename Tree::const_iterator const_iterator;$/;"	t	class:btree::btree_unique_container
const_iterator	btree/btree_test.h	/^  typedef typename TreeType::const_iterator const_iterator;$/;"	t	class:btree::base_checker
const_iterator	btree/safe_btree.h	/^    const self_type, tree_const_iterator> const_iterator;$/;"	t	class:btree::safe_btree
const_iterator	btree/safe_btree.h	/^  typedef typename Tree::const_iterator const_iterator;$/;"	t	class:btree::safe_btree_iterator
const_node	btree/btree.h	/^  typedef const Node const_node;$/;"	t	struct:btree::btree_iterator
const_pointer	btree/btree.h	/^  typedef const value_type* const_pointer;$/;"	t	struct:btree::btree_map_params
const_pointer	btree/btree.h	/^  typedef const value_type* const_pointer;$/;"	t	struct:btree::btree_set_params
const_pointer	btree/btree.h	/^  typedef typename Params::const_pointer const_pointer;$/;"	t	class:btree::btree
const_pointer	btree/btree.h	/^  typedef typename Params::const_pointer const_pointer;$/;"	t	class:btree::btree_node
const_pointer	btree/btree.h	/^  typedef typename params_type::const_pointer const_pointer;$/;"	t	struct:btree::btree_iterator
const_pointer	btree/btree_container.h	/^  typedef typename Tree::const_pointer const_pointer;$/;"	t	class:btree::btree_container
const_pointer	btree/btree_test.h	/^  typedef typename TreeType::const_pointer const_pointer;$/;"	t	class:btree::base_checker
const_pointer	btree/safe_btree.h	/^  typedef typename Iterator::const_pointer const_pointer;$/;"	t	class:btree::safe_btree_iterator
const_pointer	btree/safe_btree.h	/^  typedef typename btree_type::const_pointer const_pointer;$/;"	t	class:btree::safe_btree
const_reference	btree/btree.h	/^  typedef const value_type& const_reference;$/;"	t	struct:btree::btree_map_params
const_reference	btree/btree.h	/^  typedef const value_type& const_reference;$/;"	t	struct:btree::btree_set_params
const_reference	btree/btree.h	/^  typedef typename Params::const_reference const_reference;$/;"	t	class:btree::btree
const_reference	btree/btree.h	/^  typedef typename Params::const_reference const_reference;$/;"	t	class:btree::btree_node
const_reference	btree/btree.h	/^  typedef typename params_type::const_reference const_reference;$/;"	t	struct:btree::btree_iterator
const_reference	btree/btree_container.h	/^  typedef typename Tree::const_reference const_reference;$/;"	t	class:btree::btree_container
const_reference	btree/btree_test.h	/^  typedef typename TreeType::const_reference const_reference;$/;"	t	class:btree::base_checker
const_reference	btree/safe_btree.h	/^  typedef typename Iterator::const_reference const_reference;$/;"	t	class:btree::safe_btree_iterator
const_reference	btree/safe_btree.h	/^  typedef typename btree_type::const_reference const_reference;$/;"	t	class:btree::safe_btree
const_reverse_iterator	btree/btree.h	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:btree::btree
const_reverse_iterator	btree/btree_container.h	/^  typedef typename Tree::const_reverse_iterator const_reverse_iterator;$/;"	t	class:btree::btree_container
const_reverse_iterator	btree/btree_test.h	/^  typedef typename TreeType::const_reverse_iterator const_reverse_iterator;$/;"	t	class:btree::base_checker
const_reverse_iterator	btree/safe_btree.h	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:btree::safe_btree
const_tree_	btree/btree_test.h	/^  const TreeType &const_tree_;$/;"	m	class:btree::base_checker
context_lock_	machine/connection/connection_zmq.cc	/^Mutex context_lock_;$/;"	v
context_t	machine/connection/zmq_cpp.h	/^        inline context_t (context_t &&rhs) : ptr (rhs.ptr)$/;"	f	class:zmq::context_t
context_t	machine/connection/zmq_cpp.h	/^        inline explicit context_t (int io_threads_)$/;"	f	class:zmq::context_t
context_t	machine/connection/zmq_cpp.h	/^    class context_t$/;"	c	namespace:zmq
copy	machine/connection/zmq_cpp.h	/^        inline void copy (message_t *msg_)$/;"	f	class:zmq::message_t
count	btree/btree.h	/^    field_type count;$/;"	m	struct:btree::btree_node::base_fields
count	btree/btree.h	/^  int count() const { return fields_.count; }$/;"	f	class:btree::btree_node
count	btree/btree_container.h	/^  size_type count(const key_type &key) const {$/;"	f	class:btree::btree_multi_container
count	btree/btree_container.h	/^  size_type count(const key_type &key) const {$/;"	f	class:btree::btree_unique_container
count	btree/btree_test.h	/^  size_type count(const key_type &key) const {$/;"	f	class:btree::base_checker
count_	common/source.h	/^  int count_;$/;"	m	class:LimitSource
count_	components/log/paxos2.h	/^  std::atomic<uint64> count_;$/;"	m	class:Paxos2App
count_multi	btree/btree.h	/^  size_type count_multi(const key_type &key) const {$/;"	f	class:btree::btree
count_multi	btree/safe_btree.h	/^  size_type count_multi(const key_type &key) const {$/;"	f	class:btree::safe_btree
count_unique	btree/btree.h	/^  size_type count_unique(const key_type &key) const {$/;"	f	class:btree::btree
count_unique	btree/safe_btree.h	/^  size_type count_unique(const key_type &key) const {$/;"	f	class:btree::safe_btree
counter	machine/app/app_test.cc	/^  int counter() { return counter_; }$/;"	f	class:TestApp
counter	machine/app/testapp.cc	/^  int counter() { return counter_; }$/;"	f	class:TestAddApp
counter	machine/thread_pool/thread_pool_test.cc	/^  int counter() const {$/;"	f	class:DeadlockFreedomMessageHandler
counter	machine/thread_pool/thread_pool_test.cc	/^  int counter() const {$/;"	f	class:TestLatencyHandler
counter	machine/thread_pool/thread_pool_test.cc	/^  int counter() const {$/;"	f	class:TestMessageHandler
counter_	machine/app/app_test.cc	/^  int counter_;$/;"	m	class:TestApp	file:
counter_	machine/app/testapp.cc	/^  int counter_;$/;"	m	class:TestAddApp	file:
counter_	machine/thread_pool/thread_pool_test.cc	/^  atomic<int> counter_;$/;"	m	class:DeadlockFreedomMessageHandler	file:
counter_	machine/thread_pool/thread_pool_test.cc	/^  atomic<int> counter_;$/;"	m	class:TestLatencyHandler	file:
counter_	machine/thread_pool/thread_pool_test.cc	/^  atomic<int> counter_;$/;"	m	class:TestMessageHandler	file:
current_	fs/block_log.h	/^  PairSequence* current_;$/;"	m	class:SequenceSource
current_benchmark	btree/btree_bench.cc	/^BenchmarkRun *current_benchmark;$/;"	m	namespace:btree::__anon11	file:
current_substore_	components/store/hybrid_versioned_kvstore.h	/^  KVStore* current_substore_;$/;"	m	class:HybridVersionedKVStore
data	btree/btree.h	/^    Data data;$/;"	m	struct:btree::btree::empty_base_handle
data	machine/connection/zmq_cpp.h	/^        inline const void* data () const$/;"	f	class:zmq::message_t
data	machine/connection/zmq_cpp.h	/^        inline void *data ()$/;"	f	class:zmq::message_t
data_channel_version	fs/metadata_store.cc	/^  uint64 data_channel_version;$/;"	m	class:DistributedExecutionContext	file:
data_type	btree/btree.h	/^  typedef Data data_type;$/;"	t	struct:btree::btree_map_params
data_type	btree/btree.h	/^  typedef std::false_type data_type;$/;"	t	struct:btree::btree_set_params
data_type	btree/btree.h	/^  typedef typename Params::data_type data_type;$/;"	t	class:btree::btree
data_type	btree/btree.h	/^  typedef typename Params::data_type data_type;$/;"	t	class:btree::btree_node
data_type	btree/btree_container.h	/^  typedef typename Tree::data_type data_type;$/;"	t	class:btree::btree_map_container
data_type	btree/btree_map.h	/^  typedef typename btree_type::data_type data_type;$/;"	t	class:btree::btree_multimap
data_type	btree/safe_btree.h	/^  typedef typename btree_type::data_type data_type;$/;"	t	class:btree::safe_btree
database	.ycm_extra_conf.py	/^  database = None$/;"	v
database	.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
dead_	experimental/dag/appender.h	/^	std::atomic<bool> dead_; $/;"	m	class:Appender
deallocate	btree/btree_test.h	/^  void deallocate(pointer p, size_type n) {$/;"	f	class:btree::TestAllocator
decrement	btree/btree.h	/^  void decrement() {$/;"	f	struct:btree::btree_iterator
delay_	common/atomic.h	/^  double delay_;$/;"	m	class:DelayQueue
delay_	common/source.h	/^  double delay_;$/;"	m	class:ThrottleSource
delay_queue	components/store/hybrid_versioned_kvstore.h	/^  DelayQueue<string>* delay_queue;$/;"	m	class:HybridVersionedKVStore
delay_time_	fs/block_log.h	/^  double delay_time_;$/;"	m	class:BlockLogApp
delay_txns_	fs/block_log.h	/^  map<uint64, ActionBatch> delay_txns_;$/;"	m	class:BlockLogApp
delete_internal_node	btree/btree.h	/^  void delete_internal_node(node_type *node) {$/;"	f	class:btree::btree
delete_internal_root_node	btree/btree.h	/^  void delete_internal_root_node() {$/;"	f	class:btree::btree
delete_leaf_node	btree/btree.h	/^  void delete_leaf_node(node_type *node) {$/;"	f	class:btree::btree
deleted_threads_	machine/thread_pool/thread_pool.cc	/^  AtomicQueue<int> deleted_threads_;$/;"	m	class:SubPool	file:
deletions_	fs/metadata_store.cc	/^  set<string> deletions_;$/;"	m	class:ExecutionContext	file:
deps_	experimental/dag_test.cc	/^  Node* deps_[READSETSIZE];$/;"	m	struct:Node	file:
destroy	btree/btree.h	/^  void destroy() {$/;"	f	class:btree::btree_node
destructor_called_	machine/connection/connection_zmq.h	/^  bool destructor_called_;$/;"	m	class:ConnectionZMQ
difference_type	btree/btree.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:btree::btree_common_params
difference_type	btree/btree.h	/^  typedef typename Node::difference_type difference_type;$/;"	t	struct:btree::btree_iterator
difference_type	btree/btree.h	/^  typedef typename Params::difference_type difference_type;$/;"	t	class:btree::btree
difference_type	btree/btree.h	/^  typedef typename Params::difference_type difference_type;$/;"	t	class:btree::btree_node
difference_type	btree/btree_container.h	/^  typedef typename Tree::difference_type difference_type;$/;"	t	class:btree::btree_container
difference_type	btree/btree_test.h	/^  typedef typename TreeType::difference_type difference_type;$/;"	t	class:btree::base_checker
difference_type	btree/safe_btree.h	/^  typedef typename Iterator::difference_type difference_type;$/;"	t	class:btree::safe_btree_iterator
difference_type	btree/safe_btree.h	/^  typedef typename btree_type::difference_type difference_type;$/;"	t	class:btree::safe_btree
dispatch	btree/btree.h	/^  static std::pair<Iter, int> dispatch(const K &k, const T &t, Iter iter) {$/;"	f	struct:btree::btree_internal_locate_compare_to
dispatch	btree/btree.h	/^  static std::pair<Iter, int> dispatch(const K &k, const T &t, Iter iter) {$/;"	f	struct:btree::btree_internal_locate_plain_compare
done_	common/atomic_test.cc	/^atomic<uint32> done_;$/;"	v
dummy	btree/btree.h	/^  char dummy[2];$/;"	m	struct:btree::big_
dump	btree/btree.h	/^  void dump(std::ostream &os) const {$/;"	f	class:btree::btree
dump	btree/btree_container.h	/^  void dump(std::ostream &os) const {$/;"	f	class:btree::btree_container
dump	btree/safe_btree.h	/^  void dump(std::ostream &os) const {$/;"	f	class:btree::safe_btree
empty	btree/btree.h	/^  bool empty() const { return root() == NULL; }$/;"	f	class:btree::btree
empty	btree/btree_container.h	/^  bool empty() const { return tree_.empty(); }$/;"	f	class:btree::btree_container
empty	btree/btree_test.h	/^  bool empty() const {$/;"	f	class:btree::base_checker
empty	btree/safe_btree.h	/^  bool empty() const { return tree_.empty(); }$/;"	f	class:btree::safe_btree
empty	machine/message_buffer.h	/^  inline bool empty() const {$/;"	f	class:MessageBuffer
empty_base_handle	btree/btree.h	/^    empty_base_handle(const Base &b, const Data &d)$/;"	f	struct:btree::btree::empty_base_handle
empty_base_handle	btree/btree.h	/^  struct empty_base_handle : public Base {$/;"	s	class:btree::btree
encoded_	experimental/protobuf_reader.h	/^  Slice encoded_;$/;"	m	class:ProtobufReader
end	btree/btree.h	/^  const_iterator end() const {$/;"	f	class:btree::btree
end	btree/btree.h	/^  iterator end() {$/;"	f	class:btree::btree
end	btree/btree_container.h	/^  const_iterator end() const { return tree_.end(); }$/;"	f	class:btree::btree_container
end	btree/btree_container.h	/^  iterator end() { return tree_.end(); }$/;"	f	class:btree::btree_container
end	btree/btree_test.h	/^  const_iterator end() const { return tree_.end(); }$/;"	f	class:btree::base_checker
end	btree/btree_test.h	/^  iterator end() { return tree_.end(); }$/;"	f	class:btree::base_checker
end	btree/safe_btree.h	/^  const_iterator end() const {$/;"	f	class:btree::safe_btree
end	btree/safe_btree.h	/^  iterator end() {$/;"	f	class:btree::safe_btree
entries_	components/log/local_mem_log.h	/^  Entry* entries_;$/;"	m	class:LocalMemLog
entry	components/log/local_mem_log.h	/^    string* entry;$/;"	m	struct:LocalMemLog::Entry
entry_	components/log/local_mem_log.cc	/^  LocalMemLog::Entry entry_;$/;"	m	class:LocalMemLogReader	file:
env_	fs/localfs.h	/^  leveldb::Env* env_;$/;"	m	class:LocalFS
equal_range	btree/btree.h	/^  std::pair<const_iterator,const_iterator> equal_range(const key_type &key) const {$/;"	f	class:btree::btree
equal_range	btree/btree.h	/^  std::pair<iterator,iterator> equal_range(const key_type &key) {$/;"	f	class:btree::btree
equal_range	btree/btree_container.h	/^  std::pair<const_iterator,const_iterator> equal_range(const key_type &key) const {$/;"	f	class:btree::btree_container
equal_range	btree/btree_container.h	/^  std::pair<iterator,iterator> equal_range(const key_type &key) {$/;"	f	class:btree::btree_container
equal_range	btree/btree_test.h	/^  std::pair<const_iterator,const_iterator> equal_range(const key_type &key) const {$/;"	f	class:btree::base_checker
equal_range	btree/btree_test.h	/^  std::pair<iterator,iterator> equal_range(const key_type &key) {$/;"	f	class:btree::base_checker
equal_range	btree/safe_btree.h	/^  std::pair<const_iterator, const_iterator> equal_range(const key_type &key) const {$/;"	f	class:btree::safe_btree
equal_range	btree/safe_btree.h	/^  std::pair<iterator, iterator> equal_range(const key_type &key) {$/;"	f	class:btree::safe_btree
erase	btree/btree_container.h	/^  int erase(const key_type &key) {$/;"	f	class:btree::btree_multi_container
erase	btree/btree_container.h	/^  int erase(const key_type &key) {$/;"	f	class:btree::btree_unique_container
erase	btree/btree_container.h	/^  iterator erase(const iterator &iter) {$/;"	f	class:btree::btree_multi_container
erase	btree/btree_container.h	/^  iterator erase(const iterator &iter) {$/;"	f	class:btree::btree_unique_container
erase	btree/btree_container.h	/^  void erase(const iterator &first, const iterator &last) {$/;"	f	class:btree::btree_multi_container
erase	btree/btree_container.h	/^  void erase(const iterator &first, const iterator &last) {$/;"	f	class:btree::btree_unique_container
erase	btree/btree_test.h	/^  int erase(const key_type &key) {$/;"	f	class:btree::base_checker
erase	btree/btree_test.h	/^  iterator erase(iterator iter) {$/;"	f	class:btree::base_checker
erase	btree/btree_test.h	/^  void erase(iterator begin, iterator end) {$/;"	f	class:btree::base_checker
erase	btree/safe_btree.h	/^  iterator erase(iterator iter) {$/;"	f	class:btree::safe_btree
erase	btree/safe_btree.h	/^  void erase(const iterator &begin, const iterator &end) {$/;"	f	class:btree::safe_btree
erase_check	btree/btree_test.h	/^  void erase_check(const key_type &key) {$/;"	f	class:btree::base_checker
erase_multi	btree/safe_btree.h	/^  int erase_multi(const key_type &key) {$/;"	f	class:btree::safe_btree
erase_unique	btree/safe_btree.h	/^  int erase_unique(const key_type &key) {$/;"	f	class:btree::safe_btree
errnum	machine/connection/zmq_cpp.h	/^        int errnum;$/;"	m	class:zmq::error_t
error	fs/status.h	/^  const string& error() {$/;"	f	class:Status
error_	fs/status.h	/^  string* error_;  \/\/ NULL = OK.$/;"	m	class:Status
error_t	machine/connection/zmq_cpp.h	/^        error_t () : errnum (zmq_errno ()) {}$/;"	f	class:zmq::error_t
error_t	machine/connection/zmq_cpp.h	/^    class error_t : public std::exception$/;"	c	namespace:zmq
experiment	fs/calvinfs_client_app.h	/^  int experiment;$/;"	m	class:CalvinFSClientApp
external_connection_	machine/cluster_manager.h	/^  ExternalConnection* external_connection_;$/;"	m	class:ClusterManager
external_connection_count_	machine/external_connection.cc	/^int external_connection_count_ = 0;$/;"	v
fakebatches_	fs/block_log.h	/^  AtomicMap<uint64, ActionBatch*> fakebatches_;$/;"	m	class:BlockLogApp
field_type	btree/btree.h	/^    typedef typename Params::node_count_type field_type;$/;"	t	struct:btree::btree_node::base_fields
fields_	btree/btree.h	/^  root_fields fields_;$/;"	m	class:btree::btree_node
find	btree/btree_container.h	/^  const_iterator find(const key_type &key) const {$/;"	f	class:btree::btree_multi_container
find	btree/btree_container.h	/^  const_iterator find(const key_type &key) const {$/;"	f	class:btree::btree_unique_container
find	btree/btree_container.h	/^  iterator find(const key_type &key) {$/;"	f	class:btree::btree_multi_container
find	btree/btree_container.h	/^  iterator find(const key_type &key) {$/;"	f	class:btree::btree_unique_container
find	btree/btree_test.h	/^  const_iterator find(const key_type &key) const {$/;"	f	class:btree::base_checker
find	btree/btree_test.h	/^  iterator find(const key_type &key) {$/;"	f	class:btree::base_checker
find_multi	btree/btree.h	/^  const_iterator find_multi(const key_type &key) const {$/;"	f	class:btree::btree
find_multi	btree/btree.h	/^  iterator find_multi(const key_type &key) {$/;"	f	class:btree::btree
find_multi	btree/safe_btree.h	/^  const_iterator find_multi(const key_type &key) const {$/;"	f	class:btree::safe_btree
find_multi	btree/safe_btree.h	/^  iterator find_multi(const key_type &key) {$/;"	f	class:btree::safe_btree
find_unique	btree/btree.h	/^  const_iterator find_unique(const key_type &key) const {$/;"	f	class:btree::btree
find_unique	btree/btree.h	/^  iterator find_unique(const key_type &key) {$/;"	f	class:btree::btree
find_unique	btree/safe_btree.h	/^  const_iterator find_unique(const key_type &key) const {$/;"	f	class:btree::safe_btree
find_unique	btree/safe_btree.h	/^  iterator find_unique(const key_type &key) {$/;"	f	class:btree::safe_btree
finsh_	machine/thread_pool/thread_pool_test.cc	/^  vector<double> finsh_;$/;"	m	class:TestLatencyHandler	file:
first_benchmark	btree/btree_bench.cc	/^BenchmarkRun *first_benchmark;$/;"	m	namespace:btree::__anon11	file:
flags	.ycm_extra_conf.py	/^flags = [$/;"	v
for	lint	/^import math  # for log$/;"	i
free_fn	machine/connection/zmq_cpp.h	/^    typedef zmq_free_fn free_fn;$/;"	t	namespace:zmq
front_	common/atomic.h	/^  uint32 front_;     \/\/ Offset of first (oldest) element.$/;"	m	class:AtomicQueue
front_mutex_	common/atomic.h	/^  Mutex front_mutex_;$/;"	m	class:AtomicQueue
fs_	fs/fs_test.cc	/^  FS* fs_;$/;"	m	class:FSTest	file:
fs_	fs/local_calvinfs.h	/^  LocalFileSystem* fs_;$/;"	m	class:LocalFileHandle
fullness	btree/btree.h	/^  double fullness() const {$/;"	f	class:btree::btree
fullness	btree/btree_container.h	/^  double fullness() const { return tree_.fullness(); }$/;"	f	class:btree::btree_container
fullness	btree/btree_test.h	/^  double fullness() const { return tree_.fullness(); }$/;"	f	class:btree::base_checker
fullness	btree/safe_btree.h	/^  double fullness() const { return tree_.fullness(); }$/;"	f	class:btree::safe_btree
generate_value	btree/btree_container.h	/^    generate_value(const key_type &k)$/;"	f	struct:btree::btree_map_container::generate_value
generate_value	btree/btree_container.h	/^  struct generate_value {$/;"	s	class:btree::btree_map_container
generation	btree/safe_btree.h	/^  int64_t generation() const { return generation_; }$/;"	f	class:btree::safe_btree_iterator
generation	btree/safe_btree.h	/^  int64_t generation() const {$/;"	f	class:btree::safe_btree
generation_	btree/safe_btree.h	/^  int64_t generation_;$/;"	m	class:btree::safe_btree
generation_	btree/safe_btree.h	/^  mutable int64_t generation_;$/;"	m	class:btree::safe_btree_iterator
get_micros	btree/btree_bench.cc	/^int64_t get_micros () {$/;"	f	namespace:btree::__anon11
get_pid_by_name	scripts/script_utils.cc	/^int get_pid_by_name(char* process_name, int list_size) {$/;"	f
getopt	lint	/^import getopt$/;"	i
getsockopt	machine/connection/zmq_cpp.h	/^        inline void getsockopt (int option_, void *optval_,$/;"	f	class:zmq::socket_t
go_	components/log/paxos.h	/^  std::atomic<bool> go_;$/;"	m	class:FakePaxosApp
go_	components/log/paxos2.h	/^  std::atomic<bool> go_;$/;"	m	class:Paxos2App
go_	components/scheduler/lazy_scheduler.h	/^  bool go_;$/;"	m	class:LazyScheduler
go_	components/scheduler/scheduler.h	/^  std::atomic<bool> go_;$/;"	m	class:Scheduler
go_	db/client.h	/^  bool go_;$/;"	m	class:MicroClient
go_	fs/block_log.h	/^  std::atomic<bool> go_;$/;"	m	class:BlockLogApp
go_	fs/calvinfs_client_app.h	/^  atomic<bool> go_;$/;"	m	class:CalvinFSClientApp
go_	machine/app/reporter.h	/^  bool go_;$/;"	m	class:Reporter
go_	machine/thread_pool/thread_pool_test.cc	/^  atomic<bool> go_;$/;"	m	class:BenchmarkMessageHandler	file:
going_	components/log/paxos.h	/^  std::atomic<bool> going_;$/;"	m	class:FakePaxosApp
going_	components/log/paxos2.h	/^  std::atomic<bool> going_;$/;"	m	class:Paxos2App
going_	components/scheduler/lazy_scheduler.h	/^  bool going_;$/;"	m	class:LazyScheduler
going_	components/scheduler/scheduler.h	/^  std::atomic<bool> going_;$/;"	m	class:Scheduler
going_	db/client.h	/^  bool going_;$/;"	m	class:MicroClient
going_	fs/block_log.h	/^  std::atomic<bool> going_;$/;"	m	class:BlockLogApp
going_	fs/calvinfs_client_app.h	/^  atomic<bool> going_;$/;"	m	class:CalvinFSClientApp
going_	machine/app/reporter.h	/^  bool going_;$/;"	m	class:Reporter
handler_	machine/connection/connection.h	/^  MessageHandler* handler_;$/;"	m	class:Connection
handler_	machine/thread_pool/thread_pool.cc	/^  MessageHandler* handler_;$/;"	m	class:SubPool	file:
handler_	machine/thread_pool/thread_pool.h	/^  MessageHandler* handler_;$/;"	m	class:ThreadPool
height	btree/btree.h	/^  size_type height() const {$/;"	f	class:btree::btree
height	btree/btree_container.h	/^  size_type height() const { return tree_.height(); }$/;"	f	class:btree::btree_container
height	btree/btree_test.h	/^  size_type height() const { return tree_.height(); }$/;"	f	class:btree::base_checker
height	btree/safe_btree.h	/^  size_type height() const { return tree_.height(); }$/;"	f	class:btree::safe_btree
high	machine/thread_pool/thread_pool_test.cc	/^  int64 high() {$/;"	f	class:BenchmarkMessageHandler
high_	machine/thread_pool/thread_pool.h	/^  SubPool* high_;$/;"	m	class:ThreadPool
high_	machine/thread_pool/thread_pool_test.cc	/^  int64 high_;$/;"	m	class:BenchmarkMessageHandler	file:
high_duration	machine/thread_pool/thread_pool_test.cc	/^  double high_duration() {$/;"	f	class:BenchmarkMessageHandler
high_duration_	machine/thread_pool/thread_pool_test.cc	/^  double high_duration_;$/;"	m	class:BenchmarkMessageHandler	file:
high_water_mark_	components/scheduler/locking_scheduler.h	/^  uint64 high_water_mark_;$/;"	m	class:LockingScheduler
hostname_	machine/connection/connection.h	/^  string hostname_;$/;"	m	class:Connection
i	btree/btree.h	/^    *mutable_child(i) = NULL;$/;"	m	namespace:btree	typeref:class:btree::btree
id_	machine/connection/connection.h	/^  uint64 id_;$/;"	m	class:Connection
identity	btree/btree_test.h	/^struct identity {$/;"	s	namespace:btree
idle_thread_count_	machine/thread_pool/thread_pool.cc	/^  atomic<int> idle_thread_count_;$/;"	m	class:SubPool	file:
if_	btree/btree.h	/^  typedef typename if_<$/;"	t	struct:btree::btree_common_params
if_	btree/btree.h	/^struct if_<false, A, B> {$/;"	s	namespace:btree
if_	btree/btree.h	/^struct if_{$/;"	s	namespace:btree
inbox_	components/log/log_app.h	/^  AtomicQueue<MessageBuffer*>* inbox_;$/;"	m	class:RemoteLogSource
inboxes_	machine/machine.h	/^  AtomicMap<string, AtomicQueue<MessageBuffer*>*> inboxes_;$/;"	m	class:Machine
increment	btree/btree.h	/^  void increment() {$/;"	f	struct:btree::btree_iterator
index_	fs/block_log.h	/^  int index_;$/;"	m	class:SequenceSource
init_internal	btree/btree.h	/^  static btree_node* init_internal(internal_fields *f, btree_node *parent) {$/;"	f	class:btree::btree_node
init_leaf	btree/btree.h	/^  static btree_node* init_leaf($/;"	f	class:btree::btree_node
init_root	btree/btree.h	/^  static btree_node* init_root(root_fields *f, btree_node *parent) {$/;"	f	class:btree::btree_node
insert	btree/btree_container.h	/^  iterator insert(const value_type &x) {$/;"	f	class:btree::btree_multi_container
insert	btree/btree_container.h	/^  iterator insert(iterator position, const value_type &x) {$/;"	f	class:btree::btree_multi_container
insert	btree/btree_container.h	/^  iterator insert(iterator position, const value_type &x) {$/;"	f	class:btree::btree_unique_container
insert	btree/btree_container.h	/^  std::pair<iterator,bool> insert(const value_type &x) {$/;"	f	class:btree::btree_unique_container
insert	btree/btree_container.h	/^  void insert(InputIterator b, InputIterator e) {$/;"	f	class:btree::btree_multi_container
insert	btree/btree_container.h	/^  void insert(InputIterator b, InputIterator e) {$/;"	f	class:btree::btree_unique_container
insert	btree/btree_test.h	/^  iterator insert(const value_type &x) {$/;"	f	class:btree::multi_checker
insert	btree/btree_test.h	/^  iterator insert(iterator position, const value_type &x) {$/;"	f	class:btree::multi_checker
insert	btree/btree_test.h	/^  iterator insert(iterator position, const value_type &x) {$/;"	f	class:btree::unique_checker
insert	btree/btree_test.h	/^  std::pair<iterator,bool> insert(const value_type &x) {$/;"	f	class:btree::unique_checker
insert	btree/btree_test.h	/^  void insert(InputIterator b, InputIterator e) {$/;"	f	class:btree::multi_checker
insert	btree/btree_test.h	/^  void insert(InputIterator b, InputIterator e) {$/;"	f	class:btree::unique_checker
insert_multi	btree/btree.h	/^  iterator insert_multi(const value_type &v) {$/;"	f	class:btree::btree
insert_multi	btree/safe_btree.h	/^  iterator insert_multi(const value_type &v) {$/;"	f	class:btree::safe_btree
insert_multi	btree/safe_btree.h	/^  iterator insert_multi(iterator position, const value_type &v) {$/;"	f	class:btree::safe_btree
insert_multi	btree/safe_btree.h	/^  void insert_multi(InputIterator b, InputIterator e) {$/;"	f	class:btree::safe_btree
insert_unique	btree/btree.h	/^  std::pair<iterator,bool> insert_unique(const value_type &v) {$/;"	f	class:btree::btree
insert_unique	btree/safe_btree.h	/^  iterator insert_unique(iterator position, const value_type &v) {$/;"	f	class:btree::safe_btree
insert_unique	btree/safe_btree.h	/^  std::pair<iterator, bool> insert_unique(const key_type &key, ValuePointer value) {$/;"	f	class:btree::safe_btree
insert_unique	btree/safe_btree.h	/^  std::pair<iterator, bool> insert_unique(const value_type &v) {$/;"	f	class:btree::safe_btree
insert_unique	btree/safe_btree.h	/^  void insert_unique(InputIterator b, InputIterator e) {$/;"	f	class:btree::safe_btree
int16	common/types.h	/^typedef int16_t int16;$/;"	t
int32	common/types.h	/^typedef int32_t int32;$/;"	t
int32	common/utils.cc	/^ADD_TYPE_NAME(int32);$/;"	v
int64	common/types.h	/^typedef int64_t int64;$/;"	t
int8	common/types.h	/^typedef int8_t int8;$/;"	t
internal_allocator	btree/btree.h	/^  const internal_allocator_type& internal_allocator() const {$/;"	f	class:btree::btree
internal_allocator_type	btree/btree.h	/^    internal_allocator_type;$/;"	t	class:btree::btree
internal_btree	btree/safe_btree.h	/^  btree_type* internal_btree() { return &tree_; }$/;"	f	class:btree::safe_btree
internal_btree	btree/safe_btree.h	/^  const btree_type* internal_btree() const { return &tree_; }$/;"	f	class:btree::safe_btree
internal_end	btree/btree.h	/^  const_iterator internal_end(const_iterator iter) const {$/;"	f	class:btree::btree
internal_end	btree/btree.h	/^  iterator internal_end(iterator iter) {$/;"	f	class:btree::btree
internal_fields	btree/btree.h	/^  struct internal_fields : public leaf_fields {$/;"	s	class:btree::btree_node
internal_fields	btree/btree.h	/^  typedef typename node_type::internal_fields internal_fields;$/;"	t	class:btree::btree
internal_locate_type	btree/btree.h	/^    btree_internal_locate_plain_compare>::type internal_locate_type;$/;"	t	class:btree::btree
internal_nodes	btree/btree.h	/^    ssize_t internal_nodes;$/;"	m	struct:btree::btree::node_stats
internal_nodes	btree/btree.h	/^  size_type internal_nodes() const {$/;"	f	class:btree::btree
internal_nodes	btree/btree_container.h	/^  size_type internal_nodes() const { return tree_.internal_nodes(); }$/;"	f	class:btree::btree_container
internal_nodes	btree/btree_test.h	/^  size_type internal_nodes() const { return tree_.internal_nodes(); }$/;"	f	class:btree::base_checker
internal_nodes	btree/safe_btree.h	/^  size_type internal_nodes() const { return tree_.internal_nodes(); }$/;"	f	class:btree::safe_btree
internal_stats	btree/btree.h	/^  node_stats internal_stats(const node_type *node) const {$/;"	f	class:btree::btree
interval_	machine/app/reporter.h	/^  int interval_;$/;"	m	class:Reporter
is_alive_	experimental/dag/appender.h	/^	std::atomic<bool> is_alive_;$/;"	m	class:Appender
is_key_compare_to	btree/btree.h	/^  typedef btree_is_key_compare_to<key_compare> is_key_compare_to;$/;"	t	struct:btree::btree_common_params
is_key_compare_to	btree/btree.h	/^  typedef typename Params::is_key_compare_to is_key_compare_to;$/;"	t	class:btree::btree
is_process_exist	scripts/script_utils.cc	/^bool is_process_exist(char* process_name) {$/;"	f
is_root	btree/btree.h	/^  bool is_root() const { return parent()->leaf(); }$/;"	f	class:btree::btree_node
it_	components/store/leveldbstore.cc	/^  leveldb::Iterator* it_;$/;"	m	class:LevelDBStoreIterator	file:
iter	btree/safe_btree.h	/^  const Iterator& iter() const {$/;"	f	class:btree::safe_btree_iterator
iter_	btree/safe_btree.h	/^  mutable Iterator iter_;$/;"	m	class:btree::safe_btree_iterator
iter_	components/store/btreestore.cc	/^  btree::btree_map<string, string>::const_iterator iter_;$/;"	m	class:BTreeIterator	file:
iter_check	btree/btree_test.h	/^  IterType iter_check($/;"	f	class:btree::base_checker
iterator	btree/btree.h	/^    normal_node, normal_reference, normal_pointer> iterator;$/;"	t	struct:btree::btree_iterator
iterator	btree/btree.h	/^  typedef btree_iterator<node_type, reference, pointer> iterator;$/;"	t	class:btree::btree
iterator	btree/btree_container.h	/^  typedef typename Tree::iterator iterator;$/;"	t	class:btree::btree_container
iterator	btree/btree_container.h	/^  typedef typename Tree::iterator iterator;$/;"	t	class:btree::btree_multi_container
iterator	btree/btree_container.h	/^  typedef typename Tree::iterator iterator;$/;"	t	class:btree::btree_unique_container
iterator	btree/btree_test.h	/^  typedef typename TreeType::iterator iterator;$/;"	t	class:btree::base_checker
iterator	btree/btree_test.h	/^  typedef typename super_type::iterator iterator;$/;"	t	class:btree::multi_checker
iterator	btree/btree_test.h	/^  typedef typename super_type::iterator iterator;$/;"	t	class:btree::unique_checker
iterator	btree/safe_btree.h	/^  typedef safe_btree_iterator<self_type, tree_iterator> iterator;$/;"	t	class:btree::safe_btree
iterator	btree/safe_btree.h	/^  typedef typename Tree::iterator iterator;$/;"	t	class:btree::safe_btree_iterator
iterator_category	btree/btree.h	/^  typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	struct:btree::btree_iterator
iterator_category	btree/safe_btree.h	/^  typedef typename Iterator::iterator_category iterator_category;$/;"	t	class:btree::safe_btree_iterator
kAfterMaxVersion	components/store/versioned_kvstore.cc	/^static const uint64 kAfterMaxVersion =$/;"	v	file:
kDeletedFlag	components/store/hybrid_versioned_kvstore.cc	/^static const uint64 kDeletedFlag = 1;$/;"	v	file:
kDeletedFlag	components/store/versioned_kvstore.cc	/^static const uint64 kDeletedFlag = 1;$/;"	v	file:
kDirCount	fs/block_store.cc	/^static const uint32 kDirCount = 1000;$/;"	v	file:
kExactMatch	btree/btree.h	/^    kExactMatch = 1 << 30,$/;"	e	enum:btree::btree_node::__anon9
kExactMatch	btree/btree.h	/^    kExactMatch = node_type::kExactMatch,$/;"	e	enum:btree::btree::__anon10
kExternalMachineID	machine/connection/connection.h	/^static const uint64 kExternalMachineID = 0xFFFFFFFFFFFFFFFF;$/;"	v
kFlagsMask	components/store/versioned_kvstore.cc	/^static const uint64 kFlagsMask =$/;"	v	file:
kLockTableSize	components/scheduler/lock_manager.h	/^  static const int kLockTableSize = 1024;$/;"	m	class:LockManager
kMatchMask	btree/btree.h	/^    kMatchMask = kExactMatch - 1,$/;"	e	enum:btree::btree_node::__anon9
kMatchMask	btree/btree.h	/^    kMatchMask = node_type::kMatchMask,$/;"	e	enum:btree::btree::__anon10
kMaxActiveActions	components/scheduler/scheduler.h	/^  int kMaxActiveActions;$/;"	m	class:Scheduler
kMaxCapacity	fs/calvinfs_client_app.h	/^  int kMaxCapacity;$/;"	m	class:CalvinFSClientApp
kMaxRunningActions	components/scheduler/scheduler.h	/^  int kMaxRunningActions;$/;"	m	class:Scheduler
kMinNodeValues	btree/btree.h	/^    kMinNodeValues = kNodeValues \/ 2,$/;"	e	enum:btree::btree::__anon10
kNodeTargetValues	btree/btree.h	/^    kNodeTargetValues = (kTargetNodeSize - sizeof(base_fields)) \/ kValueSize,$/;"	e	enum:btree::btree_node::__anon9
kNodeValueSpace	btree/btree.h	/^    kNodeValueSpace = TargetNodeSize - 2 * sizeof(void*),$/;"	e	enum:btree::btree_common_params::__anon6
kNodeValues	btree/btree.h	/^    kNodeValues = kNodeTargetValues >= 3 ? kNodeTargetValues : 3,$/;"	e	enum:btree::btree_node::__anon9
kNodeValues	btree/btree.h	/^    kNodeValues = node_type::kNodeValues,$/;"	e	enum:btree::btree::__anon10
kOrderLineCount	db/materialization_test.cc	/^  static const uint32 kOrderLineCount = 10;$/;"	m	class:NewOrderSource	file:
kReadSetSize	db/materialization_test.cc	/^  static const int kReadSetSize = 20;$/;"	m	class:MicroSource	file:
kRecords	components/store/hybrid_versioned_kvstore_test.cc	/^  static const int kRecords = 100000;$/;"	m	class:HybridVersionedKVStoreTest	file:
kRecords	components/store/versioned_kvstore_test.cc	/^  static const int kRecords = 4;$/;"	m	class:VersionedKVStoreTest	file:
kReservedBits	components/store/versioned_kvstore.cc	/^static const int32 kReservedBits = 1;$/;"	v	file:
kStoreCount	components/store/versioned_kvstore.h	/^  static const int kStoreCount = 1;$/;"	m	class:VersionedKVStore
kTargetNodeSize	btree/btree.h	/^    kTargetNodeSize = TargetNodeSize,$/;"	e	enum:btree::btree_common_params::__anon6
kTargetNodeSize	btree/btree.h	/^    kTargetNodeSize = params_type::kTargetNodeSize,$/;"	e	enum:btree::btree_node::__anon9
kTotalActions	db/materialization_test.cc	/^  static const uint64 kTotalActions = 1000000;$/;"	m	class:PreparedSource	file:
kValueSize	btree/btree.h	/^    kValueSize = node_type::kValueSize,$/;"	e	enum:btree::btree::__anon10
kValueSize	btree/btree.h	/^    kValueSize = params_type::kValueSize,$/;"	e	enum:btree::btree_node::__anon9
kValueSize	btree/btree.h	/^    kValueSize = sizeof(Key) + sizeof(data_type),$/;"	e	enum:btree::btree_map_params::__anon7
kValueSize	btree/btree.h	/^    kValueSize = sizeof(Key),$/;"	e	enum:btree::btree_set_params::__anon8
kVersions	components/store/hybrid_versioned_kvstore_test.cc	/^  static const int kVersions = 10;$/;"	m	class:HybridVersionedKVStoreTest	file:
kVersions	components/store/versioned_kvstore_test.cc	/^  static const int kVersions = 4;$/;"	m	class:VersionedKVStoreTest	file:
kWriteSetSize	db/materialization_test.cc	/^  static const int kWriteSetSize = 2;$/;"	m	class:MicroSource	file:
key	btree/btree.h	/^  const key_type& key() const {$/;"	f	struct:btree::btree_iterator
key	btree/btree.h	/^  const key_type& key(int i) const {$/;"	f	class:btree::btree_node
key	btree/btree.h	/^  static const Key& key(const mutable_value_type &x) { return x.first; }$/;"	f	struct:btree::btree_map_params
key	btree/btree.h	/^  static const Key& key(const value_type &x) { return x.first; }$/;"	f	struct:btree::btree_map_params
key	btree/btree.h	/^  static const Key& key(const value_type &x) { return x; }$/;"	f	struct:btree::btree_set_params
key	btree/btree_container.h	/^    const key_type &key;$/;"	m	struct:btree::btree_map_container::generate_value
key	btree/safe_btree.h	/^  const key_type& key() const {$/;"	f	class:btree::safe_btree_iterator
key_	btree/safe_btree.h	/^  mutable key_type key_;$/;"	m	class:btree::safe_btree_iterator
key_	components/store/leveldbstore.cc	/^  string key_;$/;"	m	class:LevelDBStoreIterator	file:
key_comp	btree/btree.h	/^  const key_compare& key_comp() const {$/;"	f	class:btree::btree
key_comp	btree/safe_btree.h	/^  key_compare key_comp() const { return tree_.key_comp(); }$/;"	f	class:btree::safe_btree
key_compare	btree/btree.h	/^    Compare, btree_key_compare_to_adapter<Compare> >::type key_compare;$/;"	t	struct:btree::btree_common_params
key_compare	btree/btree.h	/^  typedef typename Params::key_compare key_compare;$/;"	t	class:btree::btree
key_compare	btree/btree.h	/^  typedef typename Params::key_compare key_compare;$/;"	t	class:btree::btree_node
key_compare	btree/btree_container.h	/^  typedef typename Tree::key_compare key_compare;$/;"	t	class:btree::btree_container
key_compare	btree/btree_container.h	/^  typedef typename Tree::key_compare key_compare;$/;"	t	class:btree::btree_map_container
key_compare	btree/btree_container.h	/^  typedef typename Tree::key_compare key_compare;$/;"	t	class:btree::btree_multi_container
key_compare	btree/btree_container.h	/^  typedef typename Tree::key_compare key_compare;$/;"	t	class:btree::btree_unique_container
key_compare	btree/btree_map.h	/^  typedef typename btree_type::key_compare key_compare;$/;"	t	class:btree::btree_map
key_compare	btree/btree_map.h	/^  typedef typename btree_type::key_compare key_compare;$/;"	t	class:btree::btree_multimap
key_compare	btree/btree_set.h	/^  typedef typename btree_type::key_compare key_compare;$/;"	t	class:btree::btree_multiset
key_compare	btree/btree_set.h	/^  typedef typename btree_type::key_compare key_compare;$/;"	t	class:btree::btree_set
key_compare	btree/btree_test.h	/^  typedef typename TreeType::key_compare key_compare;$/;"	t	class:btree::base_checker
key_compare	btree/safe_btree.h	/^  typedef typename btree_type::key_compare key_compare;$/;"	t	class:btree::safe_btree
key_compare	btree/safe_btree_map.h	/^  typedef typename btree_type::key_compare key_compare;$/;"	t	class:btree::safe_btree_map
key_compare	btree/safe_btree_set.h	/^  typedef typename btree_type::key_compare key_compare;$/;"	t	class:btree::safe_btree_set
key_comparison_function_must_return_bool	btree/btree.h	/^      key_comparison_function_must_return_bool);$/;"	m	class:btree::btree
key_type	btree/btree.h	/^  typedef Key key_type;$/;"	t	struct:btree::btree_common_params
key_type	btree/btree.h	/^  typedef typename Node::key_type key_type;$/;"	t	struct:btree::btree_iterator
key_type	btree/btree.h	/^  typedef typename Params::key_type key_type;$/;"	t	class:btree::btree
key_type	btree/btree.h	/^  typedef typename Params::key_type key_type;$/;"	t	class:btree::btree_node
key_type	btree/btree_container.h	/^  typedef typename Tree::key_type key_type;$/;"	t	class:btree::btree_container
key_type	btree/btree_container.h	/^  typedef typename Tree::key_type key_type;$/;"	t	class:btree::btree_map_container
key_type	btree/btree_container.h	/^  typedef typename Tree::key_type key_type;$/;"	t	class:btree::btree_multi_container
key_type	btree/btree_container.h	/^  typedef typename Tree::key_type key_type;$/;"	t	class:btree::btree_unique_container
key_type	btree/btree_test.h	/^  typedef typename TreeType::key_type key_type;$/;"	t	class:btree::base_checker
key_type	btree/safe_btree.h	/^  typedef typename Iterator::key_type key_type;$/;"	t	class:btree::safe_btree_iterator
key_type	btree/safe_btree.h	/^  typedef typename btree_type::key_type key_type;$/;"	t	class:btree::safe_btree
large_blocks_	fs/block_store.h	/^  LocalFileBlockStore large_blocks_;$/;"	m	class:HybridBlockStore
last_get_	common/source.h	/^  double last_get_;$/;"	m	class:ThrottleSource
last_started	btree/btree_bench.cc	/^  int64_t last_started;$/;"	m	struct:btree::__anon11::BenchmarkRun	file:
last_writers_	experimental/dag/appender.h	/^	std::map<int, Stick*> last_writers_;$/;"	m	class:Appender
latencies_	fs/calvinfs_client_app.h	/^  map<string, AtomicQueue<double>*> latencies_;$/;"	m	class:CalvinFSClientApp
latency_bound_	experimental/dag/appender.h	/^	int latency_bound_;$/;"	m	class:Appender
leaf	btree/btree.h	/^    bool leaf;$/;"	m	struct:btree::btree_node::base_fields
leaf	btree/btree.h	/^  bool leaf() const { return fields_.leaf; }$/;"	f	class:btree::btree_node
leaf_fields	btree/btree.h	/^  struct leaf_fields : public base_fields {$/;"	s	class:btree::btree_node
leaf_fields	btree/btree.h	/^  typedef typename node_type::leaf_fields leaf_fields;$/;"	t	class:btree::btree
leaf_nodes	btree/btree.h	/^    ssize_t leaf_nodes;$/;"	m	struct:btree::btree::node_stats
leaf_nodes	btree/btree.h	/^  size_type leaf_nodes() const {$/;"	f	class:btree::btree
leaf_nodes	btree/btree_container.h	/^  size_type leaf_nodes() const { return tree_.leaf_nodes(); }$/;"	f	class:btree::btree_container
leaf_nodes	btree/btree_test.h	/^  size_type leaf_nodes() const { return tree_.leaf_nodes(); }$/;"	f	class:btree::base_checker
leaf_nodes	btree/safe_btree.h	/^  size_type leaf_nodes() const { return tree_.leaf_nodes(); }$/;"	f	class:btree::safe_btree
leftmost	btree/btree.h	/^  const node_type* leftmost() const { return root() ? root()->parent() : NULL; }$/;"	f	class:btree::btree
leftmost	btree/btree.h	/^  node_type* leftmost() { return root() ? root()->parent() : NULL; }$/;"	f	class:btree::btree
leveldb	fs/localfs.h	/^namespace leveldb {$/;"	n
limit_	common/source.h	/^  int limit_;$/;"	m	class:LimitSource
linear_search_compare_to	btree/btree.h	/^  int linear_search_compare_to($/;"	f	class:btree::btree_node
linear_search_compare_to_type	btree/btree.h	/^    key_type, self_type, key_compare> linear_search_compare_to_type;$/;"	t	class:btree::btree_node
linear_search_plain_compare	btree/btree.h	/^  int linear_search_plain_compare($/;"	f	class:btree::btree_node
linear_search_plain_compare_type	btree/btree.h	/^    key_type, self_type, key_compare> linear_search_plain_compare_type;$/;"	t	class:btree::btree_node
linear_search_type	btree/btree.h	/^    linear_search_plain_compare_type>::type linear_search_type;$/;"	t	class:btree::btree_node
lm_	components/scheduler/locking_scheduler.h	/^  LockManager lm_;$/;"	m	class:LockingScheduler
local_paxos_leader_	fs/block_log.h	/^  uint64 local_paxos_leader_;$/;"	m	class:BlockLogApp
local_percentage	fs/calvinfs_client_app.h	/^  int local_percentage;$/;"	m	class:CalvinFSClientApp
local_replica_	components/scheduler/scheduler.h	/^  uint32 local_replica_;$/;"	m	class:Scheduler
local_sequences_index	components/log/paxos2.h	/^  uint64 local_sequences_index;$/;"	m	class:Paxos2App
local_versions_index_table	components/log/paxos2.h	/^  AtomicMap<uint64, pair<uint64, uint64>> local_versions_index_table;$/;"	m	class:Paxos2App
lock_	components/store/btreestore.cc	/^  ReadLock lock_;$/;"	m	class:BTreeIterator	file:
lock_table_	components/scheduler/lock_manager.h	/^  unordered_map<string, deque<LockRequest> > lock_table_;$/;"	m	class:LockManager
log	lint	/^import math  # for log$/;"	i
log_	components/log/local_mem_log.cc	/^  LocalMemLog* log_;$/;"	m	class:LocalMemLogReader	file:
log_	components/log/log_app.h	/^  Log* log_;$/;"	m	class:LogApp
log_	fs/block_log.h	/^    BlockLogApp* log_;$/;"	m	class:BlockLogApp::ActionSource
log_	fs/calvinfs.h	/^  LogApp* log_;$/;"	m	class:LocalCalvinFS
log_	fs/calvinfs_client_app.h	/^  BlockLogApp* log_;$/;"	m	class:CalvinFSClientApp
lookup_machine	machine/cluster_config.h	/^  inline bool lookup_machine(uint64 id, MachineInfo* info) {$/;"	f	class:ClusterConfig
low	machine/thread_pool/thread_pool_test.cc	/^  int64 low() {$/;"	f	class:BenchmarkMessageHandler
low_	machine/thread_pool/thread_pool.h	/^  SubPool* low_;$/;"	m	class:ThreadPool
low_	machine/thread_pool/thread_pool_test.cc	/^  int64 low_;$/;"	m	class:BenchmarkMessageHandler	file:
low_duration	machine/thread_pool/thread_pool_test.cc	/^  double low_duration() {$/;"	f	class:BenchmarkMessageHandler
low_duration_	machine/thread_pool/thread_pool_test.cc	/^  double low_duration_;$/;"	m	class:BenchmarkMessageHandler	file:
lower_bound	btree/btree.h	/^  const_iterator lower_bound(const key_type &key) const {$/;"	f	class:btree::btree
lower_bound	btree/btree.h	/^  int lower_bound(const key_type &k, const Compare &comp) const {$/;"	f	class:btree::btree_node
lower_bound	btree/btree.h	/^  iterator lower_bound(const key_type &key) {$/;"	f	class:btree::btree
lower_bound	btree/btree.h	/^  static int lower_bound(const K &k, const N &n, Compare comp)  {$/;"	f	struct:btree::btree_binary_search_plain_compare
lower_bound	btree/btree.h	/^  static int lower_bound(const K &k, const N &n, Compare comp)  {$/;"	f	struct:btree::btree_linear_search_plain_compare
lower_bound	btree/btree.h	/^  static int lower_bound(const K &k, const N &n, CompareTo comp)  {$/;"	f	struct:btree::btree_binary_search_compare_to
lower_bound	btree/btree.h	/^  static int lower_bound(const K &k, const N &n, CompareTo comp)  {$/;"	f	struct:btree::btree_linear_search_compare_to
lower_bound	btree/btree_container.h	/^  const_iterator lower_bound(const key_type &key) const {$/;"	f	class:btree::btree_container
lower_bound	btree/btree_container.h	/^  iterator lower_bound(const key_type &key) {$/;"	f	class:btree::btree_container
lower_bound	btree/btree_test.h	/^  const_iterator lower_bound(const key_type &key) const {$/;"	f	class:btree::base_checker
lower_bound	btree/btree_test.h	/^  iterator lower_bound(const key_type &key) {$/;"	f	class:btree::base_checker
lower_bound	btree/safe_btree.h	/^  const_iterator lower_bound(const key_type &key) const {$/;"	f	class:btree::safe_btree
lower_bound	btree/safe_btree.h	/^  iterator lower_bound(const key_type &key) {$/;"	f	class:btree::safe_btree
m_	components/log/paxos2_test.cc	/^  vector<Machine*> m_;$/;"	m	class:Paxos2Test	file:
m_	components/log/paxos_test.cc	/^  vector<Machine*> m_;$/;"	m	class:FakePaxosTest	file:
m_	components/scheduler/scheduler_test.cc	/^  Machine m_;$/;"	m	class:SchedulerTest	file:
m_	db/materialization_test.cc	/^  Machine m_;$/;"	m	class:Materialization	file:
m_	experimental/lazy_store.h	/^  Machine* m_;$/;"	m	class:components::LazyStore
m_	fs/block_log_test.cc	/^  vector<Machine*> m_;$/;"	m	class:BlockLogTest	file:
m_	fs/metadata_store_test.cc	/^  vector<Machine*> m_;$/;"	m	class:MetadataStoreTest	file:
machine	machine/app/app.h	/^  inline Machine* machine() { return machine_; }$/;"	f	class:App
machine_	components/log/log_app.h	/^  Machine* machine_;$/;"	m	class:RemoteLogSource
machine_	fs/calvinfs.h	/^  Machine* machine_;$/;"	m	class:LocalCalvinFS
machine_	fs/metadata_store.cc	/^  Machine* machine_;$/;"	m	class:DistributedExecutionContext	file:
machine_	fs/metadata_store.h	/^  Machine* machine_;$/;"	m	class:MetadataStore
machine_	machine/app/app.h	/^  Machine* machine_;$/;"	m	class:App
machine_	machine/machine.cc	/^  Machine* machine_;$/;"	m	class:ConnectionLoopMessageHandler	file:
machine_	machine/machine.cc	/^  Machine* machine_;$/;"	m	class:WorkerThreadMessageHandler	file:
machine_id	machine/machine.h	/^  inline uint64 machine_id() { return machine_id_; }$/;"	f	class:Machine
machine_id_	fs/metadata_store.h	/^  uint64 machine_id_;$/;"	m	class:MetadataStore
machine_id_	machine/machine.h	/^  uint64 machine_id_;$/;"	m	class:Machine
machines	machine/cluster_config.h	/^  const map<uint64, MachineInfo>& machines() {$/;"	f	class:ClusterConfig
machines_	machine/cluster_config.h	/^  map<uint64, MachineInfo> machines_;$/;"	m	class:ClusterConfig
machines_per_replica_	fs/metadata_store.h	/^  uint64 machines_per_replica_;$/;"	m	class:MetadataStore
main	btree/btree_bench.cc	/^int main(int argc, char **argv) {$/;"	f
main	common/atomic_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	common/mutex_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	common/utils_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	common/varint_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	common/vec_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	components/log/local_mem_log_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	components/log/log_app_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	components/log/paxos2_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	components/log/paxos_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	components/scheduler/scheduler_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	components/store/hybrid_versioned_kvstore_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	components/store/kvstore_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	components/store/store_app_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	components/store/versioned_kvstore_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	db/materialization_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	experimental/dag_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	experimental/protobuf_reader_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	fs/block_log_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	fs/block_store_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	fs/fs_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	fs/metadata_store_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	lint	/^def main():$/;"	f
main	machine/app/app_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	machine/cluster_config_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	machine/cluster_manager_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	machine/connection/connection_zmq_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	machine/machine_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	machine/thread_pool/thread_pool_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	scripts/calvin_server.cc	/^int main(int argc, char** argv) {$/;"	f
main	scripts/calvinfs_server.cc	/^int main(int argc, char** argv) {$/;"	f
main	scripts/cfs.cc	/^int main(int argc, char** argv) {$/;"	f
main	scripts/cluster.cc	/^int main(int argc, char** argv) {$/;"	f
make_root	btree/btree.h	/^  void make_root() {$/;"	f	class:btree::btree_node
map_	common/atomic.h	/^  btree_map<K, V> map_;$/;"	m	class:AtomicMap
mapped_type	btree/btree.h	/^  typedef Data mapped_type;$/;"	t	struct:btree::btree_map_params
mapped_type	btree/btree.h	/^  typedef std::false_type mapped_type;$/;"	t	struct:btree::btree_set_params
mapped_type	btree/btree.h	/^  typedef typename Params::mapped_type mapped_type;$/;"	t	class:btree::btree
mapped_type	btree/btree_container.h	/^  typedef typename Tree::mapped_type mapped_type;$/;"	t	class:btree::btree_map_container
mapped_type	btree/btree_map.h	/^  typedef typename btree_type::mapped_type mapped_type;$/;"	t	class:btree::btree_multimap
mapped_type	btree/safe_btree.h	/^  typedef typename btree_type::mapped_type mapped_type;$/;"	t	class:btree::safe_btree
math	lint	/^import math  # for log$/;"	i
max_count	btree/btree.h	/^    field_type max_count;$/;"	m	struct:btree::btree_node::base_fields
max_count	btree/btree.h	/^  int max_count() const { return fields_.max_count; }$/;"	f	class:btree::btree_node
max_idle_	machine/thread_pool/thread_pool.cc	/^  int max_idle_;$/;"	m	class:SubPool	file:
max_size	btree/btree.h	/^  size_type max_size() const { return std::numeric_limits<size_type>::max(); }$/;"	f	class:btree::btree
max_size	btree/btree_container.h	/^  size_type max_size() const { return tree_.max_size(); }$/;"	f	class:btree::btree_container
max_size	btree/btree_test.h	/^  size_type max_size() const { return tree_.max_size(); }$/;"	f	class:btree::base_checker
max_size	btree/safe_btree.h	/^  size_type max_size() const { return tree_.max_size(); }$/;"	f	class:btree::safe_btree
max_version_	components/log/local_mem_log.h	/^  uint64 max_version_;$/;"	m	class:LocalMemLog
maxval	btree/btree_test.h	/^  int maxval;$/;"	m	struct:btree::Generator
mds	fs/calvinfs.h	/^  const map<pair<uint64, uint64>, uint64>& mds() { return metadata_shards_; }$/;"	f	class:CalvinFSConfigMap
mds_	fs/block_log.h	/^  set<uint64> mds_;$/;"	m	class:BlockLogApp
mds_	fs/metadata_store_test.cc	/^  vector<StoreApp*> mds_;$/;"	m	class:MetadataStoreTest	file:
message_t	machine/connection/zmq_cpp.h	/^        inline explicit message_t (size_t size_)$/;"	f	class:zmq::message_t
message_t	machine/connection/zmq_cpp.h	/^        inline message_t ()$/;"	f	class:zmq::message_t
message_t	machine/connection/zmq_cpp.h	/^        inline message_t (message_t &&rhs) : msg (rhs.msg)$/;"	f	class:zmq::message_t
message_t	machine/connection/zmq_cpp.h	/^        inline message_t (void *data_, size_t size_, free_fn *ffn_,$/;"	f	class:zmq::message_t
message_t	machine/connection/zmq_cpp.h	/^    class message_t$/;"	c	namespace:zmq
metadata_	fs/calvinfs.h	/^  StoreApp* metadata_;$/;"	m	class:LocalCalvinFS
metadata_	fs/calvinfs_client_app.h	/^  MetadataStore* metadata_;$/;"	m	class:CalvinFSClientApp
metadata_	fs/local_calvinfs.h	/^  MVStore* metadata_;$/;"	m	class:LocalFileSystem
metadata_	fs/local_calvinfs.h	/^  MetadataEntry metadata_;$/;"	m	class:LocalFileHandle
metadata_shards_	fs/calvinfs.h	/^  map<pair<uint64, uint64>, uint64> metadata_shards_;$/;"	m	class:CalvinFSConfigMap
min_idle_	machine/thread_pool/thread_pool.cc	/^  int min_idle_;$/;"	m	class:SubPool	file:
mode_	components/scheduler/lock_manager.h	/^    bool mode_;       \/\/ EXCLUSIVE or SHARED lock request.$/;"	m	struct:LockManager::LockRequest
monitor_thread_	machine/thread_pool/thread_pool.h	/^  pthread_t monitor_thread_;$/;"	m	class:ThreadPool
move	machine/connection/zmq_cpp.h	/^        inline void move (message_t *msg_)$/;"	f	class:zmq::message_t
msg	machine/connection/zmq_cpp.h	/^        zmq_msg_t msg;$/;"	m	class:zmq::message_t
multi_checker	btree/btree_test.h	/^  multi_checker()$/;"	f	class:btree::multi_checker
multi_checker	btree/btree_test.h	/^  multi_checker(InputIterator b, InputIterator e)$/;"	f	class:btree::multi_checker
multi_checker	btree/btree_test.h	/^  multi_checker(const self_type &x)$/;"	f	class:btree::multi_checker
multi_checker	btree/btree_test.h	/^class multi_checker : public base_checker<TreeType, CheckerType> {$/;"	c	namespace:btree
mutable_child	btree/btree.h	/^  btree_node** mutable_child(int i) { return &fields_.children[i]; }$/;"	f	class:btree::btree_node
mutable_internal_allocator	btree/btree.h	/^  internal_allocator_type* mutable_internal_allocator() {$/;"	f	class:btree::btree
mutable_iter	btree/safe_btree.h	/^  Iterator* mutable_iter() const {$/;"	f	class:btree::safe_btree_iterator
mutable_key_comp	btree/btree.h	/^  key_compare* mutable_key_comp() {$/;"	f	class:btree::btree
mutable_rightmost	btree/btree.h	/^  btree_node** mutable_rightmost() { return &fields_.rightmost; }$/;"	f	class:btree::btree_node
mutable_rightmost	btree/btree.h	/^  node_type** mutable_rightmost() { return root()->mutable_rightmost(); }$/;"	f	class:btree::btree
mutable_root	btree/btree.h	/^  node_type** mutable_root() { return &root_.data; }$/;"	f	class:btree::btree
mutable_size	btree/btree.h	/^  size_type* mutable_size() { return &fields_.size; }$/;"	f	class:btree::btree_node
mutable_size	btree/btree.h	/^  size_type* mutable_size() { return root()->mutable_size(); }$/;"	f	class:btree::btree
mutable_value	btree/btree.h	/^  mutable_value_type* mutable_value(int i) {$/;"	f	class:btree::btree_node
mutable_value_type	btree/btree.h	/^  typedef std::pair<Key, data_type> mutable_value_type;$/;"	t	struct:btree::btree_map_params
mutable_value_type	btree/btree.h	/^  typedef typename Params::mutable_value_type mutable_value_type;$/;"	t	class:btree::btree_node
mutable_value_type	btree/btree.h	/^  typedef value_type mutable_value_type;$/;"	t	struct:btree::btree_set_params
mutex_	common/atomic.h	/^  Mutex mutex_;$/;"	m	class:DelayQueue
mutex_	common/atomic.h	/^  MutexRW mutex_;$/;"	m	class:AtomicMap
mutex_	common/mutex.h	/^  Mutex* mutex_;$/;"	m	class:Lock
mutex_	common/mutex.h	/^  MutexRW* mutex_;$/;"	m	class:ReadLock
mutex_	common/mutex.h	/^  MutexRW* mutex_;$/;"	m	class:WriteLock
mutex_	common/mutex.h	/^  pthread_mutex_t mutex_;$/;"	m	class:Mutex
mutex_	common/mutex.h	/^  pthread_rwlock_t mutex_;$/;"	m	class:MutexRW
mutex_	components/log/local_mem_log.h	/^  MutexRW mutex_;$/;"	m	class:LocalMemLog
mutex_	components/log/paxos2.h	/^  Mutex mutex_;$/;"	m	class:Paxos2App
mutex_	components/store/btreestore.h	/^  MutexRW mutex_;$/;"	m	class:BTreeStore
mutex_	fs/localfs.h	/^  MutexRW mutex_;$/;"	m	class:LocalFS
mutex_	machine/app/app.h	/^  Mutex mutex_;$/;"	m	struct:SAState
mutex_	machine/app/reporter.h	/^  Mutex mutex_;$/;"	m	class:Reporter
mutex_	machine/thread_pool/thread_pool_test.cc	/^  Mutex mutex_;$/;"	m	class:BenchmarkMessageHandler	file:
mutex_	machine/thread_pool/thread_pool_test.cc	/^  Mutex mutex_;$/;"	m	class:TestMessageHandler	file:
mutex_	machine/thread_pool/thread_pool_test.cc	/^  pthread_mutex_t mutex_;$/;"	m	class:DeadlockFreedomMessageHandler	file:
mutexes_	machine/connection/connection_zmq.h	/^  map<uint64, Mutex*> mutexes_;$/;"	m	class:ConnectionZMQ
n	btree/btree_test.cc	/^  size_t n;$/;"	m	struct:btree::__anon12::SubstringLess	file:
name	machine/app/app.h	/^  const string& name() { return name_; }$/;"	f	class:App
name_	machine/app/app.h	/^  string name_;$/;"	m	class:App
new_internal_node	btree/btree.h	/^  node_type* new_internal_node(node_type *parent) {$/;"	f	class:btree::btree
new_internal_root_node	btree/btree.h	/^  node_type* new_internal_root_node() {$/;"	f	class:btree::btree
new_leaf_node	btree/btree.h	/^  node_type* new_leaf_node(node_type *parent) {$/;"	f	class:btree::btree
new_leaf_root_node	btree/btree.h	/^  node_type* new_leaf_root_node(int max_count) {$/;"	f	class:btree::btree
next_barrier_	machine/machine.h	/^  uint64 next_barrier_;$/;"	m	class:Machine
next_benchmark	btree/btree_bench.cc	/^  BenchmarkRun *next_benchmark;$/;"	m	struct:btree::__anon11::BenchmarkRun	file:
next_block_id_	fs/local_calvinfs.h	/^  atomic<uint64> next_block_id_;$/;"	m	class:LocalFileSystem
next_guid_	machine/machine.h	/^  std::atomic<uint64> next_guid_;$/;"	m	class:Machine
next_sequences_index	components/log/paxos2.h	/^  AtomicMap<uint32, uint64> next_sequences_index;$/;"	m	class:Paxos2App
next_version_	components/log/log_app_test.cc	/^  uint64 next_version_;$/;"	m	class:LogAppTest	file:
next_version_	fs/localfs.h	/^  std::atomic<uint64> next_version_;$/;"	m	class:LocalFS
no_actions_	components/scheduler/scheduler.h	/^  EmptySource<Action*> no_actions_;$/;"	m	class:Scheduler
no_actions_	experimental/dag/appender.h	/^	EmptySource<Action*> no_actions_;$/;"	m	class:Appender
node	btree/btree.h	/^  Node *node;$/;"	m	struct:btree::btree_iterator
node_count_type	btree/btree.h	/^    uint8_t>::type node_count_type;$/;"	t	struct:btree::btree_common_params
node_stats	btree/btree.h	/^    node_stats(ssize_t l, ssize_t i)$/;"	f	struct:btree::btree::node_stats
node_stats	btree/btree.h	/^  struct node_stats {$/;"	s	class:btree::btree
node_type	btree/btree.h	/^  typedef Node node_type;$/;"	t	struct:btree::btree_iterator
node_type	btree/btree.h	/^  typedef btree_node<Params> node_type;$/;"	t	class:btree::btree
nodes	btree/btree.h	/^  size_type nodes() const {$/;"	f	class:btree::btree
nodes	btree/btree_container.h	/^  size_type nodes() const { return tree_.nodes(); }$/;"	f	class:btree::btree_container
nodes	btree/btree_test.h	/^  size_type nodes() const { return tree_.nodes(); }$/;"	f	class:btree::base_checker
nodes	btree/safe_btree.h	/^  size_type nodes() const { return tree_.nodes(); }$/;"	f	class:btree::safe_btree
normal_node	btree/btree.h	/^  typedef typename std::remove_const<Node>::type normal_node;$/;"	t	struct:btree::btree_iterator
normal_pointer	btree/btree.h	/^  typedef typename params_type::pointer normal_pointer;$/;"	t	struct:btree::btree_iterator
normal_reference	btree/btree.h	/^  typedef typename params_type::reference normal_reference;$/;"	t	struct:btree::btree_iterator
num	machine/connection/zmq_cpp.h	/^        int num () const$/;"	f	class:zmq::error_t
object_	machine/message_buffer.h	/^  void* object_;$/;"	m	class:MessagePart
offset_	components/log/local_mem_log.cc	/^  uint64 offset_;$/;"	m	class:LocalMemLogReader	file:
offset_	fs/block_log.h	/^  int offset_;$/;"	m	class:SequenceSource
ok	fs/status.h	/^  bool ok() {$/;"	f	class:Status
old_substore_	components/store/hybrid_versioned_kvstore.h	/^  VersionedKVStore* old_substore_;$/;"	m	class:HybridVersionedKVStore
operator !=	btree/btree.h	/^  bool operator!=(const const_iterator &x) const {$/;"	f	struct:btree::btree_iterator
operator !=	btree/btree_container.h	/^  bool operator!=(const self_type& other) const {$/;"	f	class:btree::btree_container
operator !=	btree/safe_btree.h	/^  bool operator!=(const const_iterator &x) const {$/;"	f	class:btree::safe_btree_iterator
operator ()	btree/btree.h	/^  bool operator()(const Key &a, const Key &b) const {$/;"	f	struct:btree::btree_upper_bound_adapter
operator ()	btree/btree.h	/^  bool operator()(const Key &x, const Key &y) const {$/;"	f	struct:btree::btree_key_comparer
operator ()	btree/btree.h	/^  int operator()(const Key &a, const Key &b) const {$/;"	f	struct:btree::btree_upper_bound_compare_to_adapter
operator ()	btree/btree.h	/^  int operator()(const std::string &a, const std::string &b) const {$/;"	f	struct:btree::btree_key_compare_to_adapter
operator ()	btree/btree_bench.cc	/^  result_type operator()(result_type l) {$/;"	f	struct:btree::__anon11::RandGen
operator ()	btree/btree_test.cc	/^  bool operator()(const std::string &a, const std::string &b) const {$/;"	f	struct:btree::__anon12::SubstringLess
operator ()	btree/btree_test.h	/^  K operator()(int i) const {$/;"	f	struct:btree::Generator
operator ()	btree/btree_test.h	/^  const typename _Pair::first_type& operator()(const _Pair& __x) const {$/;"	f	struct:btree::select1st
operator ()	btree/btree_test.h	/^  inline const T& operator()(const T& t) const { return t; }$/;"	f	struct:btree::identity
operator ()	btree/btree_test.h	/^  std::pair<T, U> operator()(int i) const {$/;"	f	struct:btree::Generator
operator ()	btree/btree_test.h	/^  std::string operator()(int i) const {$/;"	f	struct:btree::Generator
operator *	btree/btree.h	/^  reference operator*() const {$/;"	f	struct:btree::btree_iterator
operator *	btree/btree_container.h	/^    value_type operator*() const {$/;"	f	struct:btree::btree_map_container::generate_value
operator *	btree/safe_btree.h	/^  reference operator*() const {$/;"	f	class:btree::safe_btree_iterator
operator ++	btree/btree.h	/^  self_type operator++(int) {$/;"	f	struct:btree::btree_iterator
operator ++	btree/btree.h	/^  self_type& operator++() {$/;"	f	struct:btree::btree_iterator
operator ++	btree/safe_btree.h	/^  self_type operator++(int) {$/;"	f	class:btree::safe_btree_iterator
operator ++	btree/safe_btree.h	/^  self_type& operator++() {$/;"	f	class:btree::safe_btree_iterator
operator +=	btree/btree.h	/^    node_stats& operator+=(const node_stats &x) {$/;"	f	struct:btree::btree::node_stats
operator --	btree/btree.h	/^  self_type operator--(int) {$/;"	f	struct:btree::btree_iterator
operator --	btree/btree.h	/^  self_type& operator--() {$/;"	f	struct:btree::btree_iterator
operator --	btree/safe_btree.h	/^  self_type operator--(int) {$/;"	f	class:btree::safe_btree_iterator
operator --	btree/safe_btree.h	/^  self_type& operator--() {$/;"	f	class:btree::safe_btree_iterator
operator ->	btree/btree.h	/^  pointer operator->() const {$/;"	f	struct:btree::btree_iterator
operator ->	btree/safe_btree.h	/^  pointer operator->() const {$/;"	f	class:btree::safe_btree_iterator
operator <<	btree/btree_container.h	/^inline std::ostream& operator<<(std::ostream &os, const btree_container<T> &b) {$/;"	f	namespace:btree
operator <<	btree/btree_test.h	/^ostream& operator<<(ostream &os, const std::pair<T, U> &p) {$/;"	f	namespace:std
operator <<	common/types.h	/^inline std::ostream& operator<<(std::ostream& out, const Slice& s) {$/;"	f
operator <<	fs/status.h	/^inline std::ostream& operator<<(std::ostream& out, const Status& s) {$/;"	f
operator <<	machine/message_buffer.h	/^inline std::ostream& operator<<($/;"	f
operator =	btree/btree.h	/^  self_type& operator=(const self_type &x) {$/;"	f	class:btree::btree
operator =	btree/btree_test.h	/^  self_type& operator=(const self_type &x) {$/;"	f	class:btree::base_checker
operator =	btree/safe_btree.h	/^  self_type& operator=(const self_type &x) {$/;"	f	class:btree::safe_btree
operator =	fs/status.h	/^  Status& operator=(const Status& other) {$/;"	f	class:Status
operator =	machine/connection/zmq_cpp.h	/^        inline context_t &operator = (context_t &&rhs)$/;"	f	class:zmq::context_t
operator =	machine/connection/zmq_cpp.h	/^        inline message_t &operator = (message_t &&rhs)$/;"	f	class:zmq::message_t
operator =	machine/connection/zmq_cpp.h	/^        inline socket_t& operator=(socket_t&& rhs)$/;"	f	class:zmq::socket_t
operator ==	btree/btree.h	/^  bool operator==(const const_iterator &x) const {$/;"	f	struct:btree::btree_iterator
operator ==	btree/btree_container.h	/^  bool operator==(const self_type& x) const {$/;"	f	class:btree::btree_container
operator ==	btree/btree_test.h	/^bool operator==(const std::pair<T, U> &x, const std::pair<V, W> &y) {$/;"	f	namespace:std
operator ==	btree/safe_btree.h	/^  bool operator==(const const_iterator &x) const {$/;"	f	class:btree::safe_btree_iterator
operator ==	fs/status.h	/^  bool operator==(const Status& other) const {$/;"	f	class:Status
operator ==	machine/message_buffer.h	/^  inline bool operator==(const MessageBuffer& other) const {$/;"	f	class:MessageBuffer
operator []	btree/btree_container.h	/^  data_type& operator[](const key_type &key) {$/;"	f	class:btree::btree_map_container
operator []	machine/message_buffer.h	/^  inline const Slice& operator[](uint32 i) const {$/;"	f	class:MessageBuffer
operator void*	machine/connection/zmq_cpp.h	/^        inline operator void* ()$/;"	f	class:zmq::context_t
operator void*	machine/connection/zmq_cpp.h	/^        inline operator void* ()$/;"	f	class:zmq::socket_t
operator |	common/vec.h	/^  inline Vec& operator | (T t) {$/;"	f	class:Vec
operator ||	common/vec.h	/^  inline vector<T> operator||(T t) {$/;"	f	class:Vec
origin_	fs/metadata_store.cc	/^  uint32 origin_;$/;"	m	class:DistributedExecutionContext	file:
os	.ycm_extra_conf.py	/^import os$/;"	i
os	lint	/^import os$/;"	i
other	btree/btree_test.h	/^    typedef TestAllocator<U, typename Alloc::template rebind<U>::other> other;$/;"	t	struct:btree::TestAllocator::rebind
overhead	btree/btree.h	/^  double overhead() const {$/;"	f	class:btree::btree
overhead	btree/btree_container.h	/^  double overhead() const { return tree_.overhead(); }$/;"	f	class:btree::btree_container
overhead	btree/btree_test.h	/^  double overhead() const { return tree_.overhead(); }$/;"	f	class:btree::base_checker
overhead	btree/safe_btree.h	/^  double overhead() const { return tree_.overhead(); }$/;"	f	class:btree::safe_btree
params_type	btree/btree.h	/^  typedef Params params_type;$/;"	t	class:btree::btree
params_type	btree/btree.h	/^  typedef Params params_type;$/;"	t	class:btree::btree_node
params_type	btree/btree.h	/^  typedef typename Node::params_type params_type;$/;"	t	struct:btree::btree_iterator
params_type	btree/btree_container.h	/^  typedef typename Tree::params_type params_type;$/;"	t	class:btree::btree_container
params_type	btree/btree_map.h	/^    Key, Value, Compare, Alloc, TargetNodeSize> params_type;$/;"	t	class:btree::btree_map
params_type	btree/btree_map.h	/^    Key, Value, Compare, Alloc, TargetNodeSize> params_type;$/;"	t	class:btree::btree_multimap
params_type	btree/btree_set.h	/^  typedef btree_set_params<Key, Compare, Alloc, TargetNodeSize> params_type;$/;"	t	class:btree::btree_multiset
params_type	btree/btree_set.h	/^  typedef btree_set_params<Key, Compare, Alloc, TargetNodeSize> params_type;$/;"	t	class:btree::btree_set
params_type	btree/safe_btree.h	/^  typedef typename btree_type::params_type params_type;$/;"	t	class:btree::safe_btree
params_type	btree/safe_btree_map.h	/^    Key, Value, Compare, Alloc, TargetNodeSize> params_type;$/;"	t	class:btree::safe_btree_map
params_type	btree/safe_btree_set.h	/^  typedef btree_set_params<Key, Compare, Alloc, TargetNodeSize> params_type;$/;"	t	class:btree::safe_btree_set
parent	btree/btree.h	/^    btree_node *parent;$/;"	m	struct:btree::btree_node::base_fields
parent	btree/btree.h	/^  btree_node* parent() const { return fields_.parent; }$/;"	f	class:btree::btree_node
participants_	components/log/paxos.h	/^  vector<uint64> participants_;$/;"	m	class:FakePaxosApp
participants_	components/log/paxos2.h	/^  vector<uint64> participants_;$/;"	m	class:Paxos2App
partitions	fs/block_log_test.cc	/^  set<uint64> partitions;$/;"	m	struct:LogEntry	file:
partitions_per_replica	components/log/paxos2.h	/^  uint32 partitions_per_replica;$/;"	m	class:Paxos2App
parts_	machine/message_buffer.h	/^  vector<MessagePart*> parts_;$/;"	m	class:MessageBuffer
path_	fs/local_calvinfs.h	/^  string path_;$/;"	m	class:LocalFileHandle
path_prefix_	fs/block_store.h	/^  string path_prefix_;$/;"	m	class:LocalFileBlockStore
paxos_leader_	fs/block_log.h	/^  Paxos2App* paxos_leader_;$/;"	m	class:BlockLogApp
pointer	btree/btree.h	/^  typedef Pointer pointer;$/;"	t	struct:btree::btree_iterator
pointer	btree/btree.h	/^  typedef typename Params::pointer pointer;$/;"	t	class:btree::btree
pointer	btree/btree.h	/^  typedef typename Params::pointer pointer;$/;"	t	class:btree::btree_node
pointer	btree/btree.h	/^  typedef value_type* pointer;$/;"	t	struct:btree::btree_map_params
pointer	btree/btree.h	/^  typedef value_type* pointer;$/;"	t	struct:btree::btree_set_params
pointer	btree/btree_container.h	/^  typedef typename Tree::pointer pointer;$/;"	t	class:btree::btree_container
pointer	btree/btree_test.h	/^  typedef typename Alloc::pointer pointer;$/;"	t	class:btree::TestAllocator
pointer	btree/btree_test.h	/^  typedef typename TreeType::pointer pointer;$/;"	t	class:btree::base_checker
pointer	btree/safe_btree.h	/^  typedef typename Iterator::pointer pointer;$/;"	t	class:btree::safe_btree_iterator
pointer	btree/safe_btree.h	/^  typedef typename btree_type::pointer pointer;$/;"	t	class:btree::safe_btree
poll	machine/connection/zmq_cpp.h	/^    inline int poll (zmq_pollitem_t *items_, int nitems_, long timeout_ = -1)$/;"	f	namespace:zmq
pollitem_t	machine/connection/zmq_cpp.h	/^    typedef zmq_pollitem_t pollitem_t;$/;"	t	namespace:zmq
port_	machine/connection/connection.h	/^  int port_;$/;"	m	class:Connection
port_	machine/external_connection.h	/^  int port_;$/;"	m	class:ExternalConnection
position	btree/btree.h	/^    field_type position;$/;"	m	struct:btree::btree_node::base_fields
position	btree/btree.h	/^  int position() const { return fields_.position; }$/;"	f	class:btree::btree_node
position	btree/btree.h	/^  int position;$/;"	m	struct:btree::btree_iterator
priority_	machine/thread_pool/thread_pool.cc	/^  int priority_;$/;"	m	class:SubPool	file:
ptr	machine/connection/zmq_cpp.h	/^        void *ptr;$/;"	m	class:zmq::context_t
ptr	machine/connection/zmq_cpp.h	/^        void *ptr;$/;"	m	class:zmq::socket_t
queue_	common/atomic.h	/^  AtomicQueue<pair<T, double> > queue_;$/;"	m	class:DelayQueue
queue_	common/atomic.h	/^  vector<T> queue_;  \/\/ Circular buffer containing elements.$/;"	m	class:AtomicQueue
queue_	common/source.h	/^  AtomicQueue<T> queue_;$/;"	m	class:QueueSource
queue_	db/client.h	/^  QueueSource<Action*>* queue_;$/;"	m	class:MicroClient
queue_	fs/block_log.h	/^  AtomicQueue<Action*> queue_;$/;"	m	class:BlockLogApp
queue_	machine/thread_pool/thread_pool.cc	/^  AtomicQueue<pair<Header*, MessageBuffer*> > queue_;$/;"	m	class:SubPool	file:
random_data_	fs/calvinfs_client_app.h	/^  string random_data_;$/;"	m	class:CalvinFSClientApp
rbegin	btree/btree.h	/^  const_reverse_iterator rbegin() const {$/;"	f	class:btree::btree
rbegin	btree/btree.h	/^  reverse_iterator rbegin() {$/;"	f	class:btree::btree
rbegin	btree/btree_container.h	/^  const_reverse_iterator rbegin() const { return tree_.rbegin(); }$/;"	f	class:btree::btree_container
rbegin	btree/btree_container.h	/^  reverse_iterator rbegin() { return tree_.rbegin(); }$/;"	f	class:btree::btree_container
rbegin	btree/btree_test.h	/^  const_reverse_iterator rbegin() const { return tree_.rbegin(); }$/;"	f	class:btree::base_checker
rbegin	btree/btree_test.h	/^  reverse_iterator rbegin() { return tree_.rbegin(); }$/;"	f	class:btree::base_checker
rbegin	btree/safe_btree.h	/^  const_reverse_iterator rbegin() const {$/;"	f	class:btree::safe_btree
rbegin	btree/safe_btree.h	/^  reverse_iterator rbegin() {$/;"	f	class:btree::safe_btree
re	lint	/^import re$/;"	i
reader_	components/log/log_source.h	/^  Log::Reader* reader_;$/;"	m	class:LogSource
reader_	fs/metadata_store.cc	/^  bool reader_;$/;"	m	class:ExecutionContext	file:
readers_for_local_log	components/log/paxos2.h	/^  map<uint32, Log::Reader*> readers_for_local_log;$/;"	m	class:Paxos2App
reads_	fs/metadata_store.cc	/^  map<string, string> reads_;$/;"	m	class:ExecutionContext	file:
readset_	experimental/dag_test.cc	/^  int readset_[READSETSIZE];$/;"	m	struct:Node	file:
ready_	components/scheduler/lock_manager.h	/^  queue<Action*> ready_;$/;"	m	class:LockManager
rebind	btree/btree_test.h	/^  template <class U> struct rebind {$/;"	s	class:btree::TestAllocator
rebuild	machine/connection/zmq_cpp.h	/^        inline void rebuild ()$/;"	f	class:zmq::message_t
rebuild	machine/connection/zmq_cpp.h	/^        inline void rebuild (size_t size_)$/;"	f	class:zmq::message_t
rebuild	machine/connection/zmq_cpp.h	/^        inline void rebuild (void *data_, size_t size_, free_fn *ffn_,$/;"	f	class:zmq::message_t
records_	components/store/btreestore.h	/^  btree::btree_map<string, string> records_;$/;"	m	class:BTreeStore
records_	components/store/leveldbstore.h	/^  leveldb::DB* records_;$/;"	m	class:LevelDBStore
records_	components/store/microbenchmark_store.h	/^  KVStore* records_;$/;"	m	class:MicrobenchmarkStore
records_	components/store/tpcc_store.h	/^  KVStore* records_;$/;"	m	class:TpccStore
records_	components/store/versioned_kvstore.h	/^  KVStore* records_[kStoreCount];$/;"	m	class:VersionedKVStore
recv	machine/connection/zmq_cpp.h	/^        inline bool recv (message_t *msg_, int flags_ = 0)$/;"	f	class:zmq::socket_t
recv	machine/connection/zmq_cpp.h	/^        inline size_t recv (void *buf_, size_t len_, int flags_ = 0)$/;"	f	class:zmq::socket_t
reference	btree/btree.h	/^  typedef Reference reference;$/;"	t	struct:btree::btree_iterator
reference	btree/btree.h	/^  typedef typename Params::reference reference;$/;"	t	class:btree::btree
reference	btree/btree.h	/^  typedef typename Params::reference reference;$/;"	t	class:btree::btree_node
reference	btree/btree.h	/^  typedef value_type& reference;$/;"	t	struct:btree::btree_map_params
reference	btree/btree.h	/^  typedef value_type& reference;$/;"	t	struct:btree::btree_set_params
reference	btree/btree_container.h	/^  typedef typename Tree::reference reference;$/;"	t	class:btree::btree_container
reference	btree/btree_test.h	/^  typedef typename TreeType::reference reference;$/;"	t	class:btree::base_checker
reference	btree/safe_btree.h	/^  typedef typename Iterator::reference reference;$/;"	t	class:btree::safe_btree_iterator
reference	btree/safe_btree.h	/^  typedef typename btree_type::reference reference;$/;"	t	class:btree::safe_btree
remote_readers_	components/log/log_app.h	/^  map<pair<uint64, string>, Log::Reader*> remote_readers_;$/;"	m	class:LogApp
remove_const	btree/btree_test.h	/^struct remove_const<pair<T, U> > {$/;"	s	namespace:std
rend	btree/btree.h	/^  const_reverse_iterator rend() const {$/;"	f	class:btree::btree
rend	btree/btree.h	/^  reverse_iterator rend() {$/;"	f	class:btree::btree
rend	btree/btree_container.h	/^  const_reverse_iterator rend() const { return tree_.rend(); }$/;"	f	class:btree::btree_container
rend	btree/btree_container.h	/^  reverse_iterator rend() { return tree_.rend(); }$/;"	f	class:btree::btree_container
rend	btree/btree_test.h	/^  const_reverse_iterator rend() const { return tree_.rend(); }$/;"	f	class:btree::base_checker
rend	btree/btree_test.h	/^  reverse_iterator rend() { return tree_.rend(); }$/;"	f	class:btree::base_checker
rend	btree/safe_btree.h	/^  const_reverse_iterator rend() const {$/;"	f	class:btree::safe_btree
rend	btree/safe_btree.h	/^  reverse_iterator rend() {$/;"	f	class:btree::safe_btree
replica_	fs/block_log.h	/^  uint64 replica_;$/;"	m	class:BlockLogApp
replica_	fs/block_store.h	/^  uint64 replica_;$/;"	m	class:DistributedBlockStoreApp
replica_	fs/calvinfs_client_app.h	/^  uint64 replica_;$/;"	m	class:CalvinFSClientApp
replica_	fs/metadata_store.cc	/^  uint64 replica_;$/;"	m	class:DistributedExecutionContext	file:
replica_	fs/metadata_store.h	/^  uint32 replica_;$/;"	m	class:MetadataStore
replica_count	components/log/paxos2.h	/^  uint32 replica_count;$/;"	m	class:Paxos2App
replicas_	fs/calvinfs.h	/^  map<uint64, uint64> replicas_;$/;"	m	class:CalvinFSConfigMap
reporting_	fs/calvinfs_client_app.h	/^  bool reporting_;$/;"	m	class:CalvinFSClientApp
reports_	machine/app/reporter.h	/^  vector<Report*> reports_;$/;"	m	class:Reporter
result_type	btree/btree_bench.cc	/^  typedef ptrdiff_t result_type;$/;"	t	struct:btree::__anon11::RandGen	file:
results_	fs/calvinfs.h	/^  AtomicQueue<MessageBuffer*>* results_;$/;"	m	class:LocalCalvinFS
reverse_iterator	btree/btree.h	/^  typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:btree::btree
reverse_iterator	btree/btree_container.h	/^  typedef typename Tree::reverse_iterator reverse_iterator;$/;"	t	class:btree::btree_container
reverse_iterator	btree/btree_test.h	/^  typedef typename TreeType::reverse_iterator reverse_iterator;$/;"	t	class:btree::base_checker
reverse_iterator	btree/safe_btree.h	/^  typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:btree::safe_btree
rightmost	btree/btree.h	/^    btree_node *rightmost;$/;"	m	struct:btree::btree_node::root_fields
rightmost	btree/btree.h	/^  btree_node* rightmost() const { return fields_.rightmost; }$/;"	f	class:btree::btree_node
rightmost	btree/btree.h	/^  const node_type* rightmost() const {$/;"	f	class:btree::btree
rightmost	btree/btree.h	/^  node_type* rightmost() {$/;"	f	class:btree::btree
riter_check	btree/btree_test.h	/^  IterType riter_check($/;"	f	class:btree::base_checker
root	btree/btree.h	/^  const node_type* root() const { return root_.data; }$/;"	f	class:btree::btree
root	btree/btree.h	/^  node_type* root() { return root_.data; }$/;"	f	class:btree::btree
root_	btree/btree.h	/^  empty_base_handle<internal_allocator_type, node_type*> root_;$/;"	m	class:btree::btree
root_	fs/localfs.h	/^  string root_;$/;"	m	class:LocalFS
root_fields	btree/btree.h	/^  struct root_fields : public internal_fields {$/;"	s	class:btree::btree_node
root_fields	btree/btree.h	/^  typedef typename node_type::root_fields root_fields;$/;"	t	class:btree::btree
rr_mutex_	components/log/log_app.h	/^  Mutex rr_mutex_;$/;"	m	class:LogApp
running_action_count_	components/scheduler/locking_scheduler.h	/^  int running_action_count_;$/;"	m	class:LockingScheduler
s_	components/scheduler/scheduler_test.cc	/^  Scheduler* s_;$/;"	m	class:SchedulerTest	file:
safe_btree	btree/safe_btree.h	/^  safe_btree(const key_compare &comp, const allocator_type &alloc)$/;"	f	class:btree::safe_btree
safe_btree	btree/safe_btree.h	/^  safe_btree(const self_type &x)$/;"	f	class:btree::safe_btree
safe_btree	btree/safe_btree.h	/^class safe_btree {$/;"	c	namespace:btree
safe_btree_iterator	btree/safe_btree.h	/^  safe_btree_iterator()$/;"	f	class:btree::safe_btree_iterator
safe_btree_iterator	btree/safe_btree.h	/^  safe_btree_iterator(Tree *tree, const Iterator &iter)$/;"	f	class:btree::safe_btree_iterator
safe_btree_iterator	btree/safe_btree.h	/^  safe_btree_iterator(const iterator &x)$/;"	f	class:btree::safe_btree_iterator
safe_btree_iterator	btree/safe_btree.h	/^class safe_btree_iterator {$/;"	c	namespace:btree
safe_btree_map	btree/safe_btree_map.h	/^  safe_btree_map(InputIterator b, InputIterator e,$/;"	f	class:btree::safe_btree_map
safe_btree_map	btree/safe_btree_map.h	/^  safe_btree_map(const key_compare &comp = key_compare(),$/;"	f	class:btree::safe_btree_map
safe_btree_map	btree/safe_btree_map.h	/^  safe_btree_map(const self_type &x)$/;"	f	class:btree::safe_btree_map
safe_btree_map	btree/safe_btree_map.h	/^class safe_btree_map : public btree_map_container<$/;"	c	namespace:btree
safe_btree_set	btree/safe_btree_set.h	/^  safe_btree_set(InputIterator b, InputIterator e,$/;"	f	class:btree::safe_btree_set
safe_btree_set	btree/safe_btree_set.h	/^  safe_btree_set(const key_compare &comp = key_compare(),$/;"	f	class:btree::safe_btree_set
safe_btree_set	btree/safe_btree_set.h	/^  safe_btree_set(const self_type &x)$/;"	f	class:btree::safe_btree_set
safe_btree_set	btree/safe_btree_set.h	/^class safe_btree_set : public btree_unique_container<$/;"	c	namespace:btree
safe_version_	components/scheduler/locking_scheduler.h	/^  atomic<uint64> safe_version_;$/;"	m	class:LockingScheduler
safe_version_	components/scheduler/serial_scheduler.h	/^  uint64 safe_version_;$/;"	m	class:SerialScheduler
safe_version_	components/scheduler/vll_scheduler.h	/^  uint64 safe_version_;$/;"	m	class:VLLScheduler
scheduler_	fs/calvinfs.h	/^  Scheduler* scheduler_;$/;"	m	class:LocalCalvinFS
scheduler_	fs/calvinfs_client_app.h	/^  Scheduler* scheduler_;$/;"	m	class:CalvinFSClientApp
scheduler_type_	db/materialization_test.cc	/^  string scheduler_type_;$/;"	m	class:Materialization	file:
search_type	btree/btree.h	/^    linear_search_type, binary_search_type>::type search_type;$/;"	t	class:btree::btree_node
select1st	btree/btree_test.h	/^struct select1st : public std::unary_function<_Pair, typename _Pair::first_type> {$/;"	s	namespace:btree
self_type	btree/btree.h	/^  typedef btree<Params> self_type;$/;"	t	class:btree::btree
self_type	btree/btree.h	/^  typedef btree_iterator<Node, Reference, Pointer> self_type;$/;"	t	struct:btree::btree_iterator
self_type	btree/btree.h	/^  typedef btree_node<Params> self_type;$/;"	t	class:btree::btree_node
self_type	btree/btree_container.h	/^  typedef btree_container<Tree> self_type;$/;"	t	class:btree::btree_container
self_type	btree/btree_container.h	/^  typedef btree_map_container<Tree> self_type;$/;"	t	class:btree::btree_map_container
self_type	btree/btree_container.h	/^  typedef btree_multi_container<Tree> self_type;$/;"	t	class:btree::btree_multi_container
self_type	btree/btree_container.h	/^  typedef btree_unique_container<Tree> self_type;$/;"	t	class:btree::btree_unique_container
self_type	btree/btree_map.h	/^  typedef btree_map<Key, Value, Compare, Alloc, TargetNodeSize> self_type;$/;"	t	class:btree::btree_map
self_type	btree/btree_map.h	/^  typedef btree_multimap<Key, Value, Compare, Alloc, TargetNodeSize> self_type;$/;"	t	class:btree::btree_multimap
self_type	btree/btree_set.h	/^  typedef btree_multiset<Key, Compare, Alloc, TargetNodeSize> self_type;$/;"	t	class:btree::btree_multiset
self_type	btree/btree_set.h	/^  typedef btree_set<Key, Compare, Alloc, TargetNodeSize> self_type;$/;"	t	class:btree::btree_set
self_type	btree/btree_test.h	/^  typedef base_checker<TreeType, CheckerType> self_type;$/;"	t	class:btree::base_checker
self_type	btree/btree_test.h	/^  typedef multi_checker<TreeType, CheckerType> self_type;$/;"	t	class:btree::multi_checker
self_type	btree/btree_test.h	/^  typedef unique_checker<TreeType, CheckerType> self_type;$/;"	t	class:btree::unique_checker
self_type	btree/safe_btree.h	/^  typedef safe_btree<Params> self_type;$/;"	t	class:btree::safe_btree
self_type	btree/safe_btree.h	/^  typedef safe_btree_iterator<Tree, Iterator> self_type;$/;"	t	class:btree::safe_btree_iterator
self_type	btree/safe_btree_map.h	/^  typedef safe_btree_map<Key, Value, Compare, Alloc, TargetNodeSize> self_type;$/;"	t	class:btree::safe_btree_map
self_type	btree/safe_btree_set.h	/^  typedef safe_btree_set<Key, Compare, Alloc, TargetNodeSize> self_type;$/;"	t	class:btree::safe_btree_set
send	machine/connection/zmq_cpp.h	/^        inline bool send (message_t &msg_, int flags_ = 0)$/;"	f	class:zmq::socket_t
send	machine/connection/zmq_cpp.h	/^        inline size_t send (const void *buf_, size_t len_, int flags_ = 0)$/;"	f	class:zmq::socket_t
sequence_	components/log/paxos2.h	/^  PairSequence sequence_;$/;"	m	class:Paxos2App
sequences_other_replicas	components/log/paxos2.h	/^  AtomicQueue<MessageBuffer*> sequences_other_replicas;$/;"	m	class:Paxos2App
set_child	btree/btree.h	/^  void set_child(int i, btree_node *c) {$/;"	f	class:btree::btree_node
set_count	btree/btree.h	/^  void set_count(int v) { fields_.count = v; }$/;"	f	class:btree::btree_node
set_experiment	fs/calvinfs_client_app.h	/^  void set_experiment(int e, int c, int l) {experiment = e; kMaxCapacity = c; local_percentage = l;}$/;"	f	class:CalvinFSClientApp
set_go	machine/thread_pool/thread_pool_test.cc	/^  void set_go(bool val) {$/;"	f	class:BenchmarkMessageHandler
set_position	btree/btree.h	/^  void set_position(int v) { fields_.position = v; }$/;"	f	class:btree::btree_node
set_start_time	fs/calvinfs_client_app.h	/^  void set_start_time(double t) { start_time_ = t; }$/;"	f	class:CalvinFSClientApp
setsockopt	machine/connection/zmq_cpp.h	/^        inline void setsockopt (int option_, const void *optval_,$/;"	f	class:zmq::socket_t
sink	btree/btree_bench.cc	/^void sink(const T& t0) {$/;"	f	namespace:btree::__anon11
size	btree/btree.h	/^    size_type size;$/;"	m	struct:btree::btree_node::root_fields
size	btree/btree.h	/^  size_type size() const { return fields_.size; }$/;"	f	class:btree::btree_node
size	btree/btree.h	/^  size_type size() const {$/;"	f	class:btree::btree
size	btree/btree_container.h	/^  size_type size() const { return tree_.size(); }$/;"	f	class:btree::btree_container
size	btree/btree_test.h	/^  size_type size() const {$/;"	f	class:btree::base_checker
size	btree/safe_btree.h	/^  size_type size() const { return tree_.size(); }$/;"	f	class:btree::safe_btree
size	machine/cluster_config.h	/^  inline int size() const {$/;"	f	class:ClusterConfig
size	machine/connection/zmq_cpp.h	/^        inline size_t size () const$/;"	f	class:zmq::message_t
size	machine/message_buffer.h	/^  inline uint32 size() const {$/;"	f	class:MessageBuffer
size_	common/atomic.h	/^  uint32 size_;      \/\/ Allocated size of queue_, not number of elements.$/;"	m	class:AtomicQueue
size_	components/log/local_mem_log.h	/^  atomic<uint64> size_;$/;"	m	class:LocalMemLog
size_mutex_	common/atomic.h	/^  Mutex size_mutex_;$/;"	m	class:AtomicQueue
size_type	btree/btree.h	/^  typedef ssize_t size_type;$/;"	t	struct:btree::btree_common_params
size_type	btree/btree.h	/^  typedef typename Node::size_type size_type;$/;"	t	struct:btree::btree_iterator
size_type	btree/btree.h	/^  typedef typename Params::size_type size_type;$/;"	t	class:btree::btree
size_type	btree/btree.h	/^  typedef typename Params::size_type size_type;$/;"	t	class:btree::btree_node
size_type	btree/btree_container.h	/^  typedef typename Tree::size_type size_type;$/;"	t	class:btree::btree_container
size_type	btree/btree_container.h	/^  typedef typename Tree::size_type size_type;$/;"	t	class:btree::btree_multi_container
size_type	btree/btree_container.h	/^  typedef typename Tree::size_type size_type;$/;"	t	class:btree::btree_unique_container
size_type	btree/btree_test.h	/^  typedef typename Alloc::size_type size_type;$/;"	t	class:btree::TestAllocator
size_type	btree/btree_test.h	/^  typedef typename TreeType::size_type size_type;$/;"	t	class:btree::base_checker
size_type	btree/safe_btree.h	/^  typedef typename Iterator::size_type size_type;$/;"	t	class:btree::safe_btree_iterator
size_type	btree/safe_btree.h	/^  typedef typename btree_type::size_type size_type;$/;"	t	class:btree::safe_btree
sizeof	btree/btree.h	/^      sizeof(big_),$/;"	m	class:btree::btree
small_	btree/btree.h	/^typedef char small_;$/;"	t	namespace:btree
small_blocks_	fs/block_store.h	/^  LevelDBBlockStore small_blocks_;$/;"	m	class:HybridBlockStore
socket_in_	machine/connection/connection_zmq.h	/^  zmq::socket_t* socket_in_;$/;"	m	class:ConnectionZMQ
socket_in_	machine/external_connection.h	/^  zmq::socket_t* socket_in_;$/;"	m	class:ExternalConnection
socket_t	machine/connection/zmq_cpp.h	/^        inline socket_t (context_t &context_, int type_)$/;"	f	class:zmq::socket_t
socket_t	machine/connection/zmq_cpp.h	/^        inline socket_t(socket_t&& rhs) : ptr(rhs.ptr)$/;"	f	class:zmq::socket_t
socket_t	machine/connection/zmq_cpp.h	/^    class socket_t$/;"	c	namespace:zmq
sockets_out_	machine/connection/connection_zmq.h	/^  map<uint64, zmq::socket_t*> sockets_out_;$/;"	m	class:ConnectionZMQ
sockets_out_	machine/external_connection.h	/^  map<uint64, zmq::socket_t*> sockets_out_;$/;"	m	class:ExternalConnection
source_	db/client.h	/^  Source<Action*>* source_;$/;"	m	class:MicroClient
source_	fs/block_log.h	/^  Source<PairSequence*>* source_;$/;"	m	class:SequenceSource
source_	fs/calvinfs.h	/^  Source<Action*>* source_;$/;"	m	class:LocalCalvinFS
source_app_name_	components/log/log_app.h	/^  string source_app_name_;$/;"	m	class:RemoteLogSource
source_machine_	components/log/log_app.h	/^  uint64 source_machine_;$/;"	m	class:RemoteLogSource
sre_compile	lint	/^import sre_compile$/;"	i
ssh_key	machine/cluster_manager.cc	/^const string& ClusterManager::ssh_key(uint64 m) {$/;"	f	class:ClusterManager
ssh_key2_	machine/cluster_manager.h	/^  string ssh_key2_;$/;"	m	class:ClusterManager
ssh_key3_	machine/cluster_manager.h	/^  string ssh_key3_;$/;"	m	class:ClusterManager
ssh_key_	machine/cluster_manager.h	/^  string ssh_key_;$/;"	m	class:ClusterManager
ssh_username_	machine/cluster_manager.h	/^  string ssh_username_;$/;"	m	class:ClusterManager
start_	common/atomic_test.cc	/^bool start_;$/;"	v
start_time_	fs/calvinfs_client_app.h	/^  double start_time_;$/;"	m	class:CalvinFSClientApp
startable_apps_	machine/app/app.h	/^  map<string, StartApp*> startable_apps_;$/;"	m	struct:SAState
started	machine/thread_pool/thread_pool_test.cc	/^  int64 started() {$/;"	f	class:BenchmarkMessageHandler
started_	components/log/local_mem_log.cc	/^  bool started_;$/;"	m	class:LocalMemLogReader	file:
started_	components/store/btreestore.cc	/^  bool started_;$/;"	m	class:BTreeIterator	file:
started_	components/store/leveldbstore.cc	/^  bool started_;$/;"	m	class:LevelDBStoreIterator	file:
started_	machine/thread_pool/thread_pool_test.cc	/^  atomic<int> started_;$/;"	m	class:BenchmarkMessageHandler	file:
std	btree/btree_test.h	/^namespace std {$/;"	n
stickification_rq_	experimental/dag/appender.h	/^	Source<Action*>* stickification_rq_;$/;"	m	class:Appender
stl_map_int32	btree/btree_bench.cc	/^typedef map<int32_t, intptr_t> stl_map_int32;$/;"	t	namespace:btree::__anon11	file:
stl_map_int64	btree/btree_bench.cc	/^typedef map<int64_t, intptr_t> stl_map_int64;$/;"	t	namespace:btree::__anon11	file:
stl_map_string	btree/btree_bench.cc	/^typedef map<string, intptr_t> stl_map_string;$/;"	t	namespace:btree::__anon11	file:
stl_multimap_int32	btree/btree_bench.cc	/^typedef multimap<int32_t, intptr_t> stl_multimap_int32;$/;"	t	namespace:btree::__anon11	file:
stl_multimap_int64	btree/btree_bench.cc	/^typedef multimap<int64_t, intptr_t> stl_multimap_int64;$/;"	t	namespace:btree::__anon11	file:
stl_multimap_string	btree/btree_bench.cc	/^typedef multimap<string, intptr_t> stl_multimap_string;$/;"	t	namespace:btree::__anon11	file:
stl_multiset_int32	btree/btree_bench.cc	/^typedef multiset<int32_t> stl_multiset_int32;$/;"	t	namespace:btree::__anon11	file:
stl_multiset_int64	btree/btree_bench.cc	/^typedef multiset<int64_t> stl_multiset_int64;$/;"	t	namespace:btree::__anon11	file:
stl_multiset_string	btree/btree_bench.cc	/^typedef multiset<string> stl_multiset_string;$/;"	t	namespace:btree::__anon11	file:
stl_set_int32	btree/btree_bench.cc	/^typedef set<int32_t> stl_set_int32;$/;"	t	namespace:btree::__anon11	file:
stl_set_int64	btree/btree_bench.cc	/^typedef set<int64_t> stl_set_int64;$/;"	t	namespace:btree::__anon11	file:
stl_set_string	btree/btree_bench.cc	/^typedef set<string> stl_set_string;$/;"	t	namespace:btree::__anon11	file:
stop_	machine/machine.h	/^  bool stop_;$/;"	m	class:Machine
stopped_	machine/thread_pool/thread_pool.cc	/^  map<int, bool> stopped_;$/;"	m	class:SubPool	file:
stopped_all_	machine/thread_pool/thread_pool.cc	/^  bool stopped_all_;$/;"	m	class:SubPool	file:
stopped_all_	machine/thread_pool/thread_pool.h	/^  bool stopped_all_;$/;"	m	class:ThreadPool
store	components/store/store_app.h	/^  Store* store() { return store_; }$/;"	f	class:StoreApp
store_	components/scheduler/lazy_scheduler.h	/^  MVStoreApp* store_;$/;"	m	class:LazyScheduler
store_	components/scheduler/scheduler.h	/^  StoreApp* store_;$/;"	m	class:Scheduler
store_	components/store/btreestore.cc	/^  BTreeStore* store_;$/;"	m	class:BTreeIterator	file:
store_	components/store/hybrid_versioned_kvstore_test.cc	/^  HybridVersionedKVStore* store_;$/;"	m	class:HybridVersionedKVStoreTest	file:
store_	components/store/store_app.h	/^  Store* store_;$/;"	m	class:StoreApp
store_	components/store/versioned_kvstore_test.cc	/^  VersionedKVStore* store_;$/;"	m	class:VersionedKVStoreTest	file:
store_	fs/metadata_store.cc	/^  VersionedKVStore* store_;$/;"	m	class:ExecutionContext	file:
store_	fs/metadata_store.h	/^  VersionedKVStore* store_;$/;"	m	class:MetadataStore
store_name_	components/scheduler/lazy_scheduler.h	/^  string store_name_;$/;"	m	class:LazyScheduler
strcount	btree/btree_test.h	/^inline ptrdiff_t strcount(const char* buf, size_t len, char c) {$/;"	f	namespace:btree
strcount	btree/btree_test.h	/^inline ptrdiff_t strcount(const char* buf_begin, const char* buf_end, char c) {$/;"	f	namespace:btree
strcount	btree/btree_test.h	/^inline ptrdiff_t strcount(const std::string& buf, char c) {$/;"	f	namespace:btree
string	common/utils.cc	/^ADD_TYPE_NAME(string);$/;"	v
string	lint	/^import string$/;"	i
subbatch_	fs/block_log.h	/^    ActionBatch* subbatch_;$/;"	m	class:BlockLogApp::ActionSource
subbatch_id_	fs/block_log.h	/^    uint64 subbatch_id_;$/;"	m	class:BlockLogApp::ActionSource
subbatch_version_	fs/block_log.h	/^    uint64 subbatch_version_;$/;"	m	class:BlockLogApp::ActionSource
subbatches_	fs/block_log.h	/^  AtomicMap<uint64, ActionBatch*> subbatches_;$/;"	m	class:BlockLogApp
super_type	btree/btree_container.h	/^  typedef btree_container<Tree> super_type;$/;"	t	class:btree::btree_multi_container
super_type	btree/btree_container.h	/^  typedef btree_container<Tree> super_type;$/;"	t	class:btree::btree_unique_container
super_type	btree/btree_container.h	/^  typedef btree_unique_container<Tree> super_type;$/;"	t	class:btree::btree_map_container
super_type	btree/btree_map.h	/^  typedef btree_map_container<btree_type> super_type;$/;"	t	class:btree::btree_map
super_type	btree/btree_map.h	/^  typedef btree_multi_container<btree_type> super_type;$/;"	t	class:btree::btree_multimap
super_type	btree/btree_set.h	/^  typedef btree_multi_container<btree_type> super_type;$/;"	t	class:btree::btree_multiset
super_type	btree/btree_set.h	/^  typedef btree_unique_container<btree_type> super_type;$/;"	t	class:btree::btree_set
super_type	btree/btree_test.h	/^  typedef base_checker<TreeType, CheckerType> super_type;$/;"	t	class:btree::multi_checker
super_type	btree/btree_test.h	/^  typedef base_checker<TreeType, CheckerType> super_type;$/;"	t	class:btree::unique_checker
super_type	btree/safe_btree_map.h	/^  typedef btree_map_container<btree_type> super_type;$/;"	t	class:btree::safe_btree_map
super_type	btree/safe_btree_set.h	/^  typedef btree_unique_container<btree_type> super_type;$/;"	t	class:btree::safe_btree_set
swap	btree/btree.h	/^  static void swap(mutable_value_type *a, mutable_value_type *b) {$/;"	f	struct:btree::btree_map_params
swap	btree/btree.h	/^  static void swap(mutable_value_type *a, mutable_value_type *b) {$/;"	f	struct:btree::btree_set_params
swap	btree/btree_container.h	/^  void swap(self_type &x) {$/;"	f	class:btree::btree_container
swap	btree/btree_map.h	/^inline void swap(btree_map<K, V, C, A, N> &x,$/;"	f	namespace:btree
swap	btree/btree_map.h	/^inline void swap(btree_multimap<K, V, C, A, N> &x,$/;"	f	namespace:btree
swap	btree/btree_set.h	/^inline void swap(btree_multiset<K, C, A, N> &x,$/;"	f	namespace:btree
swap	btree/btree_set.h	/^inline void swap(btree_set<K, C, A, N> &x, btree_set<K, C, A, N> &y) {$/;"	f	namespace:btree
swap	btree/btree_test.h	/^  void swap(self_type &x) {$/;"	f	class:btree::base_checker
swap	btree/safe_btree.h	/^  void swap(self_type &x) {$/;"	f	class:btree::safe_btree
swap	btree/safe_btree_map.h	/^inline void swap(safe_btree_map<K, V, C, A, N> &x,$/;"	f	namespace:btree
swap	btree/safe_btree_set.h	/^inline void swap(safe_btree_set<K, C, A, N> &x,$/;"	f	namespace:btree
sys	lint	/^import sys$/;"	i
test_values	btree/btree_test.h	/^DECLARE_int32(test_values);$/;"	v
tgen	btree/btree_test.h	/^  Generator<typename std::remove_const<T>::type> tgen;$/;"	m	struct:btree::Generator
thread_	machine/connection/connection_zmq.h	/^  pthread_t thread_;$/;"	m	class:ConnectionZMQ
thread_count_	machine/thread_pool/thread_pool.cc	/^  int thread_count_;$/;"	m	class:SubPool	file:
thread_pool_	machine/machine.h	/^  ThreadPool* thread_pool_;$/;"	m	class:Machine
threading_list	lint	/^threading_list = ($/;"	v
threads_	machine/thread_pool/thread_pool.cc	/^  map<int, pthread_t> threads_;$/;"	m	class:SubPool	file:
to_delete_	fs/block_log.h	/^  DelayQueue<string*> to_delete_;$/;"	m	class:BlockLogApp
tp_	machine/machine.cc	/^  ThreadPool* tp_;$/;"	m	class:ConnectionLoopMessageHandler	file:
tree	btree/btree_test.h	/^  const TreeType& tree() const { return tree_; }$/;"	f	class:btree::base_checker
tree	btree/safe_btree.h	/^  Tree* tree() const { return tree_; }$/;"	f	class:btree::safe_btree_iterator
tree_	btree/btree_container.h	/^  Tree tree_;$/;"	m	class:btree::btree_container
tree_	btree/btree_test.h	/^  TreeType tree_;$/;"	m	class:btree::base_checker
tree_	btree/safe_btree.h	/^  Tree *tree_;$/;"	m	class:btree::safe_btree_iterator
tree_	btree/safe_btree.h	/^  btree_type tree_;$/;"	m	class:btree::safe_btree
tree_const_iterator	btree/safe_btree.h	/^  typedef typename btree_type::const_iterator tree_const_iterator;$/;"	t	class:btree::safe_btree
tree_iterator	btree/safe_btree.h	/^  typedef typename btree_type::iterator tree_iterator;$/;"	t	class:btree::safe_btree
type	btree/btree.h	/^  typedef A type;$/;"	t	struct:btree::if_
type	btree/btree.h	/^  typedef B type;$/;"	t	struct:btree::if_
type	btree/btree_test.h	/^               typename remove_const<U>::type> type;$/;"	t	struct:std::remove_const
type	btree/btree_test.h	/^  typedef identity<K> type;$/;"	t	struct:btree::KeyOfValue
type	btree/btree_test.h	/^  typedef select1st<V> type;$/;"	t	struct:btree::KeyOfValue
type_	machine/message_buffer.h	/^  MessagePartType type_;$/;"	m	class:MessagePart
ugen	btree/btree_test.h	/^  Generator<typename std::remove_const<U>::type> ugen;$/;"	m	struct:btree::Generator
uint16	common/types.h	/^typedef uint16_t uint16;$/;"	t
uint16_t	btree/btree.h	/^    uint16_t,$/;"	t	struct:btree::btree_common_params
uint32	common/types.h	/^typedef uint32_t uint32;$/;"	t
uint32	common/utils_test.cc	/^ADD_TYPE_NAME(uint32);$/;"	v
uint64	common/types.h	/^typedef uint64_t uint64;$/;"	t
uint8	common/types.h	/^typedef uint8_t uint8;$/;"	t
unicodedata	lint	/^import unicodedata$/;"	i
unique_checker	btree/btree_test.h	/^  unique_checker()$/;"	f	class:btree::unique_checker
unique_checker	btree/btree_test.h	/^  unique_checker(InputIterator b, InputIterator e)$/;"	f	class:btree::unique_checker
unique_checker	btree/btree_test.h	/^  unique_checker(const self_type &x)$/;"	f	class:btree::unique_checker
unique_checker	btree/btree_test.h	/^class unique_checker : public base_checker<TreeType, CheckerType> {$/;"	c	namespace:btree
update	btree/safe_btree.h	/^  void update() const {$/;"	f	class:btree::safe_btree_iterator
upper_bound	btree/btree.h	/^  const_iterator upper_bound(const key_type &key) const {$/;"	f	class:btree::btree
upper_bound	btree/btree.h	/^  int upper_bound(const key_type &k, const Compare &comp) const {$/;"	f	class:btree::btree_node
upper_bound	btree/btree.h	/^  iterator upper_bound(const key_type &key) {$/;"	f	class:btree::btree
upper_bound	btree/btree.h	/^  static int upper_bound(const K &k, const N &n, Compare comp)  {$/;"	f	struct:btree::btree_binary_search_plain_compare
upper_bound	btree/btree.h	/^  static int upper_bound(const K &k, const N &n, Compare comp)  {$/;"	f	struct:btree::btree_linear_search_plain_compare
upper_bound	btree/btree.h	/^  static int upper_bound(const K &k, const N &n, CompareTo comp)  {$/;"	f	struct:btree::btree_binary_search_compare_to
upper_bound	btree/btree.h	/^  static int upper_bound(const K &k, const N &n, CompareTo comp)  {$/;"	f	struct:btree::btree_linear_search_compare_to
upper_bound	btree/btree_container.h	/^  const_iterator upper_bound(const key_type &key) const {$/;"	f	class:btree::btree_container
upper_bound	btree/btree_container.h	/^  iterator upper_bound(const key_type &key) {$/;"	f	class:btree::btree_container
upper_bound	btree/btree_test.h	/^  const_iterator upper_bound(const key_type &key) const {$/;"	f	class:btree::base_checker
upper_bound	btree/btree_test.h	/^  iterator upper_bound(const key_type &key) {$/;"	f	class:btree::base_checker
upper_bound	btree/safe_btree.h	/^  const_iterator upper_bound(const key_type &key) const {$/;"	f	class:btree::safe_btree
upper_bound	btree/safe_btree.h	/^  iterator upper_bound(const key_type &key) {$/;"	f	class:btree::safe_btree
v_	common/vec.h	/^  vector<T> v_;$/;"	m	class:Vec
value	btree/btree.h	/^  const_reference value(int i) const {$/;"	f	class:btree::btree_node
value	btree/btree.h	/^  reference value(int i) {$/;"	f	class:btree::btree_node
value_	components/store/leveldbstore.cc	/^  string value_;$/;"	m	class:LevelDBStoreIterator	file:
value_check	btree/btree_test.h	/^  void value_check(const value_type &x) {$/;"	f	class:btree::base_checker
value_destroy	btree/btree.h	/^  void value_destroy(int i) {$/;"	f	class:btree::btree_node
value_init	btree/btree.h	/^  void value_init(int i) {$/;"	f	class:btree::btree_node
value_init	btree/btree.h	/^  void value_init(int i, const value_type &x) {$/;"	f	class:btree::btree_node
value_swap	btree/btree.h	/^  void value_swap(int i, btree_node *x, int j) {$/;"	f	class:btree::btree_node
value_type	btree/btree.h	/^  typedef Key value_type;$/;"	t	struct:btree::btree_set_params
value_type	btree/btree.h	/^  typedef std::pair<const Key, data_type> value_type;$/;"	t	struct:btree::btree_map_params
value_type	btree/btree.h	/^  typedef typename Params::value_type value_type;$/;"	t	class:btree::btree
value_type	btree/btree.h	/^  typedef typename Params::value_type value_type;$/;"	t	class:btree::btree_node
value_type	btree/btree.h	/^  typedef typename params_type::value_type value_type;$/;"	t	struct:btree::btree_iterator
value_type	btree/btree_container.h	/^  typedef typename Tree::value_type value_type;$/;"	t	class:btree::btree_container
value_type	btree/btree_container.h	/^  typedef typename Tree::value_type value_type;$/;"	t	class:btree::btree_map_container
value_type	btree/btree_container.h	/^  typedef typename Tree::value_type value_type;$/;"	t	class:btree::btree_multi_container
value_type	btree/btree_container.h	/^  typedef typename Tree::value_type value_type;$/;"	t	class:btree::btree_unique_container
value_type	btree/btree_test.h	/^  typedef typename TreeType::value_type value_type;$/;"	t	class:btree::base_checker
value_type	btree/btree_test.h	/^  typedef typename super_type::value_type value_type;$/;"	t	class:btree::multi_checker
value_type	btree/btree_test.h	/^  typedef typename super_type::value_type value_type;$/;"	t	class:btree::unique_checker
value_type	btree/safe_btree.h	/^  typedef typename Iterator::value_type value_type;$/;"	t	class:btree::safe_btree_iterator
value_type	btree/safe_btree.h	/^  typedef typename btree_type::value_type value_type;$/;"	t	class:btree::safe_btree
values	btree/btree.h	/^    mutable_value_type values[kNodeValues];$/;"	m	struct:btree::btree_node::leaf_fields
varint	common/varint.h	/^namespace varint {$/;"	n
verify	btree/btree_container.h	/^  void verify() const {$/;"	f	class:btree::btree_container
verify	btree/btree_test.h	/^  void verify() const {$/;"	f	class:btree::base_checker
verify	btree/safe_btree.h	/^  void verify() const {$/;"	f	class:btree::safe_btree
version	components/log/local_mem_log.h	/^    uint64 version;$/;"	m	struct:LocalMemLog::Entry
version	fs/status.h	/^  uint64 version() {$/;"	f	class:Status
version	machine/connection/zmq_cpp.h	/^    inline void version (int *major_, int *minor_, int *patch_)$/;"	f	namespace:zmq
version_	db/materialization_test.cc	/^  uint64 version_;$/;"	m	class:PreparedSource	file:
version_	fs/local_calvinfs.h	/^  atomic<uint64> version_;$/;"	m	class:LocalFileSystem
version_	fs/local_calvinfs.h	/^  uint64 version_;$/;"	m	class:LocalFileHandle
version_	fs/metadata_store.cc	/^  uint64 version_;$/;"	m	class:ExecutionContext	file:
version_	fs/status.h	/^  uint64 version_;$/;"	m	class:Status
waiting_	components/scheduler/lock_manager.h	/^  unordered_map<Action*, int> waiting_;$/;"	m	class:LockManager
what	machine/connection/zmq_cpp.h	/^        virtual const char *what () const throw ()$/;"	f	class:zmq::error_t
writer_	fs/metadata_store.cc	/^  bool writer_;$/;"	m	class:ExecutionContext	file:
writes_	fs/metadata_store.cc	/^  map<string, string> writes_;$/;"	m	class:ExecutionContext	file:
writeset_	experimental/dag_test.cc	/^  int writeset_[WRITESETSIZE];$/;"	m	struct:Node	file:
ycm_core	.ycm_extra_conf.py	/^import ycm_core$/;"	i
zmq	machine/connection/zmq_cpp.h	/^namespace zmq$/;"	n
~ActionSource	fs/block_log.h	/^    virtual ~ActionSource() {}$/;"	f	class:BlockLogApp::ActionSource
~App	machine/app/app.h	/^  virtual ~App() {}$/;"	f	class:App
~Appender	experimental/dag/appender.h	/^	virtual ~Appender() {$/;"	f	class:Appender
~AtomicMap	common/atomic.h	/^  ~AtomicMap() {}$/;"	f	class:AtomicMap
~BTreeIterator	components/store/btreestore.cc	/^  virtual ~BTreeIterator() {}$/;"	f	class:BTreeIterator
~BTreeStore	components/store/btreestore.h	/^  virtual ~BTreeStore() {}$/;"	f	class:BTreeStore
~BenchmarkMessageHandler	machine/thread_pool/thread_pool_test.cc	/^  virtual ~BenchmarkMessageHandler() {}$/;"	f	class:BenchmarkMessageHandler
~BlockLogApp	fs/block_log.h	/^  virtual ~BlockLogApp() {$/;"	f	class:BlockLogApp
~BlockLogTest	fs/block_log_test.cc	/^  ~BlockLogTest() {$/;"	f	class:BlockLogTest
~BlockStore	fs/block_store.h	/^  virtual ~BlockStore() {}$/;"	f	class:BlockStore
~BlockStoreApp	fs/block_store.cc	/^BlockStoreApp::~BlockStoreApp() {$/;"	f	class:BlockStoreApp
~CalvinFSClientApp	fs/calvinfs_client_app.h	/^  virtual ~CalvinFSClientApp() {$/;"	f	class:CalvinFSClientApp
~ClusterManager	machine/cluster_manager.h	/^  ~ClusterManager() {$/;"	f	class:ClusterManager
~Connection	machine/connection/connection.h	/^  virtual ~Connection() {}$/;"	f	class:Connection
~ConnectionLoopMessageHandler	machine/machine.cc	/^  virtual ~ConnectionLoopMessageHandler() {}$/;"	f	class:ConnectionLoopMessageHandler
~ConnectionZMQ	machine/connection/connection_zmq.cc	/^ConnectionZMQ::~ConnectionZMQ() {$/;"	f	class:ConnectionZMQ
~DeadlockFreedomMessageHandler	machine/thread_pool/thread_pool_test.cc	/^  virtual ~DeadlockFreedomMessageHandler() {}$/;"	f	class:DeadlockFreedomMessageHandler
~DistributedBlockStoreApp	fs/block_store.h	/^  virtual ~DistributedBlockStoreApp() {}$/;"	f	class:DistributedBlockStoreApp
~DistributedExecutionContext	fs/metadata_store.cc	/^  ~DistributedExecutionContext() {$/;"	f	class:DistributedExecutionContext
~EmptySource	common/source.h	/^  virtual ~EmptySource() {}$/;"	f	class:EmptySource
~ExecutionContext	fs/metadata_store.cc	/^  ~ExecutionContext() {$/;"	f	class:ExecutionContext
~ExternalConnection	machine/external_connection.cc	/^ExternalConnection::~ExternalConnection() {$/;"	f	class:ExternalConnection
~FS	fs/fs.h	/^  virtual ~FS() {}$/;"	f	class:FS
~FSTest	fs/fs_test.cc	/^  ~FSTest() {$/;"	f	class:FSTest
~FakePaxosApp	components/log/paxos.h	/^  virtual ~FakePaxosApp() {}$/;"	f	class:FakePaxosApp
~FakePaxosTest	components/log/paxos_test.cc	/^  ~FakePaxosTest() {$/;"	f	class:FakePaxosTest
~FileHandle	fs/fs.h	/^  virtual ~FileHandle() {}$/;"	f	class:FileHandle
~HadoopFS	fs/hdfs.h	/^  virtual ~HadoopFS() {}$/;"	f	class:HadoopFS
~HybridBlockStore	fs/block_store.h	/^  virtual ~HybridBlockStore() {}$/;"	f	class:HybridBlockStore
~HybridVersionedKVStore	components/store/hybrid_versioned_kvstore.cc	/^HybridVersionedKVStore::~HybridVersionedKVStore() {$/;"	f	class:HybridVersionedKVStore
~HybridVersionedKVStoreTest	components/store/hybrid_versioned_kvstore_test.cc	/^  ~HybridVersionedKVStoreTest() {$/;"	f	class:HybridVersionedKVStoreTest
~Iterator	components/store/kvstore.h	/^    virtual ~Iterator() {}$/;"	f	class:KVStore::Iterator
~KVStore	components/store/kvstore.h	/^  virtual ~KVStore() {}$/;"	f	class:KVStore
~LazyScheduler	components/scheduler/lazy_scheduler.h	/^  virtual ~LazyScheduler() {$/;"	f	class:LazyScheduler
~LazyStore	experimental/lazy_store.h	/^  ~LazyStore() {}$/;"	f	class:components::LazyStore
~LevelDBBlockStore	fs/block_store.cc	/^LevelDBBlockStore::~LevelDBBlockStore() {$/;"	f	class:LevelDBBlockStore
~LevelDBStore	components/store/leveldbstore.cc	/^LevelDBStore::~LevelDBStore() {$/;"	f	class:LevelDBStore
~LevelDBStoreIterator	components/store/leveldbstore.cc	/^  virtual ~LevelDBStoreIterator() {$/;"	f	class:LevelDBStoreIterator
~LimitSource	common/source.h	/^  virtual ~LimitSource() {$/;"	f	class:LimitSource
~LocalCalvinFS	fs/calvinfs.cc	/^LocalCalvinFS::~LocalCalvinFS() {$/;"	f	class:LocalCalvinFS
~LocalFS	fs/localfs.cc	/^LocalFS::~LocalFS() {}$/;"	f	class:LocalFS
~LocalFileBlockStore	fs/block_store.h	/^  virtual ~LocalFileBlockStore() {}$/;"	f	class:LocalFileBlockStore
~LocalFileHandle	fs/local_calvinfs.h	/^  virtual ~LocalFileHandle() {}$/;"	f	class:LocalFileHandle
~LocalMemLog	components/log/local_mem_log.cc	/^LocalMemLog::~LocalMemLog() {$/;"	f	class:LocalMemLog
~LocalMemLogReader	components/log/local_mem_log.cc	/^  virtual ~LocalMemLogReader() {}$/;"	f	class:LocalMemLogReader
~Lock	common/mutex.h	/^  ~Lock() {$/;"	f	class:Lock
~LockManager	components/scheduler/lock_manager.h	/^  ~LockManager() {}$/;"	f	class:LockManager
~LockingScheduler	components/scheduler/locking_scheduler.h	/^  virtual ~LockingScheduler() {}$/;"	f	class:LockingScheduler
~Log	components/log/log.h	/^  virtual ~Log() {}$/;"	f	class:Log
~LogApp	components/log/log_app.cc	/^LogApp::~LogApp() {$/;"	f	class:LogApp
~LogAppTest	components/log/log_app_test.cc	/^  ~LogAppTest() {}$/;"	f	class:LogAppTest
~LogSource	components/log/log_source.h	/^  virtual ~LogSource() {$/;"	f	class:LogSource
~Machine	machine/machine.cc	/^Machine::~Machine() {$/;"	f	class:Machine
~Materialization	db/materialization_test.cc	/^  ~Materialization() {$/;"	f	class:Materialization
~MessageBuffer	machine/message_buffer.h	/^  ~MessageBuffer() {$/;"	f	class:MessageBuffer
~MessageHandler	machine/message_handler.h	/^  virtual ~MessageHandler() {}$/;"	f	class:MessageHandler
~MessagePart	machine/message_buffer.h	/^  ~MessagePart() {$/;"	f	class:MessagePart
~MetadataStore	fs/metadata_store.cc	/^MetadataStore::~MetadataStore() {$/;"	f	class:MetadataStore
~MetadataStoreTest	fs/metadata_store_test.cc	/^  ~MetadataStoreTest() {$/;"	f	class:MetadataStoreTest
~MicroClient	db/client.h	/^  virtual ~MicroClient() {$/;"	f	class:MicroClient
~MicroSource	db/materialization_test.cc	/^  virtual ~MicroSource() {}$/;"	f	class:MicroSource
~MicrobenchmarkStore	components/store/microbenchmark_store.cc	/^MicrobenchmarkStore::~MicrobenchmarkStore() {$/;"	f	class:MicrobenchmarkStore
~NewOrderSource	db/materialization_test.cc	/^  virtual ~NewOrderSource() {}$/;"	f	class:NewOrderSource
~Paxos2App	components/log/paxos2.h	/^  virtual ~Paxos2App() {$/;"	f	class:Paxos2App
~Paxos2Test	components/log/paxos2_test.cc	/^  ~Paxos2Test() {$/;"	f	class:Paxos2Test
~PreparedSource	db/materialization_test.cc	/^  virtual ~PreparedSource() {}$/;"	f	class:PreparedSource
~QueueSource	common/source.h	/^  virtual ~QueueSource() {}$/;"	f	class:QueueSource
~ReadLock	common/mutex.h	/^  ~ReadLock() {$/;"	f	class:ReadLock
~Reader	components/log/log.h	/^    virtual ~Reader() {}$/;"	f	class:Log::Reader
~RemoteLogSource	components/log/log_app.h	/^  virtual ~RemoteLogSource() {}$/;"	f	class:RemoteLogSource
~Reporter	machine/app/reporter.h	/^  virtual ~Reporter() {$/;"	f	class:Reporter
~Scheduler	components/scheduler/scheduler.h	/^  virtual ~Scheduler() {$/;"	f	class:Scheduler
~SequenceSource	fs/block_log.h	/^  virtual ~SequenceSource() {$/;"	f	class:SequenceSource
~SerialScheduler	components/scheduler/serial_scheduler.h	/^  ~SerialScheduler() {}$/;"	f	class:SerialScheduler
~Source	common/source.h	/^  virtual ~Source() {}$/;"	f	class:Source
~StartApp	machine/app/app.h	/^  virtual ~StartApp() {}$/;"	f	class:StartApp
~Status	fs/status.h	/^  ~Status() {$/;"	f	class:Status
~Store	components/store/store.h	/^  virtual ~Store() {}$/;"	f	class:Store
~StoreApp	components/store/store_app.cc	/^StoreApp::~StoreApp() {$/;"	f	class:StoreApp
~SubPool	machine/thread_pool/thread_pool.cc	/^SubPool::~SubPool() {$/;"	f	class:SubPool
~SynchronousNoop	machine/machine_test.cc	/^  virtual ~SynchronousNoop() {}$/;"	f	class:SynchronousNoop
~TestAddApp	machine/app/testapp.cc	/^  virtual ~TestAddApp() {}$/;"	f	class:TestAddApp
~TestApp	machine/app/app_test.cc	/^  virtual ~TestApp() {}$/;"	f	class:TestApp
~TestLatencyHandler	machine/thread_pool/thread_pool_test.cc	/^  virtual ~TestLatencyHandler() {}$/;"	f	class:TestLatencyHandler
~TestMessageHandler	machine/thread_pool/thread_pool_test.cc	/^  virtual ~TestMessageHandler() {}$/;"	f	class:TestMessageHandler
~ThreadPool	machine/thread_pool/thread_pool.cc	/^ThreadPool::~ThreadPool() {$/;"	f	class:ThreadPool
~ThrottleSource	common/source.h	/^  virtual ~ThrottleSource() {$/;"	f	class:ThrottleSource
~TpccStore	components/store/tpcc_store.cc	/^TpccStore::~TpccStore() {$/;"	f	class:TpccStore
~VLLScheduler	components/scheduler/vll_scheduler.h	/^  ~VLLScheduler() {}$/;"	f	class:VLLScheduler
~VersionedKVStore	components/store/versioned_kvstore.cc	/^VersionedKVStore::~VersionedKVStore() {$/;"	f	class:VersionedKVStore
~VersionedKVStoreTest	components/store/versioned_kvstore_test.cc	/^  ~VersionedKVStoreTest() {$/;"	f	class:VersionedKVStoreTest
~WorkerThreadMessageHandler	machine/machine.cc	/^  virtual ~WorkerThreadMessageHandler() {}$/;"	f	class:WorkerThreadMessageHandler
~WriteLock	common/mutex.h	/^  ~WriteLock() {$/;"	f	class:WriteLock
~btree	btree/btree.h	/^  ~btree() {$/;"	f	class:btree::btree
~context_t	machine/connection/zmq_cpp.h	/^        inline ~context_t ()$/;"	f	class:zmq::context_t
~message_t	machine/connection/zmq_cpp.h	/^        inline ~message_t ()$/;"	f	class:zmq::message_t
~socket_t	machine/connection/zmq_cpp.h	/^        inline ~socket_t ()$/;"	f	class:zmq::socket_t
